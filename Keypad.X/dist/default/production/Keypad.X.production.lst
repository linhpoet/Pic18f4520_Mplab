

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Oct 10 23:34:08 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4520 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  007B22                     __pidataCOMRAM:
    60                           	callstack 0
    61                           
    62                           ;initializer for _keypadNum
    63  007B22  07                 	db	7
    64  007B23  08                 	db	8
    65  007B24  09                 	db	9
    66  007B25  14                 	db	20
    67  007B26  04                 	db	4
    68  007B27  05                 	db	5
    69  007B28  06                 	db	6
    70  007B29  15                 	db	21
    71  007B2A  01                 	db	1
    72  007B2B  02                 	db	2
    73  007B2C  03                 	db	3
    74  007B2D  16                 	db	22
    75  007B2E  17                 	db	23
    76  007B2F  00                 	db	0
    77  007B30  18                 	db	24
    78  007B31  19                 	db	25
    79                           
    80                           ;initializer for _keypad
    81  007B32  37                 	db	55
    82  007B33  38                 	db	56
    83  007B34  39                 	db	57
    84  007B35  2F                 	db	47
    85  007B36  34                 	db	52
    86  007B37  35                 	db	53
    87  007B38  36                 	db	54
    88  007B39  2A                 	db	42
    89  007B3A  31                 	db	49
    90  007B3B  32                 	db	50
    91  007B3C  33                 	db	51
    92  007B3D  2D                 	db	45
    93  007B3E  20                 	db	32
    94  007B3F  30                 	db	48
    95  007B40  23                 	db	35
    96  007B41  2B                 	db	43
    97  0000                     _PORTB	set	3969
    98  0000                     _TRISB	set	3987
    99  0000                     _PORTD	set	3971
   100  0000                     _PORTC	set	3970
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISD	set	3989
   103                           
   104                           ; #config settings
   105                           
   106                           	psect	cinit
   107  007BE8                     __pcinit:
   108                           	callstack 0
   109  007BE8                     start_initialization:
   110                           	callstack 0
   111  007BE8                     __initialization:
   112                           	callstack 0
   113                           
   114                           ; Initialize objects allocated to COMRAM (32 bytes)
   115                           ; load TBLPTR registers with __pidataCOMRAM
   116  007BE8  0E22               	movlw	low __pidataCOMRAM
   117  007BEA  6EF6               	movwf	tblptrl,c
   118  007BEC  0E7B               	movlw	high __pidataCOMRAM
   119  007BEE  6EF7               	movwf	tblptrh,c
   120  007BF0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   121  007BF2  6EF8               	movwf	tblptru,c
   122  007BF4  EE00  F001         	lfsr	0,__pdataCOMRAM
   123  007BF8  EE10 F020          	lfsr	1,32
   124  007BFC                     copy_data0:
   125  007BFC  0009               	tblrd		*+
   126  007BFE  CFF5 FFEE          	movff	tablat,postinc0
   127  007C02  50E5               	movf	postdec1,w,c
   128  007C04  50E1               	movf	fsr1l,w,c
   129  007C06  E1FA               	bnz	copy_data0
   130                           
   131                           ; Clear objects allocated to COMRAM (8 bytes)
   132  007C08  EE00  F033         	lfsr	0,__pbssCOMRAM
   133  007C0C  0E08               	movlw	8
   134  007C0E                     clear_0:
   135  007C0E  6AEE               	clrf	postinc0,c
   136  007C10  06E8               	decf	wreg,f,c
   137  007C12  E1FD               	bnz	clear_0
   138  007C14                     end_of_initialization:
   139                           	callstack 0
   140  007C14                     __end_of__initialization:
   141                           	callstack 0
   142  007C14  0100               	movlb	0
   143  007C16  EF0D  F03E         	goto	_main	;jump to C main() function
   144                           
   145                           	psect	bssCOMRAM
   146  000033                     __pbssCOMRAM:
   147                           	callstack 0
   148  000033                     _InputNumTemp:
   149                           	callstack 0
   150  000033                     	ds	2
   151  000035                     _InputNum:
   152                           	callstack 0
   153  000035                     	ds	2
   154  000037                     _dem:
   155                           	callstack 0
   156  000037                     	ds	2
   157  000039                     _rowloc:
   158                           	callstack 0
   159  000039                     	ds	1
   160  00003A                     _colloc:
   161                           	callstack 0
   162  00003A                     	ds	1
   163                           
   164                           	psect	dataCOMRAM
   165  000001                     __pdataCOMRAM:
   166                           	callstack 0
   167  000001                     _keypadNum:
   168                           	callstack 0
   169  000001                     	ds	16
   170  000011                     _keypad:
   171                           	callstack 0
   172  000011                     	ds	16
   173                           
   174                           	psect	cstackCOMRAM
   175  000021                     __pcstackCOMRAM:
   176                           	callstack 0
   177  000021                     ??_lcd_command:
   178  000021                     ??_Keyfind:
   179  000021                     ??_lcd_char:
   180  000021                     ?___wmul:
   181                           	callstack 0
   182  000021                     ?___awdiv:
   183                           	callstack 0
   184  000021                     ___wmul@multiplier:
   185                           	callstack 0
   186  000021                     ___awdiv@dividend:
   187                           	callstack 0
   188                           
   189                           ; 2 bytes @ 0x0
   190  000021                     	ds	1
   191  000022                     lcd_command@cmnd:
   192                           	callstack 0
   193  000022                     lcd_char@data:
   194                           	callstack 0
   195                           
   196                           ; 1 bytes @ 0x1
   197  000022                     	ds	1
   198  000023                     ___wmul@multiplicand:
   199                           	callstack 0
   200  000023                     ___awdiv@divisor:
   201                           	callstack 0
   202                           
   203                           ; 2 bytes @ 0x2
   204  000023                     	ds	2
   205  000025                     ___awdiv@counter:
   206                           	callstack 0
   207  000025                     ___wmul@product:
   208                           	callstack 0
   209                           
   210                           ; 2 bytes @ 0x4
   211  000025                     	ds	1
   212  000026                     ___awdiv@sign:
   213                           	callstack 0
   214                           
   215                           ; 1 bytes @ 0x5
   216  000026                     	ds	1
   217  000027                     ___awdiv@quotient:
   218                           	callstack 0
   219                           
   220                           ; 2 bytes @ 0x6
   221  000027                     	ds	2
   222  000029                     lcd_number@num:
   223                           	callstack 0
   224                           
   225                           ; 2 bytes @ 0x8
   226  000029                     	ds	2
   227  00002B                     lcd_number@num_display:
   228                           	callstack 0
   229                           
   230                           ; 2 bytes @ 0xA
   231  00002B                     	ds	2
   232  00002D                     lcd_number@num_test:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0xC
   236  00002D                     	ds	2
   237  00002F                     lcd_number@num_div:
   238                           	callstack 0
   239                           
   240                           ; 2 bytes @ 0xE
   241  00002F                     	ds	2
   242  000031                     ??_main:
   243                           
   244                           ; 1 bytes @ 0x10
   245  000031                     	ds	2
   246                           
   247 ;;
   248 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   249 ;;
   250 ;; *************** function _main *****************
   251 ;; Defined at:
   252 ;;		line 202 in file "newmain.c"
   253 ;; Parameters:    Size  Location     Type
   254 ;;		None
   255 ;; Auto vars:     Size  Location     Type
   256 ;;		None
   257 ;; Return value:  Size  Location     Type
   258 ;;                  1    wreg      void 
   259 ;; Registers used:
   260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   261 ;; Tracked objects:
   262 ;;		On entry : 0/0
   263 ;;		On exit  : 0/0
   264 ;;		Unchanged: 0/0
   265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   266 ;;      Params:         0       0       0       0       0       0       0
   267 ;;      Locals:         0       0       0       0       0       0       0
   268 ;;      Temps:          2       0       0       0       0       0       0
   269 ;;      Totals:         2       0       0       0       0       0       0
   270 ;;Total ram usage:        2 bytes
   271 ;; Hardware stack levels required when called: 2
   272 ;; This function calls:
   273 ;;		_Keyfind
   274 ;;		_LCD_Configuration
   275 ;;		___wmul
   276 ;;		_lcd_command
   277 ;;		_lcd_number
   278 ;; This function is called by:
   279 ;;		Startup code after reset
   280 ;; This function uses a non-reentrant model
   281 ;;
   282                           
   283                           	psect	text0
   284  007C1A                     __ptext0:
   285                           	callstack 0
   286  007C1A                     _main:
   287                           	callstack 29
   288  007C1A                     
   289                           ;newmain.c: 204:     LCD_Configuration();
   290  007C1A  ECA1  F03D         	call	_LCD_Configuration	;wreg free
   291  007C1E                     l1061:
   292                           
   293                           ;newmain.c: 206:     {;newmain.c: 207:         InputNum = Keyfind();
   294  007C1E  EC3C  F03F         	call	_Keyfind	;wreg free
   295  007C22  6E31               	movwf	??_main^0,c
   296  007C24  5031               	movf	??_main^0,w,c
   297  007C26  6E35               	movwf	_InputNum^0,c
   298  007C28  6A36               	clrf	(_InputNum+1)^0,c
   299  007C2A                     
   300                           ;newmain.c: 208:         if(InputNum <= 9)
   301  007C2A  BE36               	btfsc	(_InputNum+1)^0,7,c
   302  007C2C  EF23  F03E         	goto	u310
   303  007C30  5036               	movf	(_InputNum+1)^0,w,c
   304  007C32  E107               	bnz	u311
   305  007C34  0E0A               	movlw	10
   306  007C36  5C35               	subwf	_InputNum^0,w,c
   307  007C38  B0D8               	btfsc	status,0,c
   308  007C3A  EF21  F03E         	goto	u311
   309  007C3E  EF23  F03E         	goto	u310
   310  007C42                     u311:
   311  007C42  EF3B  F03E         	goto	l63
   312  007C46                     u310:
   313  007C46                     
   314                           ;newmain.c: 209:         {;newmain.c: 210:             lcd_number(InputNum);
   315  007C46  C035  F029         	movff	_InputNum,lcd_number@num
   316  007C4A  C036  F02A         	movff	_InputNum+1,lcd_number@num+1
   317  007C4E  ECC0  F03E         	call	_lcd_number	;wreg free
   318                           
   319                           ;newmain.c: 211:             InputNumTemp = InputNumTemp*10 + InputNum;
   320  007C52  C033  F021         	movff	_InputNumTemp,___wmul@multiplier
   321  007C56  C034  F022         	movff	_InputNumTemp+1,___wmul@multiplier+1
   322  007C5A  0E00               	movlw	0
   323  007C5C  6E24               	movwf	(___wmul@multiplicand+1)^0,c
   324  007C5E  0E0A               	movlw	10
   325  007C60  6E23               	movwf	___wmul@multiplicand^0,c
   326  007C62  ECB3  F03D         	call	___wmul	;wreg free
   327  007C66  5035               	movf	_InputNum^0,w,c
   328  007C68  2421               	addwf	?___wmul^0,w,c
   329  007C6A  6E33               	movwf	_InputNumTemp^0,c
   330  007C6C  5036               	movf	(_InputNum+1)^0,w,c
   331  007C6E  2022               	addwfc	(?___wmul+1)^0,w,c
   332  007C70  6E34               	movwf	(_InputNumTemp+1)^0,c
   333                           
   334                           ;newmain.c: 212:         }
   335  007C72  EF4E  F03E         	goto	l1073
   336  007C76                     l63:
   337                           
   338                           ;newmain.c: 214:         {;newmain.c: 215:             InputNum = InputNumTemp;
   339  007C76  C033  F035         	movff	_InputNumTemp,_InputNum
   340  007C7A  C034  F036         	movff	_InputNumTemp+1,_InputNum+1
   341  007C7E                     
   342                           ;newmain.c: 216:             InputNumTemp = 0;
   343  007C7E  0E00               	movlw	0
   344  007C80  6E34               	movwf	(_InputNumTemp+1)^0,c
   345  007C82  0E00               	movlw	0
   346  007C84  6E33               	movwf	_InputNumTemp^0,c
   347  007C86                     
   348                           ;newmain.c: 217:             lcd_command(0xc0);
   349  007C86  0EC0               	movlw	192
   350  007C88  ECC6  F03D         	call	_lcd_command
   351  007C8C                     
   352                           ;newmain.c: 218:             lcd_number(InputNum+1);
   353  007C8C  0E01               	movlw	1
   354  007C8E  2435               	addwf	_InputNum^0,w,c
   355  007C90  6E29               	movwf	lcd_number@num^0,c
   356  007C92  0E00               	movlw	0
   357  007C94  2036               	addwfc	(_InputNum+1)^0,w,c
   358  007C96  6E2A               	movwf	(lcd_number@num+1)^0,c
   359  007C98  ECC0  F03E         	call	_lcd_number	;wreg free
   360  007C9C                     l1073:
   361                           
   362                           ;newmain.c: 220:         _delay((unsigned long)((100)*(8000000/4000.0)));
   363  007C9C  0E02               	movlw	2
   364  007C9E  6E32               	movwf	(??_main+1)^0,c
   365  007CA0  0E04               	movlw	4
   366  007CA2  6E31               	movwf	??_main^0,c
   367  007CA4  0EBA               	movlw	186
   368  007CA6                     u327:
   369  007CA6  2EE8               	decfsz	wreg,f,c
   370  007CA8  D7FE               	bra	u327
   371  007CAA  2E31               	decfsz	??_main^0,f,c
   372  007CAC  D7FC               	bra	u327
   373  007CAE  2E32               	decfsz	(??_main+1)^0,f,c
   374  007CB0  D7FA               	bra	u327
   375  007CB2  D000               	nop2	
   376  007CB4  EF0F  F03E         	goto	l1061
   377  007CB8  EF00  F000         	goto	start
   378  007CBC                     __end_of_main:
   379                           	callstack 0
   380                           
   381 ;; *************** function _lcd_number *****************
   382 ;; Defined at:
   383 ;;		line 40 in file "MyLcd16.c"
   384 ;; Parameters:    Size  Location     Type
   385 ;;  num             2    8[COMRAM] int 
   386 ;; Auto vars:     Size  Location     Type
   387 ;;  num_div         2   14[COMRAM] int 
   388 ;;  num_test        2   12[COMRAM] int 
   389 ;;  num_display     2   10[COMRAM] int 
   390 ;; Return value:  Size  Location     Type
   391 ;;                  1    wreg      void 
   392 ;; Registers used:
   393 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   394 ;; Tracked objects:
   395 ;;		On entry : 0/0
   396 ;;		On exit  : 0/0
   397 ;;		Unchanged: 0/0
   398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   399 ;;      Params:         2       0       0       0       0       0       0
   400 ;;      Locals:         6       0       0       0       0       0       0
   401 ;;      Temps:          0       0       0       0       0       0       0
   402 ;;      Totals:         8       0       0       0       0       0       0
   403 ;;Total ram usage:        8 bytes
   404 ;; Hardware stack levels used: 1
   405 ;; Hardware stack levels required when called: 1
   406 ;; This function calls:
   407 ;;		___awdiv
   408 ;;		___wmul
   409 ;;		_lcd_char
   410 ;; This function is called by:
   411 ;;		_main
   412 ;; This function uses a non-reentrant model
   413 ;;
   414                           
   415                           	psect	text1
   416  007D80                     __ptext1:
   417                           	callstack 0
   418  007D80                     _lcd_number:
   419                           	callstack 29
   420  007D80                     
   421                           ;MyLcd16.c: 40: void lcd_number(int num);MyLcd16.c: 41: {;MyLcd16.c: 42:     int num_div
      +                           = 10000;
   422  007D80  0E27               	movlw	39
   423  007D82  6E30               	movwf	(lcd_number@num_div+1)^0,c
   424  007D84  0E10               	movlw	16
   425  007D86  6E2F               	movwf	lcd_number@num_div^0,c
   426  007D88                     
   427                           ;MyLcd16.c: 43:     int num_test = num;
   428  007D88  C029  F02D         	movff	lcd_number@num,lcd_number@num_test
   429  007D8C  C02A  F02E         	movff	lcd_number@num+1,lcd_number@num_test+1
   430  007D90                     
   431                           ;MyLcd16.c: 45:     if (num != 0) while (num_test/num_div <= 0 )
   432  007D90  5029               	movf	lcd_number@num^0,w,c
   433  007D92  102A               	iorwf	(lcd_number@num+1)^0,w,c
   434  007D94  B4D8               	btfsc	status,2,c
   435  007D96  EFCF  F03E         	goto	u281
   436  007D9A  EFD1  F03E         	goto	u280
   437  007D9E                     u281:
   438  007D9E  EFFA  F03E         	goto	l1047
   439  007DA2                     u280:
   440  007DA2  EFE1  F03E         	goto	l91
   441  007DA6                     l1045:
   442                           
   443                           ;MyLcd16.c: 46:     {;MyLcd16.c: 47:         num_div /= 10;
   444  007DA6  C02F  F021         	movff	lcd_number@num_div,___awdiv@dividend
   445  007DAA  C030  F022         	movff	lcd_number@num_div+1,___awdiv@dividend+1
   446  007DAE  0E00               	movlw	0
   447  007DB0  6E24               	movwf	(___awdiv@divisor+1)^0,c
   448  007DB2  0E0A               	movlw	10
   449  007DB4  6E23               	movwf	___awdiv@divisor^0,c
   450  007DB6  EC5E  F03E         	call	___awdiv	;wreg free
   451  007DBA  C021  F02F         	movff	?___awdiv,lcd_number@num_div
   452  007DBE  C022  F030         	movff	?___awdiv+1,lcd_number@num_div+1
   453  007DC2                     l91:
   454                           
   455                           ;MyLcd16.c: 45:     if (num != 0) while (num_test/num_div <= 0 )
   456  007DC2  C02D  F021         	movff	lcd_number@num_test,___awdiv@dividend
   457  007DC6  C02E  F022         	movff	lcd_number@num_test+1,___awdiv@dividend+1
   458  007DCA  C02F  F023         	movff	lcd_number@num_div,___awdiv@divisor
   459  007DCE  C030  F024         	movff	lcd_number@num_div+1,___awdiv@divisor+1
   460  007DD2  EC5E  F03E         	call	___awdiv	;wreg free
   461  007DD6  BE22               	btfsc	(?___awdiv+1)^0,7,c
   462  007DD8  EFF6  F03E         	goto	u291
   463  007DDC  5022               	movf	(?___awdiv+1)^0,w,c
   464  007DDE  E108               	bnz	u290
   465  007DE0  0421               	decf	?___awdiv^0,w,c
   466  007DE2  A0D8               	btfss	status,0,c
   467  007DE4  EFF6  F03E         	goto	u291
   468  007DE8  EFF8  F03E         	goto	u290
   469  007DEC                     u291:
   470  007DEC  EFD3  F03E         	goto	l1045
   471  007DF0                     u290:
   472  007DF0  EFFE  F03E         	goto	l1049
   473  007DF4                     l1047:
   474  007DF4  0E00               	movlw	0
   475  007DF6  6E30               	movwf	(lcd_number@num_div+1)^0,c
   476  007DF8  0E01               	movlw	1
   477  007DFA  6E2F               	movwf	lcd_number@num_div^0,c
   478  007DFC                     l1049:
   479                           
   480                           ;MyLcd16.c: 52:     {;MyLcd16.c: 53:         num_display = num_test/num_div;
   481  007DFC  C02D  F021         	movff	lcd_number@num_test,___awdiv@dividend
   482  007E00  C02E  F022         	movff	lcd_number@num_test+1,___awdiv@dividend+1
   483  007E04  C02F  F023         	movff	lcd_number@num_div,___awdiv@divisor
   484  007E08  C030  F024         	movff	lcd_number@num_div+1,___awdiv@divisor+1
   485  007E0C  EC5E  F03E         	call	___awdiv	;wreg free
   486  007E10  C021  F02B         	movff	?___awdiv,lcd_number@num_display
   487  007E14  C022  F02C         	movff	?___awdiv+1,lcd_number@num_display+1
   488  007E18                     
   489                           ;MyLcd16.c: 54:         lcd_char(num_display + 48U);
   490  007E18  502B               	movf	lcd_number@num_display^0,w,c
   491  007E1A  0F30               	addlw	48
   492  007E1C  ECDD  F03D         	call	_lcd_char
   493  007E20                     
   494                           ;MyLcd16.c: 55:         num_test = num_test - num_div*num_display;
   495  007E20  C02F  F021         	movff	lcd_number@num_div,___wmul@multiplier
   496  007E24  C030  F022         	movff	lcd_number@num_div+1,___wmul@multiplier+1
   497  007E28  C02B  F023         	movff	lcd_number@num_display,___wmul@multiplicand
   498  007E2C  C02C  F024         	movff	lcd_number@num_display+1,___wmul@multiplicand+1
   499  007E30  ECB3  F03D         	call	___wmul	;wreg free
   500  007E34  5021               	movf	?___wmul^0,w,c
   501  007E36  5C2D               	subwf	lcd_number@num_test^0,w,c
   502  007E38  6E2D               	movwf	lcd_number@num_test^0,c
   503  007E3A  5022               	movf	(?___wmul+1)^0,w,c
   504  007E3C  582E               	subwfb	(lcd_number@num_test+1)^0,w,c
   505  007E3E  6E2E               	movwf	(lcd_number@num_test+1)^0,c
   506  007E40                     
   507                           ;MyLcd16.c: 56:         num_div /= 10;
   508  007E40  C02F  F021         	movff	lcd_number@num_div,___awdiv@dividend
   509  007E44  C030  F022         	movff	lcd_number@num_div+1,___awdiv@dividend+1
   510  007E48  0E00               	movlw	0
   511  007E4A  6E24               	movwf	(___awdiv@divisor+1)^0,c
   512  007E4C  0E0A               	movlw	10
   513  007E4E  6E23               	movwf	___awdiv@divisor^0,c
   514  007E50  EC5E  F03E         	call	___awdiv	;wreg free
   515  007E54  C021  F02F         	movff	?___awdiv,lcd_number@num_div
   516  007E58  C022  F030         	movff	?___awdiv+1,lcd_number@num_div+1
   517  007E5C                     
   518                           ;MyLcd16.c: 57:     }
   519  007E5C  BE30               	btfsc	(lcd_number@num_div+1)^0,7,c
   520  007E5E  EF3B  F03F         	goto	u300
   521  007E62  5030               	movf	(lcd_number@num_div+1)^0,w,c
   522  007E64  E106               	bnz	u301
   523  007E66  042F               	decf	lcd_number@num_div^0,w,c
   524  007E68  B0D8               	btfsc	status,0,c
   525  007E6A  EF39  F03F         	goto	u301
   526  007E6E  EF3B  F03F         	goto	u300
   527  007E72                     u301:
   528  007E72  EFFE  F03E         	goto	l1049
   529  007E76                     u300:
   530  007E76  0012               	return		;funcret
   531  007E78                     __end_of_lcd_number:
   532                           	callstack 0
   533                           
   534 ;; *************** function _lcd_char *****************
   535 ;; Defined at:
   536 ;;		line 20 in file "MyLcd16.c"
   537 ;; Parameters:    Size  Location     Type
   538 ;;  data            1    wreg     unsigned char 
   539 ;; Auto vars:     Size  Location     Type
   540 ;;  data            1    1[COMRAM] unsigned char 
   541 ;; Return value:  Size  Location     Type
   542 ;;                  1    wreg      void 
   543 ;; Registers used:
   544 ;;		wreg, status,2, status,0
   545 ;; Tracked objects:
   546 ;;		On entry : 0/0
   547 ;;		On exit  : 0/0
   548 ;;		Unchanged: 0/0
   549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   550 ;;      Params:         0       0       0       0       0       0       0
   551 ;;      Locals:         1       0       0       0       0       0       0
   552 ;;      Temps:          1       0       0       0       0       0       0
   553 ;;      Totals:         2       0       0       0       0       0       0
   554 ;;Total ram usage:        2 bytes
   555 ;; Hardware stack levels used: 1
   556 ;; This function calls:
   557 ;;		Nothing
   558 ;; This function is called by:
   559 ;;		_lcd_number
   560 ;;		_lcd_string
   561 ;; This function uses a non-reentrant model
   562 ;;
   563                           
   564                           	psect	text2
   565  007BBA                     __ptext2:
   566                           	callstack 0
   567  007BBA                     _lcd_char:
   568                           	callstack 29
   569                           
   570                           ;incstack = 0
   571                           ;lcd_char@data stored from wreg
   572  007BBA  6E22               	movwf	lcd_char@data^0,c
   573  007BBC                     
   574                           ;MyLcd16.c: 20: void lcd_char(char data);MyLcd16.c: 21: {;MyLcd16.c: 22:     PORTC &= ~(
      +                          1<<6);
   575  007BBC  9C82               	bcf	130,6,c	;volatile
   576                           
   577                           ;MyLcd16.c: 23:  PORTC |= (1<<5);
   578  007BBE  8A82               	bsf	130,5,c	;volatile
   579  007BC0                     
   580                           ;MyLcd16.c: 24:  PORTD = data;
   581  007BC0  C022  FF83         	movff	lcd_char@data,3971	;volatile
   582  007BC4                     
   583                           ;MyLcd16.c: 27:  PORTC |= (1<<7);
   584  007BC4  8E82               	bsf	130,7,c	;volatile
   585  007BC6                     
   586                           ;MyLcd16.c: 28:  _delay((unsigned long)((1)*(20000000/4000.0)));
   587  007BC6  0E07               	movlw	7
   588  007BC8  6E21               	movwf	??_lcd_char^0,c
   589  007BCA  0E7D               	movlw	125
   590  007BCC                     u337:
   591  007BCC  2EE8               	decfsz	wreg,f,c
   592  007BCE  D7FE               	bra	u337
   593  007BD0  2E21               	decfsz	??_lcd_char^0,f,c
   594  007BD2  D7FC               	bra	u337
   595  007BD4  F000               	nop	
   596  007BD6                     
   597                           ;MyLcd16.c: 29:     PORTC &= ~(1<<7);
   598  007BD6  9E82               	bcf	130,7,c	;volatile
   599  007BD8                     
   600                           ;MyLcd16.c: 30:  _delay((unsigned long)((3)*(20000000/4000.0)));
   601  007BD8  0E14               	movlw	20
   602  007BDA  6E21               	movwf	??_lcd_char^0,c
   603  007BDC  0E7A               	movlw	122
   604  007BDE                     u347:
   605  007BDE  2EE8               	decfsz	wreg,f,c
   606  007BE0  D7FE               	bra	u347
   607  007BE2  2E21               	decfsz	??_lcd_char^0,f,c
   608  007BE4  D7FC               	bra	u347
   609  007BE6  0012               	return		;funcret
   610  007BE8                     __end_of_lcd_char:
   611                           	callstack 0
   612                           
   613 ;; *************** function ___wmul *****************
   614 ;; Defined at:
   615 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;  multiplier      2    0[COMRAM] unsigned int 
   618 ;;  multiplicand    2    2[COMRAM] unsigned int 
   619 ;; Auto vars:     Size  Location     Type
   620 ;;  product         2    4[COMRAM] unsigned int 
   621 ;; Return value:  Size  Location     Type
   622 ;;                  2    0[COMRAM] unsigned int 
   623 ;; Registers used:
   624 ;;		wreg, status,2, status,0, prodl, prodh
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   630 ;;      Params:         4       0       0       0       0       0       0
   631 ;;      Locals:         2       0       0       0       0       0       0
   632 ;;      Temps:          0       0       0       0       0       0       0
   633 ;;      Totals:         6       0       0       0       0       0       0
   634 ;;Total ram usage:        6 bytes
   635 ;; Hardware stack levels used: 1
   636 ;; This function calls:
   637 ;;		Nothing
   638 ;; This function is called by:
   639 ;;		_main
   640 ;;		_lcd_number
   641 ;; This function uses a non-reentrant model
   642 ;;
   643                           
   644                           	psect	text3
   645  007B66                     __ptext3:
   646                           	callstack 0
   647  007B66                     ___wmul:
   648                           	callstack 29
   649  007B66  5021               	movf	___wmul@multiplier^0,w,c
   650  007B68  0223               	mulwf	___wmul@multiplicand^0,c
   651  007B6A  CFF3 F025          	movff	prodl,___wmul@product
   652  007B6E  CFF4 F026          	movff	prodh,___wmul@product+1
   653  007B72  5021               	movf	___wmul@multiplier^0,w,c
   654  007B74  0224               	mulwf	(___wmul@multiplicand+1)^0,c
   655  007B76  50F3               	movf	243,w,c
   656  007B78  2626               	addwf	(___wmul@product+1)^0,f,c
   657  007B7A  5022               	movf	(___wmul@multiplier+1)^0,w,c
   658  007B7C  0223               	mulwf	___wmul@multiplicand^0,c
   659  007B7E  50F3               	movf	243,w,c
   660  007B80  2626               	addwf	(___wmul@product+1)^0,f,c
   661  007B82  C025  F021         	movff	___wmul@product,?___wmul
   662  007B86  C026  F022         	movff	___wmul@product+1,?___wmul+1
   663  007B8A  0012               	return		;funcret
   664  007B8C                     __end_of___wmul:
   665                           	callstack 0
   666                           
   667 ;; *************** function ___awdiv *****************
   668 ;; Defined at:
   669 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;  dividend        2    0[COMRAM] int 
   672 ;;  divisor         2    2[COMRAM] int 
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  quotient        2    6[COMRAM] int 
   675 ;;  sign            1    5[COMRAM] unsigned char 
   676 ;;  counter         1    4[COMRAM] unsigned char 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  2    0[COMRAM] int 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   686 ;;      Params:         4       0       0       0       0       0       0
   687 ;;      Locals:         4       0       0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0
   689 ;;      Totals:         8       0       0       0       0       0       0
   690 ;;Total ram usage:        8 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; This function calls:
   693 ;;		Nothing
   694 ;; This function is called by:
   695 ;;		_lcd_number
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699                           	psect	text4
   700  007CBC                     __ptext4:
   701                           	callstack 0
   702  007CBC                     ___awdiv:
   703                           	callstack 29
   704  007CBC  0E00               	movlw	0
   705  007CBE  6E26               	movwf	___awdiv@sign^0,c
   706  007CC0  BE24               	btfsc	(___awdiv@divisor+1)^0,7,c
   707  007CC2  EF67  F03E         	goto	u220
   708  007CC6  EF65  F03E         	goto	u221
   709  007CCA                     u221:
   710  007CCA  EF6D  F03E         	goto	l1001
   711  007CCE                     u220:
   712  007CCE  6C23               	negf	___awdiv@divisor^0,c
   713  007CD0  1E24               	comf	(___awdiv@divisor+1)^0,f,c
   714  007CD2  B0D8               	btfsc	status,0,c
   715  007CD4  2A24               	incf	(___awdiv@divisor+1)^0,f,c
   716  007CD6  0E01               	movlw	1
   717  007CD8  6E26               	movwf	___awdiv@sign^0,c
   718  007CDA                     l1001:
   719  007CDA  BE22               	btfsc	(___awdiv@dividend+1)^0,7,c
   720  007CDC  EF74  F03E         	goto	u230
   721  007CE0  EF72  F03E         	goto	u231
   722  007CE4                     u231:
   723  007CE4  EF7A  F03E         	goto	l1007
   724  007CE8                     u230:
   725  007CE8  6C21               	negf	___awdiv@dividend^0,c
   726  007CEA  1E22               	comf	(___awdiv@dividend+1)^0,f,c
   727  007CEC  B0D8               	btfsc	status,0,c
   728  007CEE  2A22               	incf	(___awdiv@dividend+1)^0,f,c
   729  007CF0  0E01               	movlw	1
   730  007CF2  1A26               	xorwf	___awdiv@sign^0,f,c
   731  007CF4                     l1007:
   732  007CF4  0E00               	movlw	0
   733  007CF6  6E28               	movwf	(___awdiv@quotient+1)^0,c
   734  007CF8  0E00               	movlw	0
   735  007CFA  6E27               	movwf	___awdiv@quotient^0,c
   736  007CFC  5023               	movf	___awdiv@divisor^0,w,c
   737  007CFE  1024               	iorwf	(___awdiv@divisor+1)^0,w,c
   738  007D00  B4D8               	btfsc	status,2,c
   739  007D02  EF85  F03E         	goto	u241
   740  007D06  EF87  F03E         	goto	u240
   741  007D0A                     u241:
   742  007D0A  EFAF  F03E         	goto	l1029
   743  007D0E                     u240:
   744  007D0E  0E01               	movlw	1
   745  007D10  6E25               	movwf	___awdiv@counter^0,c
   746  007D12  EF8F  F03E         	goto	l1015
   747  007D16                     l1013:
   748  007D16  90D8               	bcf	status,0,c
   749  007D18  3623               	rlcf	___awdiv@divisor^0,f,c
   750  007D1A  3624               	rlcf	(___awdiv@divisor+1)^0,f,c
   751  007D1C  2A25               	incf	___awdiv@counter^0,f,c
   752  007D1E                     l1015:
   753  007D1E  AE24               	btfss	(___awdiv@divisor+1)^0,7,c
   754  007D20  EF94  F03E         	goto	u251
   755  007D24  EF96  F03E         	goto	u250
   756  007D28                     u251:
   757  007D28  EF8B  F03E         	goto	l1013
   758  007D2C                     u250:
   759  007D2C                     l1017:
   760  007D2C  90D8               	bcf	status,0,c
   761  007D2E  3627               	rlcf	___awdiv@quotient^0,f,c
   762  007D30  3628               	rlcf	(___awdiv@quotient+1)^0,f,c
   763  007D32  5023               	movf	___awdiv@divisor^0,w,c
   764  007D34  5C21               	subwf	___awdiv@dividend^0,w,c
   765  007D36  5024               	movf	(___awdiv@divisor+1)^0,w,c
   766  007D38  5822               	subwfb	(___awdiv@dividend+1)^0,w,c
   767  007D3A  A0D8               	btfss	status,0,c
   768  007D3C  EFA2  F03E         	goto	u261
   769  007D40  EFA4  F03E         	goto	u260
   770  007D44                     u261:
   771  007D44  EFA9  F03E         	goto	l1025
   772  007D48                     u260:
   773  007D48  5023               	movf	___awdiv@divisor^0,w,c
   774  007D4A  5E21               	subwf	___awdiv@dividend^0,f,c
   775  007D4C  5024               	movf	(___awdiv@divisor+1)^0,w,c
   776  007D4E  5A22               	subwfb	(___awdiv@dividend+1)^0,f,c
   777  007D50  8027               	bsf	___awdiv@quotient^0,0,c
   778  007D52                     l1025:
   779  007D52  90D8               	bcf	status,0,c
   780  007D54  3224               	rrcf	(___awdiv@divisor+1)^0,f,c
   781  007D56  3223               	rrcf	___awdiv@divisor^0,f,c
   782  007D58  2E25               	decfsz	___awdiv@counter^0,f,c
   783  007D5A  EF96  F03E         	goto	l1017
   784  007D5E                     l1029:
   785  007D5E  5026               	movf	___awdiv@sign^0,w,c
   786  007D60  B4D8               	btfsc	status,2,c
   787  007D62  EFB5  F03E         	goto	u271
   788  007D66  EFB7  F03E         	goto	u270
   789  007D6A                     u271:
   790  007D6A  EFBB  F03E         	goto	l1033
   791  007D6E                     u270:
   792  007D6E  6C27               	negf	___awdiv@quotient^0,c
   793  007D70  1E28               	comf	(___awdiv@quotient+1)^0,f,c
   794  007D72  B0D8               	btfsc	status,0,c
   795  007D74  2A28               	incf	(___awdiv@quotient+1)^0,f,c
   796  007D76                     l1033:
   797  007D76  C027  F021         	movff	___awdiv@quotient,?___awdiv
   798  007D7A  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
   799  007D7E  0012               	return		;funcret
   800  007D80                     __end_of___awdiv:
   801                           	callstack 0
   802                           
   803 ;; *************** function _LCD_Configuration *****************
   804 ;; Defined at:
   805 ;;		line 90 in file "newmain.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;		None
   808 ;; Auto vars:     Size  Location     Type
   809 ;;		None
   810 ;; Return value:  Size  Location     Type
   811 ;;                  1    wreg      void 
   812 ;; Registers used:
   813 ;;		wreg, status,2, status,0, cstack
   814 ;; Tracked objects:
   815 ;;		On entry : 0/0
   816 ;;		On exit  : 0/0
   817 ;;		Unchanged: 0/0
   818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   819 ;;      Params:         0       0       0       0       0       0       0
   820 ;;      Locals:         0       0       0       0       0       0       0
   821 ;;      Temps:          0       0       0       0       0       0       0
   822 ;;      Totals:         0       0       0       0       0       0       0
   823 ;;Total ram usage:        0 bytes
   824 ;; Hardware stack levels used: 1
   825 ;; Hardware stack levels required when called: 1
   826 ;; This function calls:
   827 ;;		_lcd_command
   828 ;; This function is called by:
   829 ;;		_main
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833                           	psect	text5
   834  007B42                     __ptext5:
   835                           	callstack 0
   836  007B42                     _LCD_Configuration:
   837                           	callstack 29
   838  007B42                     
   839                           ;newmain.c: 92:     TRISD = 0;
   840  007B42  0E00               	movlw	0
   841  007B44  6E95               	movwf	149,c	;volatile
   842                           
   843                           ;newmain.c: 93:     TRISC = 0;
   844  007B46  0E00               	movlw	0
   845  007B48  6E94               	movwf	148,c	;volatile
   846                           
   847                           ;newmain.c: 94:     PORTC = 0;
   848  007B4A  0E00               	movlw	0
   849  007B4C  6E82               	movwf	130,c	;volatile
   850                           
   851                           ;newmain.c: 95:     PORTD = 0;
   852  007B4E  0E00               	movlw	0
   853  007B50  6E83               	movwf	131,c	;volatile
   854  007B52                     
   855                           ;newmain.c: 96:     lcd_command(0x38);
   856  007B52  0E38               	movlw	56
   857  007B54  ECC6  F03D         	call	_lcd_command
   858  007B58                     
   859                           ;newmain.c: 97:  lcd_command(0x0c);
   860  007B58  0E0C               	movlw	12
   861  007B5A  ECC6  F03D         	call	_lcd_command
   862  007B5E                     
   863                           ;newmain.c: 98:  lcd_command(0x01);
   864  007B5E  0E01               	movlw	1
   865  007B60  ECC6  F03D         	call	_lcd_command
   866  007B64  0012               	return		;funcret
   867  007B66                     __end_of_LCD_Configuration:
   868                           	callstack 0
   869                           
   870 ;; *************** function _lcd_command *****************
   871 ;; Defined at:
   872 ;;		line 6 in file "MyLcd16.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;  cmnd            1    wreg     unsigned char 
   875 ;; Auto vars:     Size  Location     Type
   876 ;;  cmnd            1    1[COMRAM] unsigned char 
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      void 
   879 ;; Registers used:
   880 ;;		wreg, status,2, status,0
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   886 ;;      Params:         0       0       0       0       0       0       0
   887 ;;      Locals:         1       0       0       0       0       0       0
   888 ;;      Temps:          1       0       0       0       0       0       0
   889 ;;      Totals:         2       0       0       0       0       0       0
   890 ;;Total ram usage:        2 bytes
   891 ;; Hardware stack levels used: 1
   892 ;; This function calls:
   893 ;;		Nothing
   894 ;; This function is called by:
   895 ;;		_LCD_Configuration
   896 ;;		_main
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text6
   901  007B8C                     __ptext6:
   902                           	callstack 0
   903  007B8C                     _lcd_command:
   904                           	callstack 30
   905                           
   906                           ;incstack = 0
   907                           ;lcd_command@cmnd stored from wreg
   908  007B8C  6E22               	movwf	lcd_command@cmnd^0,c
   909  007B8E                     
   910                           ;MyLcd16.c: 6: void lcd_command(char cmnd);MyLcd16.c: 7: {;MyLcd16.c: 8:  PORTC &= ~(1<<
      +                          6);
   911  007B8E  9C82               	bcf	130,6,c	;volatile
   912                           
   913                           ;MyLcd16.c: 9:  PORTC &= ~(1<<5);
   914  007B90  9A82               	bcf	130,5,c	;volatile
   915  007B92                     
   916                           ;MyLcd16.c: 11:  PORTD = cmnd;
   917  007B92  C022  FF83         	movff	lcd_command@cmnd,3971	;volatile
   918  007B96                     
   919                           ;MyLcd16.c: 14:  PORTC |= (1<<7);
   920  007B96  8E82               	bsf	130,7,c	;volatile
   921  007B98                     
   922                           ;MyLcd16.c: 15:  _delay((unsigned long)((1)*(20000000/4000.0)));
   923  007B98  0E07               	movlw	7
   924  007B9A  6E21               	movwf	??_lcd_command^0,c
   925  007B9C  0E7D               	movlw	125
   926  007B9E                     u357:
   927  007B9E  2EE8               	decfsz	wreg,f,c
   928  007BA0  D7FE               	bra	u357
   929  007BA2  2E21               	decfsz	??_lcd_command^0,f,c
   930  007BA4  D7FC               	bra	u357
   931  007BA6  F000               	nop	
   932  007BA8                     
   933                           ;MyLcd16.c: 16:     PORTC &= ~(1<<7);
   934  007BA8  9E82               	bcf	130,7,c	;volatile
   935  007BAA                     
   936                           ;MyLcd16.c: 17:  _delay((unsigned long)((3)*(20000000/4000.0)));
   937  007BAA  0E14               	movlw	20
   938  007BAC  6E21               	movwf	??_lcd_command^0,c
   939  007BAE  0E7A               	movlw	122
   940  007BB0                     u367:
   941  007BB0  2EE8               	decfsz	wreg,f,c
   942  007BB2  D7FE               	bra	u367
   943  007BB4  2E21               	decfsz	??_lcd_command^0,f,c
   944  007BB6  D7FC               	bra	u367
   945  007BB8  0012               	return		;funcret
   946  007BBA                     __end_of_lcd_command:
   947                           	callstack 0
   948                           
   949 ;; *************** function _Keyfind *****************
   950 ;; Defined at:
   951 ;;		line 104 in file "newmain.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;		None
   954 ;; Auto vars:     Size  Location     Type
   955 ;;		None
   956 ;; Return value:  Size  Location     Type
   957 ;;                  1    wreg      unsigned char 
   958 ;; Registers used:
   959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   965 ;;      Params:         0       0       0       0       0       0       0
   966 ;;      Locals:         0       0       0       0       0       0       0
   967 ;;      Temps:          1       0       0       0       0       0       0
   968 ;;      Totals:         1       0       0       0       0       0       0
   969 ;;Total ram usage:        1 bytes
   970 ;; Hardware stack levels used: 1
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_main
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text7
   979  007E78                     __ptext7:
   980                           	callstack 0
   981  007E78                     _Keyfind:
   982                           	callstack 30
   983  007E78                     l34:
   984  007E78                     
   985                           ;newmain.c: 107:     {;newmain.c: 108:         TRISB = 0X0f;
   986  007E78  0E0F               	movlw	15
   987  007E7A  6E93               	movwf	147,c	;volatile
   988  007E7C                     
   989                           ;newmain.c: 109:         PORTB = 0XFF;
   990  007E7C  6881               	setf	129,c	;volatile
   991  007E7E                     l35:
   992                           
   993                           ;newmain.c: 112:         {;newmain.c: 113:             PORTB = 0X0F;
   994  007E7E  0E0F               	movlw	15
   995  007E80  6E81               	movwf	129,c	;volatile
   996  007E82                     
   997                           ;newmain.c: 114:             colloc = (PORTB & 0x0f);
   998  007E82  5081               	movf	129,w,c	;volatile
   999  007E84  0B0F               	andlw	15
  1000  007E86  6E3A               	movwf	_colloc^0,c
  1001  007E88                     
  1002                           ;newmain.c: 115:         }while (PORTB == 0x0f);
  1003  007E88  0E0F               	movlw	15
  1004  007E8A  1881               	xorwf	129,w,c	;volatile
  1005  007E8C  B4D8               	btfsc	status,2,c
  1006  007E8E  EF4B  F03F         	goto	u71
  1007  007E92  EF4D  F03F         	goto	u70
  1008  007E96                     u71:
  1009  007E96  EF3F  F03F         	goto	l35
  1010  007E9A                     u70:
  1011  007E9A                     l869:
  1012                           
  1013                           ;newmain.c: 121:             {;newmain.c: 122:             _delay((unsigned long)((20)*(
      +                          8000000/4000.0)));
  1014  007E9A  0E34               	movlw	52
  1015  007E9C  6E21               	movwf	??_Keyfind^0,c
  1016  007E9E  0EF2               	movlw	242
  1017  007EA0                     u377:
  1018  007EA0  2EE8               	decfsz	wreg,f,c
  1019  007EA2  D7FE               	bra	u377
  1020  007EA4  2E21               	decfsz	??_Keyfind^0,f,c
  1021  007EA6  D7FC               	bra	u377
  1022  007EA8                     
  1023                           ;newmain.c: 123:             colloc = PORTB & 0x0f;
  1024  007EA8  5081               	movf	129,w,c	;volatile
  1025  007EAA  0B0F               	andlw	15
  1026  007EAC  6E3A               	movwf	_colloc^0,c
  1027  007EAE                     
  1028                           ;newmain.c: 124:             }while(colloc == 0x0f);
  1029  007EAE  0E0F               	movlw	15
  1030  007EB0  183A               	xorwf	_colloc^0,w,c
  1031  007EB2  B4D8               	btfsc	status,2,c
  1032  007EB4  EF5E  F03F         	goto	u81
  1033  007EB8  EF60  F03F         	goto	u80
  1034  007EBC                     u81:
  1035  007EBC  EF4D  F03F         	goto	l869
  1036  007EC0                     u80:
  1037  007EC0                     
  1038                           ;newmain.c: 125:         _delay((unsigned long)((40)*(8000000/4000.0)));
  1039  007EC0  0E68               	movlw	104
  1040  007EC2  6E21               	movwf	??_Keyfind^0,c
  1041  007EC4  0EE4               	movlw	228
  1042  007EC6                     u387:
  1043  007EC6  2EE8               	decfsz	wreg,f,c
  1044  007EC8  D7FE               	bra	u387
  1045  007ECA  2E21               	decfsz	??_Keyfind^0,f,c
  1046  007ECC  D7FC               	bra	u387
  1047  007ECE  D000               	nop2	
  1048  007ED0                     
  1049                           ;newmain.c: 126:         colloc = (PORTB & 0x0f);
  1050  007ED0  5081               	movf	129,w,c	;volatile
  1051  007ED2  0B0F               	andlw	15
  1052  007ED4  6E3A               	movwf	_colloc^0,c
  1053  007ED6                     
  1054                           ;newmain.c: 127:         }while(colloc == 0x0f);
  1055  007ED6  0E0F               	movlw	15
  1056  007ED8  183A               	xorwf	_colloc^0,w,c
  1057  007EDA  B4D8               	btfsc	status,2,c
  1058  007EDC  EF72  F03F         	goto	u91
  1059  007EE0  EF74  F03F         	goto	u90
  1060  007EE4                     u91:
  1061  007EE4  EF4D  F03F         	goto	l869
  1062  007EE8                     u90:
  1063  007EE8                     
  1064                           ;newmain.c: 130:         PORTB = 0xef;
  1065  007EE8  0EEF               	movlw	239
  1066  007EEA  6E81               	movwf	129,c	;volatile
  1067  007EEC                     
  1068                           ;newmain.c: 131:         colloc = PORTB & 0x0f;
  1069  007EEC  5081               	movf	129,w,c	;volatile
  1070  007EEE  0B0F               	andlw	15
  1071  007EF0  6E3A               	movwf	_colloc^0,c
  1072  007EF2                     
  1073                           ;newmain.c: 132:         if(colloc != 0x0f)
  1074  007EF2  0E0F               	movlw	15
  1075  007EF4  183A               	xorwf	_colloc^0,w,c
  1076  007EF6  B4D8               	btfsc	status,2,c
  1077  007EF8  EF80  F03F         	goto	u101
  1078  007EFC  EF82  F03F         	goto	u100
  1079  007F00                     u101:
  1080  007F00  EF86  F03F         	goto	l889
  1081  007F04                     u100:
  1082  007F04                     
  1083                           ;newmain.c: 133:         {;newmain.c: 134:             rowloc = 0;
  1084  007F04  0E00               	movlw	0
  1085  007F06  6E39               	movwf	_rowloc^0,c
  1086                           
  1087                           ;newmain.c: 135:             break;
  1088  007F08  EFBA  F03F         	goto	l913
  1089  007F0C                     l889:
  1090                           
  1091                           ;newmain.c: 139:         PORTB = 0xdf;
  1092  007F0C  0EDF               	movlw	223
  1093  007F0E  6E81               	movwf	129,c	;volatile
  1094  007F10                     
  1095                           ;newmain.c: 140:         colloc = PORTB & 0x0f;
  1096  007F10  5081               	movf	129,w,c	;volatile
  1097  007F12  0B0F               	andlw	15
  1098  007F14  6E3A               	movwf	_colloc^0,c
  1099  007F16                     
  1100                           ;newmain.c: 141:         if(colloc != 0x0f)
  1101  007F16  0E0F               	movlw	15
  1102  007F18  183A               	xorwf	_colloc^0,w,c
  1103  007F1A  B4D8               	btfsc	status,2,c
  1104  007F1C  EF92  F03F         	goto	u111
  1105  007F20  EF94  F03F         	goto	u110
  1106  007F24                     u111:
  1107  007F24  EF98  F03F         	goto	l897
  1108  007F28                     u110:
  1109  007F28                     
  1110                           ;newmain.c: 142:         {;newmain.c: 143:             rowloc = 1;
  1111  007F28  0E01               	movlw	1
  1112  007F2A  6E39               	movwf	_rowloc^0,c
  1113                           
  1114                           ;newmain.c: 144:             break;
  1115  007F2C  EFBA  F03F         	goto	l913
  1116  007F30                     l897:
  1117                           
  1118                           ;newmain.c: 147:         PORTB = 0xbf;
  1119  007F30  0EBF               	movlw	191
  1120  007F32  6E81               	movwf	129,c	;volatile
  1121  007F34                     
  1122                           ;newmain.c: 148:         colloc = PORTB & 0x0f;
  1123  007F34  5081               	movf	129,w,c	;volatile
  1124  007F36  0B0F               	andlw	15
  1125  007F38  6E3A               	movwf	_colloc^0,c
  1126  007F3A                     
  1127                           ;newmain.c: 149:         if(colloc != 0x0f)
  1128  007F3A  0E0F               	movlw	15
  1129  007F3C  183A               	xorwf	_colloc^0,w,c
  1130  007F3E  B4D8               	btfsc	status,2,c
  1131  007F40  EFA4  F03F         	goto	u121
  1132  007F44  EFA6  F03F         	goto	u120
  1133  007F48                     u121:
  1134  007F48  EFAA  F03F         	goto	l905
  1135  007F4C                     u120:
  1136  007F4C                     
  1137                           ;newmain.c: 150:         {;newmain.c: 151:             rowloc = 2;
  1138  007F4C  0E02               	movlw	2
  1139  007F4E  6E39               	movwf	_rowloc^0,c
  1140                           
  1141                           ;newmain.c: 152:             break;
  1142  007F50  EFBA  F03F         	goto	l913
  1143  007F54                     l905:
  1144                           
  1145                           ;newmain.c: 155:         PORTB = 0xef;
  1146  007F54  0EEF               	movlw	239
  1147  007F56  6E81               	movwf	129,c	;volatile
  1148  007F58                     
  1149                           ;newmain.c: 156:         colloc = PORTB & 0x0f;
  1150  007F58  5081               	movf	129,w,c	;volatile
  1151  007F5A  0B0F               	andlw	15
  1152  007F5C  6E3A               	movwf	_colloc^0,c
  1153  007F5E                     
  1154                           ;newmain.c: 157:         if(colloc != 0x0f)
  1155  007F5E  0E0F               	movlw	15
  1156  007F60  183A               	xorwf	_colloc^0,w,c
  1157  007F62  B4D8               	btfsc	status,2,c
  1158  007F64  EFB6  F03F         	goto	u131
  1159  007F68  EFB8  F03F         	goto	u130
  1160  007F6C                     u131:
  1161  007F6C  EF3C  F03F         	goto	l34
  1162  007F70                     u130:
  1163  007F70                     
  1164                           ;newmain.c: 158:         {;newmain.c: 159:             rowloc = 3;
  1165  007F70  0E03               	movlw	3
  1166  007F72  6E39               	movwf	_rowloc^0,c
  1167  007F74                     l913:
  1168                           
  1169                           ;newmain.c: 183:     if(colloc == 0x0e)
  1170  007F74  0E0E               	movlw	14
  1171  007F76  183A               	xorwf	_colloc^0,w,c
  1172  007F78  A4D8               	btfss	status,2,c
  1173  007F7A  EFC1  F03F         	goto	u141
  1174  007F7E  EFC3  F03F         	goto	u140
  1175  007F82                     u141:
  1176  007F82  EFCE  F03F         	goto	l921
  1177  007F86                     u140:
  1178  007F86                     
  1179                           ;newmain.c: 184:     {;newmain.c: 185:         return(keypadNum[rowloc][3]);
  1180  007F86  5039               	movf	_rowloc^0,w,c
  1181  007F88  0D04               	mullw	4
  1182  007F8A  0E04               	movlw	low (_keypadNum+3)
  1183  007F8C  24F3               	addwf	243,w,c
  1184  007F8E  6ED9               	movwf	fsr2l,c
  1185  007F90  0E00               	movlw	high (_keypadNum+3)
  1186  007F92  20F4               	addwfc	prodh,w,c
  1187  007F94  6EDA               	movwf	fsr2h,c
  1188  007F96  50DF               	movf	indf2,w,c
  1189  007F98  EFFF  F03F         	goto	l48
  1190  007F9C                     l921:
  1191  007F9C  0E0D               	movlw	13
  1192  007F9E  183A               	xorwf	_colloc^0,w,c
  1193  007FA0  A4D8               	btfss	status,2,c
  1194  007FA2  EFD5  F03F         	goto	u151
  1195  007FA6  EFD7  F03F         	goto	u150
  1196  007FAA                     u151:
  1197  007FAA  EFE2  F03F         	goto	l929
  1198  007FAE                     u150:
  1199  007FAE                     
  1200                           ;newmain.c: 188:     {;newmain.c: 189:         return(keypadNum[rowloc][2]);
  1201  007FAE  5039               	movf	_rowloc^0,w,c
  1202  007FB0  0D04               	mullw	4
  1203  007FB2  0E03               	movlw	low (_keypadNum+2)
  1204  007FB4  24F3               	addwf	243,w,c
  1205  007FB6  6ED9               	movwf	fsr2l,c
  1206  007FB8  0E00               	movlw	high (_keypadNum+2)
  1207  007FBA  20F4               	addwfc	prodh,w,c
  1208  007FBC  6EDA               	movwf	fsr2h,c
  1209  007FBE  50DF               	movf	indf2,w,c
  1210  007FC0  EFFF  F03F         	goto	l48
  1211  007FC4                     l929:
  1212  007FC4  0E0B               	movlw	11
  1213  007FC6  183A               	xorwf	_colloc^0,w,c
  1214  007FC8  A4D8               	btfss	status,2,c
  1215  007FCA  EFE9  F03F         	goto	u161
  1216  007FCE  EFEB  F03F         	goto	u160
  1217  007FD2                     u161:
  1218  007FD2  EFF6  F03F         	goto	l937
  1219  007FD6                     u160:
  1220  007FD6                     
  1221                           ;newmain.c: 192:     {;newmain.c: 193:         return(keypadNum[rowloc][1]);
  1222  007FD6  5039               	movf	_rowloc^0,w,c
  1223  007FD8  0D04               	mullw	4
  1224  007FDA  0E02               	movlw	low (_keypadNum+1)
  1225  007FDC  24F3               	addwf	243,w,c
  1226  007FDE  6ED9               	movwf	fsr2l,c
  1227  007FE0  0E00               	movlw	high (_keypadNum+1)
  1228  007FE2  20F4               	addwfc	prodh,w,c
  1229  007FE4  6EDA               	movwf	fsr2h,c
  1230  007FE6  50DF               	movf	indf2,w,c
  1231  007FE8  EFFF  F03F         	goto	l48
  1232  007FEC                     l937:
  1233                           
  1234                           ;newmain.c: 196:     {;newmain.c: 197:         return(keypadNum[rowloc][0]);
  1235  007FEC  5039               	movf	_rowloc^0,w,c
  1236  007FEE  0D04               	mullw	4
  1237  007FF0  0E01               	movlw	low _keypadNum
  1238  007FF2  24F3               	addwf	243,w,c
  1239  007FF4  6ED9               	movwf	fsr2l,c
  1240  007FF6  0E00               	movlw	high _keypadNum
  1241  007FF8  20F4               	addwfc	prodh,w,c
  1242  007FFA  6EDA               	movwf	fsr2h,c
  1243  007FFC  50DF               	movf	indf2,w,c
  1244  007FFE                     l48:
  1245  007FFE  0012               	return		;funcret
  1246  008000                     __end_of_Keyfind:
  1247                           	callstack 0
  1248  0000                     
  1249                           	psect	rparam
  1250  0000                     
  1251                           	psect	idloc
  1252                           
  1253                           ;Config register IDLOC0 @ 0x200000
  1254                           ;	unspecified, using default values
  1255  200000                     	org	2097152
  1256  200000  FF                 	db	255
  1257                           
  1258                           ;Config register IDLOC1 @ 0x200001
  1259                           ;	unspecified, using default values
  1260  200001                     	org	2097153
  1261  200001  FF                 	db	255
  1262                           
  1263                           ;Config register IDLOC2 @ 0x200002
  1264                           ;	unspecified, using default values
  1265  200002                     	org	2097154
  1266  200002  FF                 	db	255
  1267                           
  1268                           ;Config register IDLOC3 @ 0x200003
  1269                           ;	unspecified, using default values
  1270  200003                     	org	2097155
  1271  200003  FF                 	db	255
  1272                           
  1273                           ;Config register IDLOC4 @ 0x200004
  1274                           ;	unspecified, using default values
  1275  200004                     	org	2097156
  1276  200004  FF                 	db	255
  1277                           
  1278                           ;Config register IDLOC5 @ 0x200005
  1279                           ;	unspecified, using default values
  1280  200005                     	org	2097157
  1281  200005  FF                 	db	255
  1282                           
  1283                           ;Config register IDLOC6 @ 0x200006
  1284                           ;	unspecified, using default values
  1285  200006                     	org	2097158
  1286  200006  FF                 	db	255
  1287                           
  1288                           ;Config register IDLOC7 @ 0x200007
  1289                           ;	unspecified, using default values
  1290  200007                     	org	2097159
  1291  200007  FF                 	db	255
  1292                           
  1293                           	psect	config
  1294                           
  1295                           ; Padding undefined space
  1296  300000                     	org	3145728
  1297  300000  FF                 	db	255
  1298                           
  1299                           ;Config register CONFIG1H @ 0x300001
  1300                           ;	Oscillator Selection bits
  1301                           ;	OSC = RCIO6, External RC oscillator, port function on RA6
  1302                           ;	Fail-Safe Clock Monitor Enable bit
  1303                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1304                           ;	Internal/External Oscillator Switchover bit
  1305                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1306  300001                     	org	3145729
  1307  300001  07                 	db	7
  1308                           
  1309                           ;Config register CONFIG2L @ 0x300002
  1310                           ;	Power-up Timer Enable bit
  1311                           ;	PWRT = OFF, PWRT disabled
  1312                           ;	Brown-out Reset Enable bits
  1313                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1314                           ;	Brown Out Reset Voltage bits
  1315                           ;	BORV = 3, Minimum setting
  1316  300002                     	org	3145730
  1317  300002  1F                 	db	31
  1318                           
  1319                           ;Config register CONFIG2H @ 0x300003
  1320                           ;	Watchdog Timer Enable bit
  1321                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1322                           ;	Watchdog Timer Postscale Select bits
  1323                           ;	WDTPS = 32768, 1:32768
  1324  300003                     	org	3145731
  1325  300003  1E                 	db	30
  1326                           
  1327                           ; Padding undefined space
  1328  300004                     	org	3145732
  1329  300004  FF                 	db	255
  1330                           
  1331                           ;Config register CONFIG3H @ 0x300005
  1332                           ;	CCP2 MUX bit
  1333                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1334                           ;	PORTB A/D Enable bit
  1335                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1336                           ;	Low-Power Timer1 Oscillator Enable bit
  1337                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1338                           ;	MCLR Pin Enable bit
  1339                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  1340  300005                     	org	3145733
  1341  300005  01                 	db	1
  1342                           
  1343                           ;Config register CONFIG4L @ 0x300006
  1344                           ;	Stack Full/Underflow Reset Enable bit
  1345                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1346                           ;	Single-Supply ICSP Enable bit
  1347                           ;	LVP = OFF, Single-Supply ICSP disabled
  1348                           ;	Extended Instruction Set Enable bit
  1349                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1350                           ;	Background Debugger Enable bit
  1351                           ;	DEBUG = 0x1, unprogrammed default
  1352  300006                     	org	3145734
  1353  300006  80                 	db	128
  1354                           
  1355                           ; Padding undefined space
  1356  300007                     	org	3145735
  1357  300007  FF                 	db	255
  1358                           
  1359                           ;Config register CONFIG5L @ 0x300008
  1360                           ;	Code Protection bit
  1361                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1362                           ;	Code Protection bit
  1363                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1364                           ;	Code Protection bit
  1365                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1366                           ;	Code Protection bit
  1367                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1368  300008                     	org	3145736
  1369  300008  0F                 	db	15
  1370                           
  1371                           ;Config register CONFIG5H @ 0x300009
  1372                           ;	Boot Block Code Protection bit
  1373                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1374                           ;	Data EEPROM Code Protection bit
  1375                           ;	CPD = OFF, Data EEPROM not code-protected
  1376  300009                     	org	3145737
  1377  300009  C0                 	db	192
  1378                           
  1379                           ;Config register CONFIG6L @ 0x30000A
  1380                           ;	Write Protection bit
  1381                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1382                           ;	Write Protection bit
  1383                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1384                           ;	Write Protection bit
  1385                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1386                           ;	Write Protection bit
  1387                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1388  30000A                     	org	3145738
  1389  30000A  0F                 	db	15
  1390                           
  1391                           ;Config register CONFIG6H @ 0x30000B
  1392                           ;	Configuration Register Write Protection bit
  1393                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1394                           ;	Boot Block Write Protection bit
  1395                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1396                           ;	Data EEPROM Write Protection bit
  1397                           ;	WRTD = OFF, Data EEPROM not write-protected
  1398  30000B                     	org	3145739
  1399  30000B  E0                 	db	224
  1400                           
  1401                           ;Config register CONFIG7L @ 0x30000C
  1402                           ;	Table Read Protection bit
  1403                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1404                           ;	Table Read Protection bit
  1405                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1406                           ;	Table Read Protection bit
  1407                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1408                           ;	Table Read Protection bit
  1409                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1410  30000C                     	org	3145740
  1411  30000C  0F                 	db	15
  1412                           
  1413                           ;Config register CONFIG7H @ 0x30000D
  1414                           ;	Boot Block Table Read Protection bit
  1415                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1416  30000D                     	org	3145741
  1417  30000D  40                 	db	64
  1418                           tosu	equ	0xFFF
  1419                           tosh	equ	0xFFE
  1420                           tosl	equ	0xFFD
  1421                           stkptr	equ	0xFFC
  1422                           pclatu	equ	0xFFB
  1423                           pclath	equ	0xFFA
  1424                           pcl	equ	0xFF9
  1425                           tblptru	equ	0xFF8
  1426                           tblptrh	equ	0xFF7
  1427                           tblptrl	equ	0xFF6
  1428                           tablat	equ	0xFF5
  1429                           prodh	equ	0xFF4
  1430                           prodl	equ	0xFF3
  1431                           indf0	equ	0xFEF
  1432                           postinc0	equ	0xFEE
  1433                           postdec0	equ	0xFED
  1434                           preinc0	equ	0xFEC
  1435                           plusw0	equ	0xFEB
  1436                           fsr0h	equ	0xFEA
  1437                           fsr0l	equ	0xFE9
  1438                           wreg	equ	0xFE8
  1439                           indf1	equ	0xFE7
  1440                           postinc1	equ	0xFE6
  1441                           postdec1	equ	0xFE5
  1442                           preinc1	equ	0xFE4
  1443                           plusw1	equ	0xFE3
  1444                           fsr1h	equ	0xFE2
  1445                           fsr1l	equ	0xFE1
  1446                           bsr	equ	0xFE0
  1447                           indf2	equ	0xFDF
  1448                           postinc2	equ	0xFDE
  1449                           postdec2	equ	0xFDD
  1450                           preinc2	equ	0xFDC
  1451                           plusw2	equ	0xFDB
  1452                           fsr2h	equ	0xFDA
  1453                           fsr2l	equ	0xFD9
  1454                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        32
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     18      58
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_lcd_number
    _lcd_number->___awdiv
    _LCD_Configuration->_lcd_command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2325
                                             16 COMRAM     2     2      0
                            _Keyfind
                  _LCD_Configuration
                             ___wmul
                        _lcd_command
                         _lcd_number
 ---------------------------------------------------------------------------------
 (1) _lcd_number                                           8     6      2    1832
                                              8 COMRAM     8     6      2
                            ___awdiv
                             ___wmul
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCD_Configuration                                    0     0      0      15
                        _lcd_command
 ---------------------------------------------------------------------------------
 (1) _lcd_command                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Keyfind                                              1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Keyfind
   _LCD_Configuration
     _lcd_command
   ___wmul
   _lcd_command
   _lcd_number
     ___awdiv
     ___wmul
     _lcd_char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     12      3A       1       45.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3A      15        0.0%
DATA                 0      0      3A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Oct 10 23:34:08 2021

              lcd_char@data 0022                          l34 7E78                          l35 7E7E  
                        l29 7B64                          l63 7C76                          l48 7FFE  
                        l81 7BE6                          l91 7DC2                          l78 7BB8  
                        l97 7E76                          u70 7E9A                          u71 7E96  
                        u80 7EC0                          u81 7EBC                          u90 7EE8  
                        u91 7EE4                ___awdiv@sign 0026         ___wmul@multiplicand 0023  
                       l100 7B8A                         l331 7D7E                         l801 7BD8  
                       l901 7F3A                         l911 7F70                         l903 7F4C  
                       l921 7F9C                         l905 7F54                         l913 7F74  
                       l931 7FD6                         l923 7FAE                         l915 7F86  
                       l907 7F58                         l909 7F5E                         l861 7E78  
                       l781 7B92                         l853 7B42                         l871 7EA8  
                       l863 7E7C                         l783 7B96                         l855 7B52  
                       l791 7BBC                         l937 7FEC                         l929 7FC4  
                       l881 7EE8                         l873 7EAE                         l865 7E82  
                       l785 7B98                         l857 7B58                         l793 7BC0  
                       l891 7F10                         l883 7EEC                         l875 7EC0  
                       l867 7E88                         l787 7BA8                         l779 7B8E  
                       l859 7B5E                         l795 7BC4                         l893 7F16  
                       l885 7EF2                         l877 7ED0                         l869 7E9A  
                       l789 7BAA                         l797 7BC6                         l895 7F28  
                       l887 7F04                         l879 7ED6                         l799 7BD6  
                       l897 7F30                         l889 7F0C                         l993 7CBC  
                       l899 7F34                         l995 7CC0                         l987 7B66  
                       l997 7CCE                         l989 7B82                         l999 7CD6  
                       u100 7F04                         u101 7F00                         u110 7F28  
                       u111 7F24                         u120 7F4C                         u121 7F48  
                       u130 7F70                         u131 7F6C                         u140 7F86  
                       u220 7CCE                         u300 7E76                         u141 7F82  
                       u221 7CCA                         u301 7E72                         u150 7FAE  
                       u230 7CE8                         u310 7C46                         u151 7FAA  
                       u231 7CE4                         u311 7C42                         u160 7FD6  
                       u240 7D0E                         u161 7FD2                         u241 7D0A  
                       u250 7D2C                         u251 7D28                         u260 7D48  
                       u261 7D44                         u270 7D6E                         u271 7D6A  
                       u327 7CA6                         u280 7DA2                         u337 7BCC  
                       u281 7D9E                         u290 7DF0                         u347 7BDE  
                       u291 7DEC                         u357 7B9E                         u367 7BB0  
                       u377 7EA0                         u387 7EC6                         _dem 0037  
                       prod 000FF3                         wreg 000FE8           lcd_number@num_div 002F  
                      l1001 7CDA                        l1011 7D0E                        l1003 7CE8  
                      l1021 7D48                        l1013 7D16                        l1005 7CF0  
                      l1031 7D6E                        l1023 7D50                        l1015 7D1E  
                      l1007 7CF4                        l1033 7D76                        l1025 7D52  
                      l1017 7D2C                        l1009 7CFC                        l1041 7D90  
                      l1027 7D58                        l1019 7D32                        l1051 7E18  
                      l1029 7D5E                        l1053 7E20                        l1045 7DA6  
                      l1037 7D80                        l1061 7C1E                        l1055 7E40  
                      l1047 7DF4                        l1039 7D88                        l1071 7C8C  
                      l1063 7C2A                        l1057 7E5C                        l1049 7DFC  
                      l1073 7C9C                        l1065 7C46                        l1067 7C7E  
                      l1059 7C1A                        l1069 7C86                        _main 7C1A  
                      indf2 000FDF                        fsr1l 000FE1                        fsr2l 000FD9  
                      prodh 000FF4                        prodl 000FF3                        start 0000  
        lcd_number@num_test 002D                ___param_bank 000000             __end_of_Keyfind 8000  
                     ?_main 0021             __end_of___awdiv 7D80             ___awdiv@divisor 0023  
           ___awdiv@counter 0025                       _PORTB 000F81                       _PORTC 000F82  
                     _PORTD 000F83                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       tablat 000FF5                       status 000FD8  
           __initialization 7BE8                __end_of_main 7CBC                      ??_main 0031  
             __activetblptr 000000            ___awdiv@dividend 0021               lcd_number@num 0029  
                 ??_Keyfind 0021            __end_of_lcd_char 7BE8        __size_of_lcd_command 002E  
                    ___wmul 7B66                   ??___awdiv 0025                      _colloc 003A  
                    _keypad 0011                      clear_0 7C0E            ___awdiv@quotient 0027  
                    isa$std 000001                      _rowloc 0039                __pdataCOMRAM 0001  
                    tblptrh 000FF7                      tblptrl 000FF6                      tblptru 000FF8  
                __accesstop 0080     __end_of__initialization 7C14               ___rparam_used 000001  
            __pcstackCOMRAM 0021             lcd_command@cmnd 0022                     ?___wmul 0021  
                _lcd_number 7D80                   ?_lcd_char 0021                     _Keyfind 7E78  
                   __Hparam 0000                     __Lparam 0000                     ___awdiv 7CBC  
           __size_of___wmul 0026                     __pcinit 7BE8                     __ramtop 0600  
                   __ptext0 7C1A                     __ptext1 7D80                     __ptext2 7BBA  
                   __ptext3 7B66                     __ptext4 7CBC                     __ptext5 7B42  
                   __ptext6 7B8C                     __ptext7 7E78                  ??_lcd_char 0021  
      end_of_initialization 7C14                     postdec1 000FE5                     postinc0 000FEE  
               ?_lcd_number 0029       lcd_number@num_display 002B               ??_lcd_command 0021  
            __end_of___wmul 7B8C               __pidataCOMRAM 7B22         start_initialization 7BE8  
                  ??___wmul 0025         __size_of_lcd_number 00F8         __end_of_lcd_command 7BBA  
               __pbssCOMRAM 0033           __size_of_lcd_char 002E                _InputNumTemp 0033  
                  ?_Keyfind 0021           _LCD_Configuration 7B42                    ?___awdiv 0021  
        ?_LCD_Configuration 0021         ??_LCD_Configuration 0023                   _keypadNum 0001  
            ___wmul@product 0025                 _lcd_command 7B8C   __end_of_LCD_Configuration 7B66  
         ___wmul@multiplier 0021                ??_lcd_number 002B                   copy_data0 7BFC  
                  _InputNum 0035                    __Hrparam 0000            __size_of_Keyfind 0188  
                  __Lrparam 0000          __end_of_lcd_number 7E78            __size_of___awdiv 00C4  
                  _lcd_char 7BBA               __size_of_main 00A2  __size_of_LCD_Configuration 0024  
                  isa$xinst 000000                ?_lcd_command 0021  
