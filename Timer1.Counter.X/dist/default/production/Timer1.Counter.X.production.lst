

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Apr 01 16:44:15 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 12/02/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4520 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _T1CON	set	4045
    57  0000                     _TMR1L	set	4046
    58  0000                     _TMR1H	set	4047
    59  0000                     _PORTD	set	3971
    60  0000                     _PORTC	set	3970
    61  0000                     _TRISD	set	3989
    62  0000                     _TRISC	set	3988
    63                           
    64                           	psect	smallconst
    65  000600                     __psmallconst:
    66                           	callstack 0
    67  000600  00                 	db	0
    68  000601                     STR_1:
    69  000601  20                 	db	32
    70  000602  63                 	db	99	;'c'
    71  000603  68                 	db	104	;'h'
    72  000604  75                 	db	117	;'u'
    73  000605  63                 	db	99	;'c'
    74  000606  20                 	db	32
    75  000607  33                 	db	51	;'3'
    76  000608  20                 	db	32
    77  000609  6D                 	db	109	;'m'
    78  00060A  75                 	db	117	;'u'
    79  00060B  6E                 	db	110	;'n'
    80  00060C  67                 	db	103	;'g'
    81  00060D  00                 	db	0
    82  00060E  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           ; #config settings
    85                           
    86                           	psect	cinit
    87  00097A                     __pcinit:
    88                           	callstack 0
    89  00097A                     start_initialization:
    90                           	callstack 0
    91  00097A                     __initialization:
    92                           	callstack 0
    93  00097A                     end_of_initialization:
    94                           	callstack 0
    95  00097A                     __end_of__initialization:
    96                           	callstack 0
    97  00097A  0E00               	movlw	low (__Lsmallconst shr (0+16))
    98  00097C  6EF8               	movwf	tblptru,c
    99  00097E  0E06               	movlw	high __Lsmallconst
   100  000980  6EF7               	movwf	tblptrh,c
   101  000982  0100               	movlb	0
   102  000984  EFE6  F003         	goto	_main	;jump to C main() function
   103                           
   104                           	psect	cstackCOMRAM
   105  000001                     __pcstackCOMRAM:
   106                           	callstack 0
   107  000001                     ??_lcd_command:
   108  000001                     ??_lcd_char:
   109  000001                     ?_strlen:
   110                           	callstack 0
   111  000001                     ?___wmul:
   112                           	callstack 0
   113  000001                     ?___awdiv:
   114                           	callstack 0
   115  000001                     ___wmul@multiplier:
   116                           	callstack 0
   117  000001                     ___awdiv@dividend:
   118                           	callstack 0
   119  000001                     strlen@s:
   120                           	callstack 0
   121                           
   122                           ; 2 bytes @ 0x0
   123  000001                     	ds	1
   124  000002                     lcd_command@cmnd:
   125                           	callstack 0
   126  000002                     lcd_char@data:
   127                           	callstack 0
   128                           
   129                           ; 1 bytes @ 0x1
   130  000002                     	ds	1
   131  000003                     ___wmul@multiplicand:
   132                           	callstack 0
   133  000003                     ___awdiv@divisor:
   134                           	callstack 0
   135  000003                     strlen@a:
   136                           	callstack 0
   137                           
   138                           ; 2 bytes @ 0x2
   139  000003                     	ds	2
   140  000005                     ___awdiv@counter:
   141                           	callstack 0
   142  000005                     lcd_string@str:
   143                           	callstack 0
   144  000005                     ___wmul@product:
   145                           	callstack 0
   146                           
   147                           ; 2 bytes @ 0x4
   148  000005                     	ds	1
   149  000006                     ___awdiv@sign:
   150                           	callstack 0
   151                           
   152                           ; 1 bytes @ 0x5
   153  000006                     	ds	1
   154  000007                     ??_lcd_string:
   155  000007                     ___awdiv@quotient:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x6
   159  000007                     	ds	2
   160  000009                     lcd_string@i:
   161                           	callstack 0
   162  000009                     lcd_number@num:
   163                           	callstack 0
   164                           
   165                           ; 2 bytes @ 0x8
   166  000009                     	ds	2
   167  00000B                     lcd_number@num_display:
   168                           	callstack 0
   169                           
   170                           ; 2 bytes @ 0xA
   171  00000B                     	ds	2
   172  00000D                     lcd_number@num_test:
   173                           	callstack 0
   174                           
   175                           ; 2 bytes @ 0xC
   176  00000D                     	ds	2
   177  00000F                     lcd_number@num_div:
   178                           	callstack 0
   179                           
   180                           ; 2 bytes @ 0xE
   181  00000F                     	ds	2
   182  000011                     ??_main:
   183                           
   184                           ; 1 bytes @ 0x10
   185  000011                     	ds	2
   186  000013                     main@cnt_pre:
   187                           	callstack 0
   188                           
   189                           ; 2 bytes @ 0x12
   190  000013                     	ds	2
   191  000015                     main@cnt_af:
   192                           	callstack 0
   193                           
   194                           ; 2 bytes @ 0x14
   195  000015                     	ds	2
   196  000017                     main@rate:
   197                           	callstack 0
   198                           
   199                           ; 2 bytes @ 0x16
   200  000017                     	ds	2
   201                           
   202 ;;
   203 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   204 ;;
   205 ;; *************** function _main *****************
   206 ;; Defined at:
   207 ;;		line 75 in file "newmain.c"
   208 ;; Parameters:    Size  Location     Type
   209 ;;		None
   210 ;; Auto vars:     Size  Location     Type
   211 ;;  rate            2   22[COMRAM] unsigned int 
   212 ;;  cnt_af          2   20[COMRAM] unsigned int 
   213 ;;  cnt_pre         2   18[COMRAM] unsigned int 
   214 ;;  x               1    0        unsigned char 
   215 ;; Return value:  Size  Location     Type
   216 ;;                  1    wreg      void 
   217 ;; Registers used:
   218 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   219 ;; Tracked objects:
   220 ;;		On entry : 0/0
   221 ;;		On exit  : 0/0
   222 ;;		Unchanged: 0/0
   223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   224 ;;      Params:         0       0       0       0       0       0       0
   225 ;;      Locals:         6       0       0       0       0       0       0
   226 ;;      Temps:          2       0       0       0       0       0       0
   227 ;;      Totals:         8       0       0       0       0       0       0
   228 ;;Total ram usage:        8 bytes
   229 ;; Hardware stack levels required when called: 2
   230 ;; This function calls:
   231 ;;		_Timer1_Configuration
   232 ;;		_lcd_command
   233 ;;		_lcd_number
   234 ;;		_lcd_string
   235 ;; This function is called by:
   236 ;;		Startup code after reset
   237 ;; This function uses a non-reentrant model
   238 ;;
   239                           
   240                           	psect	text0
   241  0007CC                     __ptext0:
   242                           	callstack 0
   243  0007CC                     _main:
   244                           	callstack 29
   245  0007CC                     
   246                           ;newmain.c: 76:     unsigned int cnt_pre, cnt_af, rate;;newmain.c: 77:     TRISC = 0;
   247  0007CC  0E00               	movlw	0
   248  0007CE  6E94               	movwf	148,c	;volatile
   249                           
   250                           ;newmain.c: 78:     TRISD = 0;
   251  0007D0  0E00               	movlw	0
   252  0007D2  6E95               	movwf	149,c	;volatile
   253                           
   254                           ;newmain.c: 79:     PORTC = 0;
   255  0007D4  0E00               	movlw	0
   256  0007D6  6E82               	movwf	130,c	;volatile
   257                           
   258                           ;newmain.c: 80:     PORTD = 0;
   259  0007D8  0E00               	movlw	0
   260  0007DA  6E83               	movwf	131,c	;volatile
   261  0007DC                     
   262                           ;newmain.c: 81:     lcd_command(0x38);
   263  0007DC  0E38               	movlw	56
   264  0007DE  EC94  F004         	call	_lcd_command
   265  0007E2                     
   266                           ;newmain.c: 82:  lcd_command(0x0c);
   267  0007E2  0E0C               	movlw	12
   268  0007E4  EC94  F004         	call	_lcd_command
   269  0007E8                     
   270                           ;newmain.c: 83:  lcd_command(0x01);
   271  0007E8  0E01               	movlw	1
   272  0007EA  EC94  F004         	call	_lcd_command
   273  0007EE                     
   274                           ;newmain.c: 85:     lcd_number(x);
   275  0007EE  0E00               	movlw	0
   276  0007F0  6E0A               	movwf	(lcd_number@num+1)^0,c
   277  0007F2  0E22               	movlw	34
   278  0007F4  6E09               	movwf	lcd_number@num^0,c
   279  0007F6  EC08  F003         	call	_lcd_number	;wreg free
   280  0007FA                     
   281                           ;newmain.c: 86:  lcd_string(" chuc 3 mung");
   282  0007FA  0E01               	movlw	low STR_1
   283  0007FC  6E05               	movwf	lcd_string@str^0,c
   284  0007FE  0E06               	movlw	high STR_1
   285  000800  6E06               	movwf	(lcd_string@str+1)^0,c
   286  000802  EC39  F004         	call	_lcd_string	;wreg free
   287  000806                     
   288                           ;newmain.c: 87:     Timer1_Configuration();
   289  000806  ECC4  F004         	call	_Timer1_Configuration	;wreg free
   290  00080A                     l997:
   291                           
   292                           ;newmain.c: 89:     {;newmain.c: 90:         cnt_pre = ((TMR1H << 8) | TMR1L);
   293  00080A  50CE               	movf	206,w,c	;volatile
   294  00080C  CFCF F011          	movff	4047,??_main	;volatile
   295  000810  6A12               	clrf	(??_main+1)^0,c
   296  000812  C011  F012         	movff	??_main,??_main+1
   297  000816  6A11               	clrf	??_main^0,c
   298  000818  1011               	iorwf	??_main^0,w,c
   299  00081A  6E13               	movwf	main@cnt_pre^0,c
   300  00081C  5012               	movf	(??_main+1)^0,w,c
   301  00081E  6E14               	movwf	(main@cnt_pre+1)^0,c
   302  000820                     
   303                           ;newmain.c: 91:         _delay((unsigned long)((1000)*(8000000/4000.0)));
   304  000820  0E0B               	movlw	11
   305  000822  6E12               	movwf	(??_main+1)^0,c
   306  000824  0E26               	movlw	38
   307  000826  6E11               	movwf	??_main^0,c
   308  000828  0E5E               	movlw	94
   309  00082A                     u237:
   310  00082A  2EE8               	decfsz	wreg,f,c
   311  00082C  D7FE               	bra	u237
   312  00082E  2E11               	decfsz	??_main^0,f,c
   313  000830  D7FC               	bra	u237
   314  000832  2E12               	decfsz	(??_main+1)^0,f,c
   315  000834  D7FA               	bra	u237
   316  000836                     
   317                           ;newmain.c: 92:         cnt_af = ((TMR1H << 8) | TMR1L);
   318  000836  50CE               	movf	206,w,c	;volatile
   319  000838  CFCF F011          	movff	4047,??_main	;volatile
   320  00083C  6A12               	clrf	(??_main+1)^0,c
   321  00083E  C011  F012         	movff	??_main,??_main+1
   322  000842  6A11               	clrf	??_main^0,c
   323  000844  1011               	iorwf	??_main^0,w,c
   324  000846  6E15               	movwf	main@cnt_af^0,c
   325  000848  5012               	movf	(??_main+1)^0,w,c
   326  00084A  6E16               	movwf	(main@cnt_af+1)^0,c
   327  00084C                     
   328                           ;newmain.c: 93:         rate = cnt_af - cnt_pre;
   329  00084C  5013               	movf	main@cnt_pre^0,w,c
   330  00084E  5C15               	subwf	main@cnt_af^0,w,c
   331  000850  6E17               	movwf	main@rate^0,c
   332  000852  5014               	movf	(main@cnt_pre+1)^0,w,c
   333  000854  5816               	subwfb	(main@cnt_af+1)^0,w,c
   334  000856  6E18               	movwf	(main@rate+1)^0,c
   335  000858                     
   336                           ;newmain.c: 94:         lcd_command(0xc0);
   337  000858  0EC0               	movlw	192
   338  00085A  EC94  F004         	call	_lcd_command
   339  00085E                     
   340                           ;newmain.c: 95:         lcd_number(rate);
   341  00085E  C017  F009         	movff	main@rate,lcd_number@num
   342  000862  C018  F00A         	movff	main@rate+1,lcd_number@num+1
   343  000866  EC08  F003         	call	_lcd_number	;wreg free
   344  00086A  EF05  F004         	goto	l997
   345  00086E  EF00  F000         	goto	start
   346  000872                     __end_of_main:
   347                           	callstack 0
   348                           
   349 ;; *************** function _lcd_string *****************
   350 ;; Defined at:
   351 ;;		line 32 in file "MyLcd16.c"
   352 ;; Parameters:    Size  Location     Type
   353 ;;  str             2    4[COMRAM] PTR unsigned char 
   354 ;;		 -> STR_1(13), 
   355 ;; Auto vars:     Size  Location     Type
   356 ;;  i               2    8[COMRAM] int 
   357 ;; Return value:  Size  Location     Type
   358 ;;                  1    wreg      void 
   359 ;; Registers used:
   360 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   361 ;; Tracked objects:
   362 ;;		On entry : 0/0
   363 ;;		On exit  : 0/0
   364 ;;		Unchanged: 0/0
   365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   366 ;;      Params:         2       0       0       0       0       0       0
   367 ;;      Locals:         2       0       0       0       0       0       0
   368 ;;      Temps:          2       0       0       0       0       0       0
   369 ;;      Totals:         6       0       0       0       0       0       0
   370 ;;Total ram usage:        6 bytes
   371 ;; Hardware stack levels used: 1
   372 ;; Hardware stack levels required when called: 1
   373 ;; This function calls:
   374 ;;		_lcd_char
   375 ;;		_strlen
   376 ;; This function is called by:
   377 ;;		_main
   378 ;; This function uses a non-reentrant model
   379 ;;
   380                           
   381                           	psect	text1
   382  000872                     __ptext1:
   383                           	callstack 0
   384  000872                     _lcd_string:
   385                           	callstack 29
   386  000872                     
   387                           ;MyLcd16.c: 32: void lcd_string(char *str);MyLcd16.c: 33: {;MyLcd16.c: 34:  for(int i=0;
      +                           i<strlen(str); i++)
   388  000872  0E00               	movlw	0
   389  000874  6E0A               	movwf	(lcd_string@i+1)^0,c
   390  000876  0E00               	movlw	0
   391  000878  6E09               	movwf	lcd_string@i^0,c
   392  00087A  EF4F  F004         	goto	l979
   393  00087E                     l975:
   394                           
   395                           ;MyLcd16.c: 35:  {;MyLcd16.c: 36:   lcd_char(str[i]);
   396  00087E  5009               	movf	lcd_string@i^0,w,c
   397  000880  2405               	addwf	lcd_string@str^0,w,c
   398  000882  6E07               	movwf	??_lcd_string^0,c
   399  000884  500A               	movf	(lcd_string@i+1)^0,w,c
   400  000886  2006               	addwfc	(lcd_string@str+1)^0,w,c
   401  000888  6E08               	movwf	(??_lcd_string+1)^0,c
   402  00088A  C007  FFF6         	movff	??_lcd_string,tblptrl
   403  00088E  C008  FFF7         	movff	??_lcd_string+1,tblptrh
   404  000892                     	if	0	;tblptru may be non-zero
   405  000892                     	endif
   406  000892                     	if	0	;tblptru may be non-zero
   407  000892                     	endif
   408  000892  0008               	tblrd		*
   409  000894  50F5               	movf	tablat,w,c
   410  000896  EC7E  F004         	call	_lcd_char
   411  00089A                     
   412                           ;MyLcd16.c: 37:  }
   413  00089A  4A09               	infsnz	lcd_string@i^0,f,c
   414  00089C  2A0A               	incf	(lcd_string@i+1)^0,f,c
   415  00089E                     l979:
   416  00089E  C005  F001         	movff	lcd_string@str,strlen@s
   417  0008A2  C006  F002         	movff	lcd_string@str+1,strlen@s+1
   418  0008A6  EC61  F004         	call	_strlen	;wreg free
   419  0008AA  5001               	movf	?_strlen^0,w,c
   420  0008AC  5C09               	subwf	lcd_string@i^0,w,c
   421  0008AE  5002               	movf	(?_strlen+1)^0,w,c
   422  0008B0  580A               	subwfb	(lcd_string@i+1)^0,w,c
   423  0008B2  A0D8               	btfss	status,0,c
   424  0008B4  EF5E  F004         	goto	u221
   425  0008B8  EF60  F004         	goto	u220
   426  0008BC                     u221:
   427  0008BC  EF3F  F004         	goto	l975
   428  0008C0                     u220:
   429  0008C0  0012               	return		;funcret
   430  0008C2                     __end_of_lcd_string:
   431                           	callstack 0
   432                           
   433 ;; *************** function _strlen *****************
   434 ;; Defined at:
   435 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
   436 ;; Parameters:    Size  Location     Type
   437 ;;  s               2    0[COMRAM] PTR const unsigned char 
   438 ;;		 -> STR_1(13), 
   439 ;; Auto vars:     Size  Location     Type
   440 ;;  a               2    2[COMRAM] PTR const unsigned char 
   441 ;;		 -> STR_1(13), 
   442 ;; Return value:  Size  Location     Type
   443 ;;                  2    0[COMRAM] unsigned int 
   444 ;; Registers used:
   445 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   446 ;; Tracked objects:
   447 ;;		On entry : 0/0
   448 ;;		On exit  : 0/0
   449 ;;		Unchanged: 0/0
   450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   451 ;;      Params:         2       0       0       0       0       0       0
   452 ;;      Locals:         2       0       0       0       0       0       0
   453 ;;      Temps:          0       0       0       0       0       0       0
   454 ;;      Totals:         4       0       0       0       0       0       0
   455 ;;Total ram usage:        4 bytes
   456 ;; Hardware stack levels used: 1
   457 ;; This function calls:
   458 ;;		Nothing
   459 ;; This function is called by:
   460 ;;		_lcd_string
   461 ;; This function uses a non-reentrant model
   462 ;;
   463                           
   464                           	psect	text2
   465  0008C2                     __ptext2:
   466                           	callstack 0
   467  0008C2                     _strlen:
   468                           	callstack 29
   469  0008C2  C001  F003         	movff	strlen@s,strlen@a
   470  0008C6  C002  F004         	movff	strlen@s+1,strlen@a+1
   471  0008CA  EF69  F004         	goto	l895
   472  0008CE                     l893:
   473  0008CE  4A01               	infsnz	strlen@s^0,f,c
   474  0008D0  2A02               	incf	(strlen@s+1)^0,f,c
   475  0008D2                     l895:
   476  0008D2  C001  FFF6         	movff	strlen@s,tblptrl
   477  0008D6  C002  FFF7         	movff	strlen@s+1,tblptrh
   478  0008DA                     	if	0	;tblptru may be non-zero
   479  0008DA                     	endif
   480  0008DA                     	if	0	;tblptru may be non-zero
   481  0008DA                     	endif
   482  0008DA  0008               	tblrd		*
   483  0008DC  50F5               	movf	tablat,w,c
   484  0008DE  0900               	iorlw	0
   485  0008E0  A4D8               	btfss	status,2,c
   486  0008E2  EF75  F004         	goto	u121
   487  0008E6  EF77  F004         	goto	u120
   488  0008EA                     u121:
   489  0008EA  EF67  F004         	goto	l893
   490  0008EE                     u120:
   491  0008EE  5003               	movf	strlen@a^0,w,c
   492  0008F0  5C01               	subwf	strlen@s^0,w,c
   493  0008F2  6E01               	movwf	?_strlen^0,c
   494  0008F4  5004               	movf	(strlen@a+1)^0,w,c
   495  0008F6  5802               	subwfb	(strlen@s+1)^0,w,c
   496  0008F8  6E02               	movwf	(?_strlen+1)^0,c
   497  0008FA  0012               	return		;funcret
   498  0008FC                     __end_of_strlen:
   499                           	callstack 0
   500                           
   501 ;; *************** function _lcd_number *****************
   502 ;; Defined at:
   503 ;;		line 40 in file "MyLcd16.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;  num             2    8[COMRAM] int 
   506 ;; Auto vars:     Size  Location     Type
   507 ;;  num_div         2   14[COMRAM] int 
   508 ;;  num_test        2   12[COMRAM] int 
   509 ;;  num_display     2   10[COMRAM] int 
   510 ;; Return value:  Size  Location     Type
   511 ;;                  1    wreg      void 
   512 ;; Registers used:
   513 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   514 ;; Tracked objects:
   515 ;;		On entry : 0/0
   516 ;;		On exit  : 0/0
   517 ;;		Unchanged: 0/0
   518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   519 ;;      Params:         2       0       0       0       0       0       0
   520 ;;      Locals:         6       0       0       0       0       0       0
   521 ;;      Temps:          0       0       0       0       0       0       0
   522 ;;      Totals:         8       0       0       0       0       0       0
   523 ;;Total ram usage:        8 bytes
   524 ;; Hardware stack levels used: 1
   525 ;; Hardware stack levels required when called: 1
   526 ;; This function calls:
   527 ;;		___awdiv
   528 ;;		___wmul
   529 ;;		_lcd_char
   530 ;; This function is called by:
   531 ;;		_main
   532 ;; This function uses a non-reentrant model
   533 ;;
   534                           
   535                           	psect	text3
   536  000610                     __ptext3:
   537                           	callstack 0
   538  000610                     _lcd_number:
   539                           	callstack 29
   540  000610                     
   541                           ;MyLcd16.c: 40: void lcd_number(int num);MyLcd16.c: 41: {;MyLcd16.c: 42:     int num_div
      +                           = 10000;
   542  000610  0E27               	movlw	39
   543  000612  6E10               	movwf	(lcd_number@num_div+1)^0,c
   544  000614  0E10               	movlw	16
   545  000616  6E0F               	movwf	lcd_number@num_div^0,c
   546  000618                     
   547                           ;MyLcd16.c: 43:     int num_test = num;
   548  000618  C009  F00D         	movff	lcd_number@num,lcd_number@num_test
   549  00061C  C00A  F00E         	movff	lcd_number@num+1,lcd_number@num_test+1
   550  000620                     
   551                           ;MyLcd16.c: 45:     if (num != 0) while (num_test/num_div <= 0 )
   552  000620  5009               	movf	lcd_number@num^0,w,c
   553  000622  100A               	iorwf	(lcd_number@num+1)^0,w,c
   554  000624  B4D8               	btfsc	status,2,c
   555  000626  EF17  F003         	goto	u191
   556  00062A  EF19  F003         	goto	u190
   557  00062E                     u191:
   558  00062E  EF42  F003         	goto	l961
   559  000632                     u190:
   560  000632  EF29  F003         	goto	l59
   561  000636                     l959:
   562                           
   563                           ;MyLcd16.c: 46:     {;MyLcd16.c: 47:         num_div /= 10;
   564  000636  C00F  F001         	movff	lcd_number@num_div,___awdiv@dividend
   565  00063A  C010  F002         	movff	lcd_number@num_div+1,___awdiv@dividend+1
   566  00063E  0E00               	movlw	0
   567  000640  6E04               	movwf	(___awdiv@divisor+1)^0,c
   568  000642  0E0A               	movlw	10
   569  000644  6E03               	movwf	___awdiv@divisor^0,c
   570  000646  EC84  F003         	call	___awdiv	;wreg free
   571  00064A  C001  F00F         	movff	?___awdiv,lcd_number@num_div
   572  00064E  C002  F010         	movff	?___awdiv+1,lcd_number@num_div+1
   573  000652                     l59:
   574                           
   575                           ;MyLcd16.c: 45:     if (num != 0) while (num_test/num_div <= 0 )
   576  000652  C00D  F001         	movff	lcd_number@num_test,___awdiv@dividend
   577  000656  C00E  F002         	movff	lcd_number@num_test+1,___awdiv@dividend+1
   578  00065A  C00F  F003         	movff	lcd_number@num_div,___awdiv@divisor
   579  00065E  C010  F004         	movff	lcd_number@num_div+1,___awdiv@divisor+1
   580  000662  EC84  F003         	call	___awdiv	;wreg free
   581  000666  BE02               	btfsc	(?___awdiv+1)^0,7,c
   582  000668  EF3E  F003         	goto	u201
   583  00066C  5002               	movf	(?___awdiv+1)^0,w,c
   584  00066E  E108               	bnz	u200
   585  000670  0401               	decf	?___awdiv^0,w,c
   586  000672  A0D8               	btfss	status,0,c
   587  000674  EF3E  F003         	goto	u201
   588  000678  EF40  F003         	goto	u200
   589  00067C                     u201:
   590  00067C  EF1B  F003         	goto	l959
   591  000680                     u200:
   592  000680  EF46  F003         	goto	l963
   593  000684                     l961:
   594  000684  0E00               	movlw	0
   595  000686  6E10               	movwf	(lcd_number@num_div+1)^0,c
   596  000688  0E01               	movlw	1
   597  00068A  6E0F               	movwf	lcd_number@num_div^0,c
   598  00068C                     l963:
   599                           
   600                           ;MyLcd16.c: 52:     {;MyLcd16.c: 53:         num_display = num_test/num_div;
   601  00068C  C00D  F001         	movff	lcd_number@num_test,___awdiv@dividend
   602  000690  C00E  F002         	movff	lcd_number@num_test+1,___awdiv@dividend+1
   603  000694  C00F  F003         	movff	lcd_number@num_div,___awdiv@divisor
   604  000698  C010  F004         	movff	lcd_number@num_div+1,___awdiv@divisor+1
   605  00069C  EC84  F003         	call	___awdiv	;wreg free
   606  0006A0  C001  F00B         	movff	?___awdiv,lcd_number@num_display
   607  0006A4  C002  F00C         	movff	?___awdiv+1,lcd_number@num_display+1
   608  0006A8                     
   609                           ;MyLcd16.c: 54:         lcd_char(num_display + 48U);
   610  0006A8  500B               	movf	lcd_number@num_display^0,w,c
   611  0006AA  0F30               	addlw	48
   612  0006AC  EC7E  F004         	call	_lcd_char
   613  0006B0                     
   614                           ;MyLcd16.c: 55:         num_test = num_test - num_div*num_display;
   615  0006B0  C00F  F001         	movff	lcd_number@num_div,___wmul@multiplier
   616  0006B4  C010  F002         	movff	lcd_number@num_div+1,___wmul@multiplier+1
   617  0006B8  C00B  F003         	movff	lcd_number@num_display,___wmul@multiplicand
   618  0006BC  C00C  F004         	movff	lcd_number@num_display+1,___wmul@multiplicand+1
   619  0006C0  ECAA  F004         	call	___wmul	;wreg free
   620  0006C4  5001               	movf	?___wmul^0,w,c
   621  0006C6  5C0D               	subwf	lcd_number@num_test^0,w,c
   622  0006C8  6E0D               	movwf	lcd_number@num_test^0,c
   623  0006CA  5002               	movf	(?___wmul+1)^0,w,c
   624  0006CC  580E               	subwfb	(lcd_number@num_test+1)^0,w,c
   625  0006CE  6E0E               	movwf	(lcd_number@num_test+1)^0,c
   626  0006D0                     
   627                           ;MyLcd16.c: 56:         num_div /= 10;
   628  0006D0  C00F  F001         	movff	lcd_number@num_div,___awdiv@dividend
   629  0006D4  C010  F002         	movff	lcd_number@num_div+1,___awdiv@dividend+1
   630  0006D8  0E00               	movlw	0
   631  0006DA  6E04               	movwf	(___awdiv@divisor+1)^0,c
   632  0006DC  0E0A               	movlw	10
   633  0006DE  6E03               	movwf	___awdiv@divisor^0,c
   634  0006E0  EC84  F003         	call	___awdiv	;wreg free
   635  0006E4  C001  F00F         	movff	?___awdiv,lcd_number@num_div
   636  0006E8  C002  F010         	movff	?___awdiv+1,lcd_number@num_div+1
   637  0006EC                     
   638                           ;MyLcd16.c: 57:     }
   639  0006EC  BE10               	btfsc	(lcd_number@num_div+1)^0,7,c
   640  0006EE  EF83  F003         	goto	u210
   641  0006F2  5010               	movf	(lcd_number@num_div+1)^0,w,c
   642  0006F4  E106               	bnz	u211
   643  0006F6  040F               	decf	lcd_number@num_div^0,w,c
   644  0006F8  B0D8               	btfsc	status,0,c
   645  0006FA  EF81  F003         	goto	u211
   646  0006FE  EF83  F003         	goto	u210
   647  000702                     u211:
   648  000702  EF46  F003         	goto	l963
   649  000706                     u210:
   650  000706  0012               	return		;funcret
   651  000708                     __end_of_lcd_number:
   652                           	callstack 0
   653                           
   654 ;; *************** function _lcd_char *****************
   655 ;; Defined at:
   656 ;;		line 20 in file "MyLcd16.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;  data            1    wreg     unsigned char 
   659 ;; Auto vars:     Size  Location     Type
   660 ;;  data            1    1[COMRAM] unsigned char 
   661 ;; Return value:  Size  Location     Type
   662 ;;                  1    wreg      void 
   663 ;; Registers used:
   664 ;;		wreg, status,2, status,0
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   670 ;;      Params:         0       0       0       0       0       0       0
   671 ;;      Locals:         1       0       0       0       0       0       0
   672 ;;      Temps:          1       0       0       0       0       0       0
   673 ;;      Totals:         2       0       0       0       0       0       0
   674 ;;Total ram usage:        2 bytes
   675 ;; Hardware stack levels used: 1
   676 ;; This function calls:
   677 ;;		Nothing
   678 ;; This function is called by:
   679 ;;		_lcd_string
   680 ;;		_lcd_number
   681 ;; This function uses a non-reentrant model
   682 ;;
   683                           
   684                           	psect	text4
   685  0008FC                     __ptext4:
   686                           	callstack 0
   687  0008FC                     _lcd_char:
   688                           	callstack 29
   689                           
   690                           ;incstack = 0
   691                           ;lcd_char@data stored from wreg
   692  0008FC  6E02               	movwf	lcd_char@data^0,c
   693  0008FE                     
   694                           ;MyLcd16.c: 20: void lcd_char(char data);MyLcd16.c: 21: {;MyLcd16.c: 22:     PORTC &= ~(
      +                          1<<6);
   695  0008FE  9C82               	bcf	130,6,c	;volatile
   696                           
   697                           ;MyLcd16.c: 23:  PORTC |= (1<<5);
   698  000900  8A82               	bsf	130,5,c	;volatile
   699  000902                     
   700                           ;MyLcd16.c: 24:  PORTD = data;
   701  000902  C002  FF83         	movff	lcd_char@data,3971	;volatile
   702  000906                     
   703                           ;MyLcd16.c: 27:  PORTC |= (1<<7);
   704  000906  8E82               	bsf	130,7,c	;volatile
   705  000908                     
   706                           ;MyLcd16.c: 28:  _delay((unsigned long)((1)*(8000000/4000.0)));
   707  000908  0E03               	movlw	3
   708  00090A  6E01               	movwf	??_lcd_char^0,c
   709  00090C  0E98               	movlw	152
   710  00090E                     u247:
   711  00090E  2EE8               	decfsz	wreg,f,c
   712  000910  D7FE               	bra	u247
   713  000912  2E01               	decfsz	??_lcd_char^0,f,c
   714  000914  D7FC               	bra	u247
   715  000916                     
   716                           ;MyLcd16.c: 29:     PORTC &= ~(1<<7);
   717  000916  9E82               	bcf	130,7,c	;volatile
   718  000918                     
   719                           ;MyLcd16.c: 30:  _delay((unsigned long)((3)*(8000000/4000.0)));
   720  000918  0E08               	movlw	8
   721  00091A  6E01               	movwf	??_lcd_char^0,c
   722  00091C  0ECA               	movlw	202
   723  00091E                     u257:
   724  00091E  2EE8               	decfsz	wreg,f,c
   725  000920  D7FE               	bra	u257
   726  000922  2E01               	decfsz	??_lcd_char^0,f,c
   727  000924  D7FC               	bra	u257
   728  000926  0012               	return		;funcret
   729  000928                     __end_of_lcd_char:
   730                           	callstack 0
   731                           
   732 ;; *************** function ___wmul *****************
   733 ;; Defined at:
   734 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
   735 ;; Parameters:    Size  Location     Type
   736 ;;  multiplier      2    0[COMRAM] unsigned int 
   737 ;;  multiplicand    2    2[COMRAM] unsigned int 
   738 ;; Auto vars:     Size  Location     Type
   739 ;;  product         2    4[COMRAM] unsigned int 
   740 ;; Return value:  Size  Location     Type
   741 ;;                  2    0[COMRAM] unsigned int 
   742 ;; Registers used:
   743 ;;		wreg, status,2, status,0, prodl, prodh
   744 ;; Tracked objects:
   745 ;;		On entry : 0/0
   746 ;;		On exit  : 0/0
   747 ;;		Unchanged: 0/0
   748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   749 ;;      Params:         4       0       0       0       0       0       0
   750 ;;      Locals:         2       0       0       0       0       0       0
   751 ;;      Temps:          0       0       0       0       0       0       0
   752 ;;      Totals:         6       0       0       0       0       0       0
   753 ;;Total ram usage:        6 bytes
   754 ;; Hardware stack levels used: 1
   755 ;; This function calls:
   756 ;;		Nothing
   757 ;; This function is called by:
   758 ;;		_lcd_number
   759 ;; This function uses a non-reentrant model
   760 ;;
   761                           
   762                           	psect	text5
   763  000954                     __ptext5:
   764                           	callstack 0
   765  000954                     ___wmul:
   766                           	callstack 29
   767  000954  5001               	movf	___wmul@multiplier^0,w,c
   768  000956  0203               	mulwf	___wmul@multiplicand^0,c
   769  000958  CFF3 F005          	movff	prodl,___wmul@product
   770  00095C  CFF4 F006          	movff	prodh,___wmul@product+1
   771  000960  5001               	movf	___wmul@multiplier^0,w,c
   772  000962  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   773  000964  50F3               	movf	243,w,c
   774  000966  2606               	addwf	(___wmul@product+1)^0,f,c
   775  000968  5002               	movf	(___wmul@multiplier+1)^0,w,c
   776  00096A  0203               	mulwf	___wmul@multiplicand^0,c
   777  00096C  50F3               	movf	243,w,c
   778  00096E  2606               	addwf	(___wmul@product+1)^0,f,c
   779  000970  C005  F001         	movff	___wmul@product,?___wmul
   780  000974  C006  F002         	movff	___wmul@product+1,?___wmul+1
   781  000978  0012               	return		;funcret
   782  00097A                     __end_of___wmul:
   783                           	callstack 0
   784                           
   785 ;; *************** function ___awdiv *****************
   786 ;; Defined at:
   787 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;  dividend        2    0[COMRAM] int 
   790 ;;  divisor         2    2[COMRAM] int 
   791 ;; Auto vars:     Size  Location     Type
   792 ;;  quotient        2    6[COMRAM] int 
   793 ;;  sign            1    5[COMRAM] unsigned char 
   794 ;;  counter         1    4[COMRAM] unsigned char 
   795 ;; Return value:  Size  Location     Type
   796 ;;                  2    0[COMRAM] int 
   797 ;; Registers used:
   798 ;;		wreg, status,2, status,0
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   804 ;;      Params:         4       0       0       0       0       0       0
   805 ;;      Locals:         4       0       0       0       0       0       0
   806 ;;      Temps:          0       0       0       0       0       0       0
   807 ;;      Totals:         8       0       0       0       0       0       0
   808 ;;Total ram usage:        8 bytes
   809 ;; Hardware stack levels used: 1
   810 ;; This function calls:
   811 ;;		Nothing
   812 ;; This function is called by:
   813 ;;		_lcd_number
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817                           	psect	text6
   818  000708                     __ptext6:
   819                           	callstack 0
   820  000708                     ___awdiv:
   821                           	callstack 29
   822  000708  0E00               	movlw	0
   823  00070A  6E06               	movwf	___awdiv@sign^0,c
   824  00070C  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   825  00070E  EF8D  F003         	goto	u130
   826  000712  EF8B  F003         	goto	u131
   827  000716                     u131:
   828  000716  EF93  F003         	goto	l915
   829  00071A                     u130:
   830  00071A  6C03               	negf	___awdiv@divisor^0,c
   831  00071C  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   832  00071E  B0D8               	btfsc	status,0,c
   833  000720  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   834  000722  0E01               	movlw	1
   835  000724  6E06               	movwf	___awdiv@sign^0,c
   836  000726                     l915:
   837  000726  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   838  000728  EF9A  F003         	goto	u140
   839  00072C  EF98  F003         	goto	u141
   840  000730                     u141:
   841  000730  EFA0  F003         	goto	l921
   842  000734                     u140:
   843  000734  6C01               	negf	___awdiv@dividend^0,c
   844  000736  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   845  000738  B0D8               	btfsc	status,0,c
   846  00073A  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   847  00073C  0E01               	movlw	1
   848  00073E  1A06               	xorwf	___awdiv@sign^0,f,c
   849  000740                     l921:
   850  000740  0E00               	movlw	0
   851  000742  6E08               	movwf	(___awdiv@quotient+1)^0,c
   852  000744  0E00               	movlw	0
   853  000746  6E07               	movwf	___awdiv@quotient^0,c
   854  000748  5003               	movf	___awdiv@divisor^0,w,c
   855  00074A  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   856  00074C  B4D8               	btfsc	status,2,c
   857  00074E  EFAB  F003         	goto	u151
   858  000752  EFAD  F003         	goto	u150
   859  000756                     u151:
   860  000756  EFD5  F003         	goto	l943
   861  00075A                     u150:
   862  00075A  0E01               	movlw	1
   863  00075C  6E05               	movwf	___awdiv@counter^0,c
   864  00075E  EFB5  F003         	goto	l929
   865  000762                     l927:
   866  000762  90D8               	bcf	status,0,c
   867  000764  3603               	rlcf	___awdiv@divisor^0,f,c
   868  000766  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   869  000768  2A05               	incf	___awdiv@counter^0,f,c
   870  00076A                     l929:
   871  00076A  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   872  00076C  EFBA  F003         	goto	u161
   873  000770  EFBC  F003         	goto	u160
   874  000774                     u161:
   875  000774  EFB1  F003         	goto	l927
   876  000778                     u160:
   877  000778                     l931:
   878  000778  90D8               	bcf	status,0,c
   879  00077A  3607               	rlcf	___awdiv@quotient^0,f,c
   880  00077C  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   881  00077E  5003               	movf	___awdiv@divisor^0,w,c
   882  000780  5C01               	subwf	___awdiv@dividend^0,w,c
   883  000782  5004               	movf	(___awdiv@divisor+1)^0,w,c
   884  000784  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   885  000786  A0D8               	btfss	status,0,c
   886  000788  EFC8  F003         	goto	u171
   887  00078C  EFCA  F003         	goto	u170
   888  000790                     u171:
   889  000790  EFCF  F003         	goto	l939
   890  000794                     u170:
   891  000794  5003               	movf	___awdiv@divisor^0,w,c
   892  000796  5E01               	subwf	___awdiv@dividend^0,f,c
   893  000798  5004               	movf	(___awdiv@divisor+1)^0,w,c
   894  00079A  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   895  00079C  8007               	bsf	___awdiv@quotient^0,0,c
   896  00079E                     l939:
   897  00079E  90D8               	bcf	status,0,c
   898  0007A0  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   899  0007A2  3203               	rrcf	___awdiv@divisor^0,f,c
   900  0007A4  2E05               	decfsz	___awdiv@counter^0,f,c
   901  0007A6  EFBC  F003         	goto	l931
   902  0007AA                     l943:
   903  0007AA  5006               	movf	___awdiv@sign^0,w,c
   904  0007AC  B4D8               	btfsc	status,2,c
   905  0007AE  EFDB  F003         	goto	u181
   906  0007B2  EFDD  F003         	goto	u180
   907  0007B6                     u181:
   908  0007B6  EFE1  F003         	goto	l947
   909  0007BA                     u180:
   910  0007BA  6C07               	negf	___awdiv@quotient^0,c
   911  0007BC  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   912  0007BE  B0D8               	btfsc	status,0,c
   913  0007C0  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   914  0007C2                     l947:
   915  0007C2  C007  F001         	movff	___awdiv@quotient,?___awdiv
   916  0007C6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   917  0007CA  0012               	return		;funcret
   918  0007CC                     __end_of___awdiv:
   919                           	callstack 0
   920                           
   921 ;; *************** function _lcd_command *****************
   922 ;; Defined at:
   923 ;;		line 6 in file "MyLcd16.c"
   924 ;; Parameters:    Size  Location     Type
   925 ;;  cmnd            1    wreg     unsigned char 
   926 ;; Auto vars:     Size  Location     Type
   927 ;;  cmnd            1    1[COMRAM] unsigned char 
   928 ;; Return value:  Size  Location     Type
   929 ;;                  1    wreg      void 
   930 ;; Registers used:
   931 ;;		wreg, status,2, status,0
   932 ;; Tracked objects:
   933 ;;		On entry : 0/0
   934 ;;		On exit  : 0/0
   935 ;;		Unchanged: 0/0
   936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   937 ;;      Params:         0       0       0       0       0       0       0
   938 ;;      Locals:         1       0       0       0       0       0       0
   939 ;;      Temps:          1       0       0       0       0       0       0
   940 ;;      Totals:         2       0       0       0       0       0       0
   941 ;;Total ram usage:        2 bytes
   942 ;; Hardware stack levels used: 1
   943 ;; This function calls:
   944 ;;		Nothing
   945 ;; This function is called by:
   946 ;;		_main
   947 ;; This function uses a non-reentrant model
   948 ;;
   949                           
   950                           	psect	text7
   951  000928                     __ptext7:
   952                           	callstack 0
   953  000928                     _lcd_command:
   954                           	callstack 30
   955                           
   956                           ;incstack = 0
   957                           ;lcd_command@cmnd stored from wreg
   958  000928  6E02               	movwf	lcd_command@cmnd^0,c
   959  00092A                     
   960                           ;MyLcd16.c: 6: void lcd_command(char cmnd);MyLcd16.c: 7: {;MyLcd16.c: 8:  PORTC &= ~(1<<
      +                          6);
   961  00092A  9C82               	bcf	130,6,c	;volatile
   962                           
   963                           ;MyLcd16.c: 9:  PORTC &= ~(1<<5);
   964  00092C  9A82               	bcf	130,5,c	;volatile
   965  00092E                     
   966                           ;MyLcd16.c: 11:  PORTD = cmnd;
   967  00092E  C002  FF83         	movff	lcd_command@cmnd,3971	;volatile
   968  000932                     
   969                           ;MyLcd16.c: 14:  PORTC |= (1<<7);
   970  000932  8E82               	bsf	130,7,c	;volatile
   971  000934                     
   972                           ;MyLcd16.c: 15:  _delay((unsigned long)((1)*(8000000/4000.0)));
   973  000934  0E03               	movlw	3
   974  000936  6E01               	movwf	??_lcd_command^0,c
   975  000938  0E98               	movlw	152
   976  00093A                     u267:
   977  00093A  2EE8               	decfsz	wreg,f,c
   978  00093C  D7FE               	bra	u267
   979  00093E  2E01               	decfsz	??_lcd_command^0,f,c
   980  000940  D7FC               	bra	u267
   981  000942                     
   982                           ;MyLcd16.c: 16:     PORTC &= ~(1<<7);
   983  000942  9E82               	bcf	130,7,c	;volatile
   984  000944                     
   985                           ;MyLcd16.c: 17:  _delay((unsigned long)((3)*(8000000/4000.0)));
   986  000944  0E08               	movlw	8
   987  000946  6E01               	movwf	??_lcd_command^0,c
   988  000948  0ECA               	movlw	202
   989  00094A                     u277:
   990  00094A  2EE8               	decfsz	wreg,f,c
   991  00094C  D7FE               	bra	u277
   992  00094E  2E01               	decfsz	??_lcd_command^0,f,c
   993  000950  D7FC               	bra	u277
   994  000952  0012               	return		;funcret
   995  000954                     __end_of_lcd_command:
   996                           	callstack 0
   997                           
   998 ;; *************** function _Timer1_Configuration *****************
   999 ;; Defined at:
  1000 ;;		line 101 in file "newmain.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;		None
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;		None
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  2   16[None  ] int 
  1007 ;; Registers used:
  1008 ;;		wreg, status,2
  1009 ;; Tracked objects:
  1010 ;;		On entry : 0/0
  1011 ;;		On exit  : 0/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1014 ;;      Params:         0       0       0       0       0       0       0
  1015 ;;      Locals:         0       0       0       0       0       0       0
  1016 ;;      Temps:          0       0       0       0       0       0       0
  1017 ;;      Totals:         0       0       0       0       0       0       0
  1018 ;;Total ram usage:        0 bytes
  1019 ;; Hardware stack levels used: 1
  1020 ;; This function calls:
  1021 ;;		Nothing
  1022 ;; This function is called by:
  1023 ;;		_main
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text8
  1028  000988                     __ptext8:
  1029                           	callstack 0
  1030  000988                     _Timer1_Configuration:
  1031                           	callstack 30
  1032  000988                     
  1033                           ;newmain.c: 103:     T1CON = 0x03;
  1034  000988  0E03               	movlw	3
  1035  00098A  6ECD               	movwf	205,c	;volatile
  1036                           
  1037                           ;newmain.c: 104:     TMR1L = 0;
  1038  00098C  0E00               	movlw	0
  1039  00098E  6ECE               	movwf	206,c	;volatile
  1040                           
  1041                           ;newmain.c: 105:     TMR1H = 0;
  1042  000990  0E00               	movlw	0
  1043  000992  6ECF               	movwf	207,c	;volatile
  1044  000994  0012               	return		;funcret
  1045  000996                     __end_of_Timer1_Configuration:
  1046                           	callstack 0
  1047                           
  1048                           	psect	rparam
  1049  0000                     
  1050                           	psect	idloc
  1051                           
  1052                           ;Config register IDLOC0 @ 0x200000
  1053                           ;	unspecified, using default values
  1054  200000                     	org	2097152
  1055  200000  FF                 	db	255
  1056                           
  1057                           ;Config register IDLOC1 @ 0x200001
  1058                           ;	unspecified, using default values
  1059  200001                     	org	2097153
  1060  200001  FF                 	db	255
  1061                           
  1062                           ;Config register IDLOC2 @ 0x200002
  1063                           ;	unspecified, using default values
  1064  200002                     	org	2097154
  1065  200002  FF                 	db	255
  1066                           
  1067                           ;Config register IDLOC3 @ 0x200003
  1068                           ;	unspecified, using default values
  1069  200003                     	org	2097155
  1070  200003  FF                 	db	255
  1071                           
  1072                           ;Config register IDLOC4 @ 0x200004
  1073                           ;	unspecified, using default values
  1074  200004                     	org	2097156
  1075  200004  FF                 	db	255
  1076                           
  1077                           ;Config register IDLOC5 @ 0x200005
  1078                           ;	unspecified, using default values
  1079  200005                     	org	2097157
  1080  200005  FF                 	db	255
  1081                           
  1082                           ;Config register IDLOC6 @ 0x200006
  1083                           ;	unspecified, using default values
  1084  200006                     	org	2097158
  1085  200006  FF                 	db	255
  1086                           
  1087                           ;Config register IDLOC7 @ 0x200007
  1088                           ;	unspecified, using default values
  1089  200007                     	org	2097159
  1090  200007  FF                 	db	255
  1091                           
  1092                           	psect	config
  1093                           
  1094                           ; Padding undefined space
  1095  300000                     	org	3145728
  1096  300000  FF                 	db	255
  1097                           
  1098                           ;Config register CONFIG1H @ 0x300001
  1099                           ;	Oscillator Selection bits
  1100                           ;	OSC = RCIO6, External RC oscillator, port function on RA6
  1101                           ;	Fail-Safe Clock Monitor Enable bit
  1102                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1103                           ;	Internal/External Oscillator Switchover bit
  1104                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1105  300001                     	org	3145729
  1106  300001  07                 	db	7
  1107                           
  1108                           ;Config register CONFIG2L @ 0x300002
  1109                           ;	Power-up Timer Enable bit
  1110                           ;	PWRT = OFF, PWRT disabled
  1111                           ;	Brown-out Reset Enable bits
  1112                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1113                           ;	Brown Out Reset Voltage bits
  1114                           ;	BORV = 3, Minimum setting
  1115  300002                     	org	3145730
  1116  300002  19                 	db	25
  1117                           
  1118                           ;Config register CONFIG2H @ 0x300003
  1119                           ;	Watchdog Timer Enable bit
  1120                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1121                           ;	Watchdog Timer Postscale Select bits
  1122                           ;	WDTPS = 32768, 1:32768
  1123  300003                     	org	3145731
  1124  300003  1E                 	db	30
  1125                           
  1126                           ; Padding undefined space
  1127  300004                     	org	3145732
  1128  300004  FF                 	db	255
  1129                           
  1130                           ;Config register CONFIG3H @ 0x300005
  1131                           ;	CCP2 MUX bit
  1132                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1133                           ;	PORTB A/D Enable bit
  1134                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1135                           ;	Low-Power Timer1 Oscillator Enable bit
  1136                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1137                           ;	MCLR Pin Enable bit
  1138                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  1139  300005                     	org	3145733
  1140  300005  01                 	db	1
  1141                           
  1142                           ;Config register CONFIG4L @ 0x300006
  1143                           ;	Stack Full/Underflow Reset Enable bit
  1144                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1145                           ;	Single-Supply ICSP Enable bit
  1146                           ;	LVP = OFF, Single-Supply ICSP disabled
  1147                           ;	Extended Instruction Set Enable bit
  1148                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1149                           ;	Background Debugger Enable bit
  1150                           ;	DEBUG = 0x1, unprogrammed default
  1151  300006                     	org	3145734
  1152  300006  80                 	db	128
  1153                           
  1154                           ; Padding undefined space
  1155  300007                     	org	3145735
  1156  300007  FF                 	db	255
  1157                           
  1158                           ;Config register CONFIG5L @ 0x300008
  1159                           ;	Code Protection bit
  1160                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1161                           ;	Code Protection bit
  1162                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1163                           ;	Code Protection bit
  1164                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1165                           ;	Code Protection bit
  1166                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1167  300008                     	org	3145736
  1168  300008  0F                 	db	15
  1169                           
  1170                           ;Config register CONFIG5H @ 0x300009
  1171                           ;	Boot Block Code Protection bit
  1172                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1173                           ;	Data EEPROM Code Protection bit
  1174                           ;	CPD = OFF, Data EEPROM not code-protected
  1175  300009                     	org	3145737
  1176  300009  C0                 	db	192
  1177                           
  1178                           ;Config register CONFIG6L @ 0x30000A
  1179                           ;	Write Protection bit
  1180                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1181                           ;	Write Protection bit
  1182                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1183                           ;	Write Protection bit
  1184                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1185                           ;	Write Protection bit
  1186                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1187  30000A                     	org	3145738
  1188  30000A  0F                 	db	15
  1189                           
  1190                           ;Config register CONFIG6H @ 0x30000B
  1191                           ;	Configuration Register Write Protection bit
  1192                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1193                           ;	Boot Block Write Protection bit
  1194                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1195                           ;	Data EEPROM Write Protection bit
  1196                           ;	WRTD = OFF, Data EEPROM not write-protected
  1197  30000B                     	org	3145739
  1198  30000B  E0                 	db	224
  1199                           
  1200                           ;Config register CONFIG7L @ 0x30000C
  1201                           ;	Table Read Protection bit
  1202                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1203                           ;	Table Read Protection bit
  1204                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1205                           ;	Table Read Protection bit
  1206                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1207                           ;	Table Read Protection bit
  1208                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1209  30000C                     	org	3145740
  1210  30000C  0F                 	db	15
  1211                           
  1212                           ;Config register CONFIG7H @ 0x30000D
  1213                           ;	Boot Block Table Read Protection bit
  1214                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1215  30000D                     	org	3145741
  1216  30000D  40                 	db	64
  1217                           tosu	equ	0xFFF
  1218                           tosh	equ	0xFFE
  1219                           tosl	equ	0xFFD
  1220                           stkptr	equ	0xFFC
  1221                           pclatu	equ	0xFFB
  1222                           pclath	equ	0xFFA
  1223                           pcl	equ	0xFF9
  1224                           tblptru	equ	0xFF8
  1225                           tblptrh	equ	0xFF7
  1226                           tblptrl	equ	0xFF6
  1227                           tablat	equ	0xFF5
  1228                           prodh	equ	0xFF4
  1229                           prodl	equ	0xFF3
  1230                           indf0	equ	0xFEF
  1231                           postinc0	equ	0xFEE
  1232                           postdec0	equ	0xFED
  1233                           preinc0	equ	0xFEC
  1234                           plusw0	equ	0xFEB
  1235                           fsr0h	equ	0xFEA
  1236                           fsr0l	equ	0xFE9
  1237                           wreg	equ	0xFE8
  1238                           indf1	equ	0xFE7
  1239                           postinc1	equ	0xFE6
  1240                           postdec1	equ	0xFE5
  1241                           preinc1	equ	0xFE4
  1242                           plusw1	equ	0xFE3
  1243                           fsr1h	equ	0xFE2
  1244                           fsr1l	equ	0xFE1
  1245                           bsr	equ	0xFE0
  1246                           indf2	equ	0xFDF
  1247                           postinc2	equ	0xFDE
  1248                           postdec2	equ	0xFDD
  1249                           preinc2	equ	0xFDC
  1250                           plusw2	equ	0xFDB
  1251                           fsr2h	equ	0xFDA
  1252                           fsr2l	equ	0xFD9
  1253                           status	equ	0xFD8

Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     24      24
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    lcd_string@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_lcd_number
    _lcd_string->_strlen
    _lcd_number->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    2134
                                             16 COMRAM     8     8      0
               _Timer1_Configuration
                        _lcd_command
                         _lcd_number
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           6     4      2     347
                                              4 COMRAM     6     4      2
                           _lcd_char
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _lcd_number                                           8     6      2    1680
                                              8 COMRAM     8     6      2
                            ___awdiv
                             ___wmul
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_command                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Timer1_Configuration                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Timer1_Configuration
   _lcd_command
   _lcd_number
     ___awdiv
     ___wmul
     _lcd_char
   _lcd_string
     _lcd_char
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     18      18       1       18.9%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Apr 01 16:44:15 2021

                 lcd_char@data 0002                             l35 0994                             l46 0952  
                           l55 08C0                             l49 0926                             l65 0706  
                           l59 0652                             l68 0978                   ___awdiv@sign 0006  
          ___wmul@multiplicand 0003                            l299 07CA                            l821 092E  
                          l901 0954                            l823 0932                            l911 071A  
                          l903 0970                            l751 0906                            l825 0934  
                          l921 0740                            l913 0722                            l753 0908  
                          l745 08FA                            l827 0942                            l819 092A  
                          l931 0778                            l923 0748                            l915 0726  
                          l907 0708                            l755 0916                            l747 08FE  
                          l861 0988                            l829 0944                            l941 07A4  
                          l933 077E                            l925 075A                            l917 0734  
                          l909 070C                            l757 0918                            l749 0902  
                          l935 0794                            l927 0762                            l943 07AA  
                          l919 073C                            l951 0610                            l945 07BA  
                          l937 079C                            l929 076A                            l961 0684  
                          l953 0618                            l947 07C2                            l939 079E  
                          l971 06EC                            l963 068C                            l955 0620  
                          l891 08C2                            l965 06A8                            l893 08CE  
                          l973 0872                            l981 07CC                            l967 06B0  
                          l959 0636                            l895 08D2                            l975 087E  
                          l991 07EE                            l983 07DC                            l969 06D0  
                          l897 08EE                            l977 089A                            l993 07FA  
                          l985 07E2                            l979 089E                            l995 0806  
                          l987 07E8                            l997 080A                            l989 07EE  
                          l999 0820                            u200 0680                            u120 08EE  
                          u201 067C                            u121 08EA                            u130 071A  
                          u210 0706                            u131 0716                            u211 0702  
                          u140 0734                            u220 08C0                            u141 0730  
                          u221 08BC                            u150 075A                            u151 0756  
                          u160 0778                            u161 0774                            u170 0794  
                          u171 0790                            u180 07BA                            u181 07B6  
                          u237 082A                            u190 0632                            u247 090E  
                          u191 062E                            u257 091E                            u267 093A  
                          u277 094A                            wreg 000FE8              lcd_number@num_div 000F  
                         l1001 0836                           l1003 084C                           l1005 0858  
                         l1007 085E                    main@cnt_pre 0013                           STR_1 0601  
                         _main 07CC                           prodh 000FF4                           prodl 000FF3  
                         start 0000                    lcd_string@i 0009             lcd_number@num_test 000D  
                 ___param_bank 000000                          ?_main 0001                __end_of___awdiv 07CC  
              ___awdiv@divisor 0003                          _T1CON 000FCD                ___awdiv@counter 0005  
                        _TMR1H 000FCF                          _TMR1L 000FCE                          _PORTC 000F82  
                        _PORTD 000F83                          _TRISC 000F94                          _TRISD 000F95  
                        tablat 000FF5                          status 000FD8                __initialization 097A  
                 __end_of_main 0872           _Timer1_Configuration 0988                         ??_main 0011  
                __activetblptr 000001               ___awdiv@dividend 0001                  lcd_number@num 0009  
             __end_of_lcd_char 0928           __size_of_lcd_command 002C                         ___wmul 0954  
                    ??___awdiv 0005               ___awdiv@quotient 0007          ?_Timer1_Configuration 0001  
                       isa$std 000001                         _strlen 08C2                   __mediumconst 0000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
                lcd_string@str 0005                     __accesstop 0080        __end_of__initialization 097A  
                ___rparam_used 000001                 __pcstackCOMRAM 0001                lcd_command@cmnd 0002  
                      ?___wmul 0001         ??_Timer1_Configuration 0001                        ?_strlen 0001  
                   _lcd_number 0610                      ?_lcd_char 0001                     _lcd_string 0872  
                      __Hparam 0000                        __Lparam 0000                        ___awdiv 0708  
              __size_of___wmul 0026                   __psmallconst 0600                        __pcinit 097A  
                      __ramtop 0600                        __ptext0 07CC                        __ptext1 0872  
                      __ptext2 08C2                        __ptext3 0610                        __ptext4 08FC  
                      __ptext5 0954                        __ptext6 0708                        __ptext7 0928  
                      __ptext8 0988                __size_of_strlen 003A                     ??_lcd_char 0001  
         end_of_initialization 097A                        strlen@a 0003                        strlen@s 0001  
                  ?_lcd_number 0009                    ?_lcd_string 0005          lcd_number@num_display 000B  
                   main@cnt_af 0015                  ??_lcd_command 0001                 __end_of___wmul 097A  
               __end_of_strlen 08FC            start_initialization 097A                       ??___wmul 0005  
          __size_of_lcd_number 00F8            __end_of_lcd_command 0954            __size_of_lcd_string 0050  
                     ??_strlen 0003              __size_of_lcd_char 002C                       ?___awdiv 0001  
__size_of_Timer1_Configuration 000E                    __smallconst 0600                 ___wmul@product 0005  
                  _lcd_command 0928              ___wmul@multiplier 0001                   ??_lcd_number 000B  
                 ??_lcd_string 0007                       __Hrparam 0000                       __Lrparam 0000  
                 __Lsmallconst 0600             __end_of_lcd_number 0708               __size_of___awdiv 00C4  
           __end_of_lcd_string 08C2                       _lcd_char 08FC                  __size_of_main 00A6  
                     isa$xinst 000000                       main@rate 0017   __end_of_Timer1_Configuration 0996  
                 ?_lcd_command 0001  
