

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Apr 01 01:13:07 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4520 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _T1CONbits	set	4045
    56  0000                     _PIE1bits	set	3997
    57  0000                     _TMR1L	set	4046
    58  0000                     _TMR1H	set	4047
    59  0000                     _PORTC	set	3970
    60  0000                     _PORTD	set	3971
    61  0000                     _TRISD	set	3989
    62  0000                     _TRISC	set	3988
    63                           
    64                           	psect	smallconst
    65  000600                     __psmallconst:
    66                           	callstack 0
    67  000600  00                 	db	0
    68  000601                     STR_1:
    69  000601  20                 	db	32
    70  000602  63                 	db	99	;'c'
    71  000603  68                 	db	104	;'h'
    72  000604  75                 	db	117	;'u'
    73  000605  63                 	db	99	;'c'
    74  000606  20                 	db	32
    75  000607  33                 	db	51	;'3'
    76  000608  20                 	db	32
    77  000609  6D                 	db	109	;'m'
    78  00060A  75                 	db	117	;'u'
    79  00060B  6E                 	db	110	;'n'
    80  00060C  67                 	db	103	;'g'
    81  00060D  00                 	db	0
    82  00060E  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           ; #config settings
    85                           
    86                           	psect	cinit
    87  00093E                     __pcinit:
    88                           	callstack 0
    89  00093E                     start_initialization:
    90                           	callstack 0
    91  00093E                     __initialization:
    92                           	callstack 0
    93  00093E                     end_of_initialization:
    94                           	callstack 0
    95  00093E                     __end_of__initialization:
    96                           	callstack 0
    97  00093E  0E00               	movlw	low (__Lsmallconst shr (0+16))
    98  000940  6EF8               	movwf	tblptru,c
    99  000942  0E06               	movlw	high __Lsmallconst
   100  000944  6EF7               	movwf	tblptrh,c
   101  000946  0100               	movlb	0
   102  000948  EFE6  F003         	goto	_main	;jump to C main() function
   103                           
   104                           	psect	cstackCOMRAM
   105  000001                     __pcstackCOMRAM:
   106                           	callstack 0
   107  000001                     ??_lcd_command:
   108  000001                     ??_lcd_char:
   109  000001                     ?_strlen:
   110                           	callstack 0
   111  000001                     ?___wmul:
   112                           	callstack 0
   113  000001                     ?___awdiv:
   114                           	callstack 0
   115  000001                     ___wmul@multiplier:
   116                           	callstack 0
   117  000001                     ___awdiv@dividend:
   118                           	callstack 0
   119  000001                     strlen@s:
   120                           	callstack 0
   121                           
   122                           ; 2 bytes @ 0x0
   123  000001                     	ds	1
   124  000002                     lcd_command@cmnd:
   125                           	callstack 0
   126  000002                     lcd_char@data:
   127                           	callstack 0
   128                           
   129                           ; 1 bytes @ 0x1
   130  000002                     	ds	1
   131  000003                     ___wmul@multiplicand:
   132                           	callstack 0
   133  000003                     ___awdiv@divisor:
   134                           	callstack 0
   135  000003                     strlen@a:
   136                           	callstack 0
   137                           
   138                           ; 2 bytes @ 0x2
   139  000003                     	ds	2
   140  000005                     ___awdiv@counter:
   141                           	callstack 0
   142  000005                     lcd_string@str:
   143                           	callstack 0
   144  000005                     ___wmul@product:
   145                           	callstack 0
   146                           
   147                           ; 2 bytes @ 0x4
   148  000005                     	ds	1
   149  000006                     ___awdiv@sign:
   150                           	callstack 0
   151                           
   152                           ; 1 bytes @ 0x5
   153  000006                     	ds	1
   154  000007                     ??_lcd_string:
   155  000007                     ___awdiv@quotient:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x6
   159  000007                     	ds	2
   160  000009                     lcd_string@i:
   161                           	callstack 0
   162  000009                     lcd_number@num:
   163                           	callstack 0
   164                           
   165                           ; 2 bytes @ 0x8
   166  000009                     	ds	2
   167  00000B                     lcd_number@num_display:
   168                           	callstack 0
   169                           
   170                           ; 2 bytes @ 0xA
   171  00000B                     	ds	2
   172  00000D                     lcd_number@num_test:
   173                           	callstack 0
   174                           
   175                           ; 2 bytes @ 0xC
   176  00000D                     	ds	2
   177  00000F                     lcd_number@num_div:
   178                           	callstack 0
   179                           
   180                           ; 2 bytes @ 0xE
   181  00000F                     	ds	2
   182  000011                     ??_main:
   183                           
   184                           ; 1 bytes @ 0x10
   185  000011                     	ds	2
   186  000013                     main@cnt:
   187                           	callstack 0
   188                           
   189                           ; 2 bytes @ 0x12
   190  000013                     	ds	2
   191                           
   192 ;;
   193 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   194 ;;
   195 ;; *************** function _main *****************
   196 ;; Defined at:
   197 ;;		line 74 in file "newmain.c"
   198 ;; Parameters:    Size  Location     Type
   199 ;;		None
   200 ;; Auto vars:     Size  Location     Type
   201 ;;  cnt             2   18[COMRAM] unsigned int 
   202 ;; Return value:  Size  Location     Type
   203 ;;                  1    wreg      void 
   204 ;; Registers used:
   205 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   206 ;; Tracked objects:
   207 ;;		On entry : 0/0
   208 ;;		On exit  : 0/0
   209 ;;		Unchanged: 0/0
   210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   211 ;;      Params:         0       0       0       0       0       0       0
   212 ;;      Locals:         2       0       0       0       0       0       0
   213 ;;      Temps:          2       0       0       0       0       0       0
   214 ;;      Totals:         4       0       0       0       0       0       0
   215 ;;Total ram usage:        4 bytes
   216 ;; Hardware stack levels required when called: 2
   217 ;; This function calls:
   218 ;;		_lcd_command
   219 ;;		_lcd_number
   220 ;;		_lcd_string
   221 ;; This function is called by:
   222 ;;		Startup code after reset
   223 ;; This function uses a non-reentrant model
   224 ;;
   225                           
   226                           	psect	text0
   227  0007CC                     __ptext0:
   228                           	callstack 0
   229  0007CC                     _main:
   230                           	callstack 29
   231  0007CC                     
   232                           ;newmain.c: 76:     TRISC = 0;
   233  0007CC  0E00               	movlw	0
   234  0007CE  6E94               	movwf	148,c	;volatile
   235                           
   236                           ;newmain.c: 77:     TRISD = 0;
   237  0007D0  0E00               	movlw	0
   238  0007D2  6E95               	movwf	149,c	;volatile
   239                           
   240                           ;newmain.c: 78:     PORTD = 0;
   241  0007D4  0E00               	movlw	0
   242  0007D6  6E83               	movwf	131,c	;volatile
   243                           
   244                           ;newmain.c: 79:     PORTC = 0;
   245  0007D8  0E00               	movlw	0
   246  0007DA  6E82               	movwf	130,c	;volatile
   247  0007DC                     
   248                           ;newmain.c: 80:     lcd_command(0x38);
   249  0007DC  0E38               	movlw	56
   250  0007DE  EC76  F004         	call	_lcd_command
   251  0007E2                     
   252                           ;newmain.c: 81:  lcd_command(0x0c);
   253  0007E2  0E0C               	movlw	12
   254  0007E4  EC76  F004         	call	_lcd_command
   255  0007E8                     
   256                           ;newmain.c: 82:  lcd_command(0x01);
   257  0007E8  0E01               	movlw	1
   258  0007EA  EC76  F004         	call	_lcd_command
   259  0007EE                     
   260                           ;newmain.c: 83:  lcd_number(02);
   261  0007EE  0E00               	movlw	0
   262  0007F0  6E0A               	movwf	(lcd_number@num+1)^0,c
   263  0007F2  0E02               	movlw	2
   264  0007F4  6E09               	movwf	lcd_number@num^0,c
   265  0007F6  EC08  F003         	call	_lcd_number	;wreg free
   266  0007FA                     
   267                           ;newmain.c: 84:  lcd_string(" chuc 3 mung");
   268  0007FA  0E01               	movlw	low STR_1
   269  0007FC  6E05               	movwf	lcd_string@str^0,c
   270  0007FE  0E06               	movlw	high STR_1
   271  000800  6E06               	movwf	(lcd_string@str+1)^0,c
   272  000802  EC1B  F004         	call	_lcd_string	;wreg free
   273  000806                     l983:
   274                           
   275                           ;newmain.c: 87:     { cnt = ((TMR1H << 8) | TMR1L);
   276  000806  50CE               	movf	206,w,c	;volatile
   277  000808  CFCF F011          	movff	4047,??_main	;volatile
   278  00080C  6A12               	clrf	(??_main+1)^0,c
   279  00080E  C011  F012         	movff	??_main,??_main+1
   280  000812  6A11               	clrf	??_main^0,c
   281  000814  1011               	iorwf	??_main^0,w,c
   282  000816  6E13               	movwf	main@cnt^0,c
   283  000818  5012               	movf	(??_main+1)^0,w,c
   284  00081A  6E14               	movwf	(main@cnt+1)^0,c
   285  00081C                     
   286                           ;newmain.c: 88:         lcd_command(0xc0);
   287  00081C  0EC0               	movlw	192
   288  00081E  EC76  F004         	call	_lcd_command
   289  000822                     
   290                           ;newmain.c: 89:         lcd_number(cnt);
   291  000822  C013  F009         	movff	main@cnt,lcd_number@num
   292  000826  C014  F00A         	movff	main@cnt+1,lcd_number@num+1
   293  00082A  EC08  F003         	call	_lcd_number	;wreg free
   294  00082E  EF03  F004         	goto	l983
   295  000832  EF00  F000         	goto	start
   296  000836                     __end_of_main:
   297                           	callstack 0
   298                           
   299 ;; *************** function _lcd_string *****************
   300 ;; Defined at:
   301 ;;		line 32 in file "../Code/Lcd.X/MyLcd16.c"
   302 ;; Parameters:    Size  Location     Type
   303 ;;  str             2    4[COMRAM] PTR unsigned char 
   304 ;;		 -> STR_1(13), 
   305 ;; Auto vars:     Size  Location     Type
   306 ;;  i               2    8[COMRAM] int 
   307 ;; Return value:  Size  Location     Type
   308 ;;                  1    wreg      void 
   309 ;; Registers used:
   310 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   311 ;; Tracked objects:
   312 ;;		On entry : 0/0
   313 ;;		On exit  : 0/0
   314 ;;		Unchanged: 0/0
   315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   316 ;;      Params:         2       0       0       0       0       0       0
   317 ;;      Locals:         2       0       0       0       0       0       0
   318 ;;      Temps:          2       0       0       0       0       0       0
   319 ;;      Totals:         6       0       0       0       0       0       0
   320 ;;Total ram usage:        6 bytes
   321 ;; Hardware stack levels used: 1
   322 ;; Hardware stack levels required when called: 1
   323 ;; This function calls:
   324 ;;		_lcd_char
   325 ;;		_strlen
   326 ;; This function is called by:
   327 ;;		_main
   328 ;; This function uses a non-reentrant model
   329 ;;
   330                           
   331                           	psect	text1
   332  000836                     __ptext1:
   333                           	callstack 0
   334  000836                     _lcd_string:
   335                           	callstack 29
   336  000836                     
   337                           ;../Code/Lcd.X/MyLcd16.c: 32: void lcd_string(char *str);../Code/Lcd.X/MyLcd16.c: 33: {;
      +                          ../Code/Lcd.X/MyLcd16.c: 34:  for(int i=0; i<strlen(str); i++)
   338  000836  0E00               	movlw	0
   339  000838  6E0A               	movwf	(lcd_string@i+1)^0,c
   340  00083A  0E00               	movlw	0
   341  00083C  6E09               	movwf	lcd_string@i^0,c
   342  00083E  EF31  F004         	goto	l969
   343  000842                     l965:
   344                           
   345                           ;../Code/Lcd.X/MyLcd16.c: 35:  {;../Code/Lcd.X/MyLcd16.c: 36:   lcd_char(str[i]);
   346  000842  5009               	movf	lcd_string@i^0,w,c
   347  000844  2405               	addwf	lcd_string@str^0,w,c
   348  000846  6E07               	movwf	??_lcd_string^0,c
   349  000848  500A               	movf	(lcd_string@i+1)^0,w,c
   350  00084A  2006               	addwfc	(lcd_string@str+1)^0,w,c
   351  00084C  6E08               	movwf	(??_lcd_string+1)^0,c
   352  00084E  C007  FFF6         	movff	??_lcd_string,tblptrl
   353  000852  C008  FFF7         	movff	??_lcd_string+1,tblptrh
   354  000856                     	if	0	;tblptru may be non-zero
   355  000856                     	endif
   356  000856                     	if	0	;tblptru may be non-zero
   357  000856                     	endif
   358  000856  0008               	tblrd		*
   359  000858  50F5               	movf	tablat,w,c
   360  00085A  EC60  F004         	call	_lcd_char
   361  00085E                     
   362                           ;../Code/Lcd.X/MyLcd16.c: 37:  }
   363  00085E  4A09               	infsnz	lcd_string@i^0,f,c
   364  000860  2A0A               	incf	(lcd_string@i+1)^0,f,c
   365  000862                     l969:
   366  000862  C005  F001         	movff	lcd_string@str,strlen@s
   367  000866  C006  F002         	movff	lcd_string@str+1,strlen@s+1
   368  00086A  EC43  F004         	call	_strlen	;wreg free
   369  00086E  5001               	movf	?_strlen^0,w,c
   370  000870  5C09               	subwf	lcd_string@i^0,w,c
   371  000872  5002               	movf	(?_strlen+1)^0,w,c
   372  000874  580A               	subwfb	(lcd_string@i+1)^0,w,c
   373  000876  A0D8               	btfss	status,0,c
   374  000878  EF40  F004         	goto	u221
   375  00087C  EF42  F004         	goto	u220
   376  000880                     u221:
   377  000880  EF21  F004         	goto	l965
   378  000884                     u220:
   379  000884  0012               	return		;funcret
   380  000886                     __end_of_lcd_string:
   381                           	callstack 0
   382                           
   383 ;; *************** function _strlen *****************
   384 ;; Defined at:
   385 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
   386 ;; Parameters:    Size  Location     Type
   387 ;;  s               2    0[COMRAM] PTR const unsigned char 
   388 ;;		 -> STR_1(13), 
   389 ;; Auto vars:     Size  Location     Type
   390 ;;  a               2    2[COMRAM] PTR const unsigned char 
   391 ;;		 -> STR_1(13), 
   392 ;; Return value:  Size  Location     Type
   393 ;;                  2    0[COMRAM] unsigned int 
   394 ;; Registers used:
   395 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   396 ;; Tracked objects:
   397 ;;		On entry : 0/0
   398 ;;		On exit  : 0/0
   399 ;;		Unchanged: 0/0
   400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   401 ;;      Params:         2       0       0       0       0       0       0
   402 ;;      Locals:         2       0       0       0       0       0       0
   403 ;;      Temps:          0       0       0       0       0       0       0
   404 ;;      Totals:         4       0       0       0       0       0       0
   405 ;;Total ram usage:        4 bytes
   406 ;; Hardware stack levels used: 1
   407 ;; This function calls:
   408 ;;		Nothing
   409 ;; This function is called by:
   410 ;;		_lcd_string
   411 ;; This function uses a non-reentrant model
   412 ;;
   413                           
   414                           	psect	text2
   415  000886                     __ptext2:
   416                           	callstack 0
   417  000886                     _strlen:
   418                           	callstack 29
   419  000886  C001  F003         	movff	strlen@s,strlen@a
   420  00088A  C002  F004         	movff	strlen@s+1,strlen@a+1
   421  00088E  EF4B  F004         	goto	l885
   422  000892                     l883:
   423  000892  4A01               	infsnz	strlen@s^0,f,c
   424  000894  2A02               	incf	(strlen@s+1)^0,f,c
   425  000896                     l885:
   426  000896  C001  FFF6         	movff	strlen@s,tblptrl
   427  00089A  C002  FFF7         	movff	strlen@s+1,tblptrh
   428  00089E                     	if	0	;tblptru may be non-zero
   429  00089E                     	endif
   430  00089E                     	if	0	;tblptru may be non-zero
   431  00089E                     	endif
   432  00089E  0008               	tblrd		*
   433  0008A0  50F5               	movf	tablat,w,c
   434  0008A2  0900               	iorlw	0
   435  0008A4  A4D8               	btfss	status,2,c
   436  0008A6  EF57  F004         	goto	u121
   437  0008AA  EF59  F004         	goto	u120
   438  0008AE                     u121:
   439  0008AE  EF49  F004         	goto	l883
   440  0008B2                     u120:
   441  0008B2  5003               	movf	strlen@a^0,w,c
   442  0008B4  5C01               	subwf	strlen@s^0,w,c
   443  0008B6  6E01               	movwf	?_strlen^0,c
   444  0008B8  5004               	movf	(strlen@a+1)^0,w,c
   445  0008BA  5802               	subwfb	(strlen@s+1)^0,w,c
   446  0008BC  6E02               	movwf	(?_strlen+1)^0,c
   447  0008BE  0012               	return		;funcret
   448  0008C0                     __end_of_strlen:
   449                           	callstack 0
   450                           
   451 ;; *************** function _lcd_number *****************
   452 ;; Defined at:
   453 ;;		line 40 in file "../Code/Lcd.X/MyLcd16.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;  num             2    8[COMRAM] int 
   456 ;; Auto vars:     Size  Location     Type
   457 ;;  num_div         2   14[COMRAM] int 
   458 ;;  num_test        2   12[COMRAM] int 
   459 ;;  num_display     2   10[COMRAM] int 
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   469 ;;      Params:         2       0       0       0       0       0       0
   470 ;;      Locals:         6       0       0       0       0       0       0
   471 ;;      Temps:          0       0       0       0       0       0       0
   472 ;;      Totals:         8       0       0       0       0       0       0
   473 ;;Total ram usage:        8 bytes
   474 ;; Hardware stack levels used: 1
   475 ;; Hardware stack levels required when called: 1
   476 ;; This function calls:
   477 ;;		___awdiv
   478 ;;		___wmul
   479 ;;		_lcd_char
   480 ;; This function is called by:
   481 ;;		_main
   482 ;; This function uses a non-reentrant model
   483 ;;
   484                           
   485                           	psect	text3
   486  000610                     __ptext3:
   487                           	callstack 0
   488  000610                     _lcd_number:
   489                           	callstack 29
   490  000610                     
   491                           ;../Code/Lcd.X/MyLcd16.c: 40: void lcd_number(int num);../Code/Lcd.X/MyLcd16.c: 41: {;..
      +                          /Code/Lcd.X/MyLcd16.c: 42:     int num_div = 10000;
   492  000610  0E27               	movlw	39
   493  000612  6E10               	movwf	(lcd_number@num_div+1)^0,c
   494  000614  0E10               	movlw	16
   495  000616  6E0F               	movwf	lcd_number@num_div^0,c
   496  000618                     
   497                           ;../Code/Lcd.X/MyLcd16.c: 43:     int num_test = num;
   498  000618  C009  F00D         	movff	lcd_number@num,lcd_number@num_test
   499  00061C  C00A  F00E         	movff	lcd_number@num+1,lcd_number@num_test+1
   500  000620                     
   501                           ;../Code/Lcd.X/MyLcd16.c: 46:     if (num != 0) while (num_test/num_div <= 0 )
   502  000620  5009               	movf	lcd_number@num^0,w,c
   503  000622  100A               	iorwf	(lcd_number@num+1)^0,w,c
   504  000624  B4D8               	btfsc	status,2,c
   505  000626  EF17  F003         	goto	u191
   506  00062A  EF19  F003         	goto	u190
   507  00062E                     u191:
   508  00062E  EF42  F003         	goto	l951
   509  000632                     u190:
   510  000632  EF29  F003         	goto	l57
   511  000636                     l949:
   512                           
   513                           ;../Code/Lcd.X/MyLcd16.c: 47:     {;../Code/Lcd.X/MyLcd16.c: 48:         num_div /= 10;
   514  000636  C00F  F001         	movff	lcd_number@num_div,___awdiv@dividend
   515  00063A  C010  F002         	movff	lcd_number@num_div+1,___awdiv@dividend+1
   516  00063E  0E00               	movlw	0
   517  000640  6E04               	movwf	(___awdiv@divisor+1)^0,c
   518  000642  0E0A               	movlw	10
   519  000644  6E03               	movwf	___awdiv@divisor^0,c
   520  000646  EC84  F003         	call	___awdiv	;wreg free
   521  00064A  C001  F00F         	movff	?___awdiv,lcd_number@num_div
   522  00064E  C002  F010         	movff	?___awdiv+1,lcd_number@num_div+1
   523  000652                     l57:
   524                           
   525                           ;../Code/Lcd.X/MyLcd16.c: 46:     if (num != 0) while (num_test/num_div <= 0 )
   526  000652  C00D  F001         	movff	lcd_number@num_test,___awdiv@dividend
   527  000656  C00E  F002         	movff	lcd_number@num_test+1,___awdiv@dividend+1
   528  00065A  C00F  F003         	movff	lcd_number@num_div,___awdiv@divisor
   529  00065E  C010  F004         	movff	lcd_number@num_div+1,___awdiv@divisor+1
   530  000662  EC84  F003         	call	___awdiv	;wreg free
   531  000666  BE02               	btfsc	(?___awdiv+1)^0,7,c
   532  000668  EF3E  F003         	goto	u201
   533  00066C  5002               	movf	(?___awdiv+1)^0,w,c
   534  00066E  E108               	bnz	u200
   535  000670  0401               	decf	?___awdiv^0,w,c
   536  000672  A0D8               	btfss	status,0,c
   537  000674  EF3E  F003         	goto	u201
   538  000678  EF40  F003         	goto	u200
   539  00067C                     u201:
   540  00067C  EF1B  F003         	goto	l949
   541  000680                     u200:
   542  000680  EF46  F003         	goto	l953
   543  000684                     l951:
   544  000684  0E00               	movlw	0
   545  000686  6E10               	movwf	(lcd_number@num_div+1)^0,c
   546  000688  0E01               	movlw	1
   547  00068A  6E0F               	movwf	lcd_number@num_div^0,c
   548  00068C                     l953:
   549                           
   550                           ;../Code/Lcd.X/MyLcd16.c: 53:     {;../Code/Lcd.X/MyLcd16.c: 54:         num_display = n
      +                          um_test/num_div;
   551  00068C  C00D  F001         	movff	lcd_number@num_test,___awdiv@dividend
   552  000690  C00E  F002         	movff	lcd_number@num_test+1,___awdiv@dividend+1
   553  000694  C00F  F003         	movff	lcd_number@num_div,___awdiv@divisor
   554  000698  C010  F004         	movff	lcd_number@num_div+1,___awdiv@divisor+1
   555  00069C  EC84  F003         	call	___awdiv	;wreg free
   556  0006A0  C001  F00B         	movff	?___awdiv,lcd_number@num_display
   557  0006A4  C002  F00C         	movff	?___awdiv+1,lcd_number@num_display+1
   558  0006A8                     
   559                           ;../Code/Lcd.X/MyLcd16.c: 55:         lcd_char(num_display + 48U);
   560  0006A8  500B               	movf	lcd_number@num_display^0,w,c
   561  0006AA  0F30               	addlw	48
   562  0006AC  EC60  F004         	call	_lcd_char
   563  0006B0                     
   564                           ;../Code/Lcd.X/MyLcd16.c: 56:         num_test = num_test - num_div*num_display;
   565  0006B0  C00F  F001         	movff	lcd_number@num_div,___wmul@multiplier
   566  0006B4  C010  F002         	movff	lcd_number@num_div+1,___wmul@multiplier+1
   567  0006B8  C00B  F003         	movff	lcd_number@num_display,___wmul@multiplicand
   568  0006BC  C00C  F004         	movff	lcd_number@num_display+1,___wmul@multiplicand+1
   569  0006C0  EC8C  F004         	call	___wmul	;wreg free
   570  0006C4  5001               	movf	?___wmul^0,w,c
   571  0006C6  5C0D               	subwf	lcd_number@num_test^0,w,c
   572  0006C8  6E0D               	movwf	lcd_number@num_test^0,c
   573  0006CA  5002               	movf	(?___wmul+1)^0,w,c
   574  0006CC  580E               	subwfb	(lcd_number@num_test+1)^0,w,c
   575  0006CE  6E0E               	movwf	(lcd_number@num_test+1)^0,c
   576  0006D0                     
   577                           ;../Code/Lcd.X/MyLcd16.c: 57:         num_div /= 10;
   578  0006D0  C00F  F001         	movff	lcd_number@num_div,___awdiv@dividend
   579  0006D4  C010  F002         	movff	lcd_number@num_div+1,___awdiv@dividend+1
   580  0006D8  0E00               	movlw	0
   581  0006DA  6E04               	movwf	(___awdiv@divisor+1)^0,c
   582  0006DC  0E0A               	movlw	10
   583  0006DE  6E03               	movwf	___awdiv@divisor^0,c
   584  0006E0  EC84  F003         	call	___awdiv	;wreg free
   585  0006E4  C001  F00F         	movff	?___awdiv,lcd_number@num_div
   586  0006E8  C002  F010         	movff	?___awdiv+1,lcd_number@num_div+1
   587  0006EC                     
   588                           ;../Code/Lcd.X/MyLcd16.c: 58:     }
   589  0006EC  BE10               	btfsc	(lcd_number@num_div+1)^0,7,c
   590  0006EE  EF83  F003         	goto	u210
   591  0006F2  5010               	movf	(lcd_number@num_div+1)^0,w,c
   592  0006F4  E106               	bnz	u211
   593  0006F6  040F               	decf	lcd_number@num_div^0,w,c
   594  0006F8  B0D8               	btfsc	status,0,c
   595  0006FA  EF81  F003         	goto	u211
   596  0006FE  EF83  F003         	goto	u210
   597  000702                     u211:
   598  000702  EF46  F003         	goto	l953
   599  000706                     u210:
   600  000706  0012               	return		;funcret
   601  000708                     __end_of_lcd_number:
   602                           	callstack 0
   603                           
   604 ;; *************** function _lcd_char *****************
   605 ;; Defined at:
   606 ;;		line 20 in file "../Code/Lcd.X/MyLcd16.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;  data            1    wreg     unsigned char 
   609 ;; Auto vars:     Size  Location     Type
   610 ;;  data            1    1[COMRAM] unsigned char 
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, status,2, status,0
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   620 ;;      Params:         0       0       0       0       0       0       0
   621 ;;      Locals:         1       0       0       0       0       0       0
   622 ;;      Temps:          1       0       0       0       0       0       0
   623 ;;      Totals:         2       0       0       0       0       0       0
   624 ;;Total ram usage:        2 bytes
   625 ;; Hardware stack levels used: 1
   626 ;; This function calls:
   627 ;;		Nothing
   628 ;; This function is called by:
   629 ;;		_lcd_string
   630 ;;		_lcd_number
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           	psect	text4
   635  0008C0                     __ptext4:
   636                           	callstack 0
   637  0008C0                     _lcd_char:
   638                           	callstack 29
   639                           
   640                           ;incstack = 0
   641                           ;lcd_char@data stored from wreg
   642  0008C0  6E02               	movwf	lcd_char@data^0,c
   643  0008C2                     
   644                           ;../Code/Lcd.X/MyLcd16.c: 20: void lcd_char(char data);../Code/Lcd.X/MyLcd16.c: 21: {;..
      +                          /Code/Lcd.X/MyLcd16.c: 22:     PORTC &= ~(1<<1);
   645  0008C2  9282               	bcf	130,1,c	;volatile
   646                           
   647                           ;../Code/Lcd.X/MyLcd16.c: 23:  PORTC |= (1<<3);
   648  0008C4  8682               	bsf	130,3,c	;volatile
   649  0008C6                     
   650                           ;../Code/Lcd.X/MyLcd16.c: 24:  PORTD = data;
   651  0008C6  C002  FF83         	movff	lcd_char@data,3971	;volatile
   652  0008CA                     
   653                           ;../Code/Lcd.X/MyLcd16.c: 27:  PORTC |= (1<<2);
   654  0008CA  8482               	bsf	130,2,c	;volatile
   655  0008CC                     
   656                           ;../Code/Lcd.X/MyLcd16.c: 28:  _delay((unsigned long)((1)*(8000000/4000.0)));
   657  0008CC  0E03               	movlw	3
   658  0008CE  6E01               	movwf	??_lcd_char^0,c
   659  0008D0  0E98               	movlw	152
   660  0008D2                     u237:
   661  0008D2  2EE8               	decfsz	wreg,f,c
   662  0008D4  D7FE               	bra	u237
   663  0008D6  2E01               	decfsz	??_lcd_char^0,f,c
   664  0008D8  D7FC               	bra	u237
   665  0008DA                     
   666                           ;../Code/Lcd.X/MyLcd16.c: 29:     PORTC &= ~(1<<2);
   667  0008DA  9482               	bcf	130,2,c	;volatile
   668  0008DC                     
   669                           ;../Code/Lcd.X/MyLcd16.c: 30:  _delay((unsigned long)((3)*(8000000/4000.0)));
   670  0008DC  0E08               	movlw	8
   671  0008DE  6E01               	movwf	??_lcd_char^0,c
   672  0008E0  0ECA               	movlw	202
   673  0008E2                     u247:
   674  0008E2  2EE8               	decfsz	wreg,f,c
   675  0008E4  D7FE               	bra	u247
   676  0008E6  2E01               	decfsz	??_lcd_char^0,f,c
   677  0008E8  D7FC               	bra	u247
   678  0008EA  0012               	return		;funcret
   679  0008EC                     __end_of_lcd_char:
   680                           	callstack 0
   681                           
   682 ;; *************** function ___wmul *****************
   683 ;; Defined at:
   684 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;  multiplier      2    0[COMRAM] unsigned int 
   687 ;;  multiplicand    2    2[COMRAM] unsigned int 
   688 ;; Auto vars:     Size  Location     Type
   689 ;;  product         2    4[COMRAM] unsigned int 
   690 ;; Return value:  Size  Location     Type
   691 ;;                  2    0[COMRAM] unsigned int 
   692 ;; Registers used:
   693 ;;		wreg, status,2, status,0, prodl, prodh
   694 ;; Tracked objects:
   695 ;;		On entry : 0/0
   696 ;;		On exit  : 0/0
   697 ;;		Unchanged: 0/0
   698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   699 ;;      Params:         4       0       0       0       0       0       0
   700 ;;      Locals:         2       0       0       0       0       0       0
   701 ;;      Temps:          0       0       0       0       0       0       0
   702 ;;      Totals:         6       0       0       0       0       0       0
   703 ;;Total ram usage:        6 bytes
   704 ;; Hardware stack levels used: 1
   705 ;; This function calls:
   706 ;;		Nothing
   707 ;; This function is called by:
   708 ;;		_lcd_number
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           	psect	text5
   713  000918                     __ptext5:
   714                           	callstack 0
   715  000918                     ___wmul:
   716                           	callstack 29
   717  000918  5001               	movf	___wmul@multiplier^0,w,c
   718  00091A  0203               	mulwf	___wmul@multiplicand^0,c
   719  00091C  CFF3 F005          	movff	prodl,___wmul@product
   720  000920  CFF4 F006          	movff	prodh,___wmul@product+1
   721  000924  5001               	movf	___wmul@multiplier^0,w,c
   722  000926  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   723  000928  50F3               	movf	243,w,c
   724  00092A  2606               	addwf	(___wmul@product+1)^0,f,c
   725  00092C  5002               	movf	(___wmul@multiplier+1)^0,w,c
   726  00092E  0203               	mulwf	___wmul@multiplicand^0,c
   727  000930  50F3               	movf	243,w,c
   728  000932  2606               	addwf	(___wmul@product+1)^0,f,c
   729  000934  C005  F001         	movff	___wmul@product,?___wmul
   730  000938  C006  F002         	movff	___wmul@product+1,?___wmul+1
   731  00093C  0012               	return		;funcret
   732  00093E                     __end_of___wmul:
   733                           	callstack 0
   734                           
   735 ;; *************** function ___awdiv *****************
   736 ;; Defined at:
   737 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;  dividend        2    0[COMRAM] int 
   740 ;;  divisor         2    2[COMRAM] int 
   741 ;; Auto vars:     Size  Location     Type
   742 ;;  quotient        2    6[COMRAM] int 
   743 ;;  sign            1    5[COMRAM] unsigned char 
   744 ;;  counter         1    4[COMRAM] unsigned char 
   745 ;; Return value:  Size  Location     Type
   746 ;;                  2    0[COMRAM] int 
   747 ;; Registers used:
   748 ;;		wreg, status,2, status,0
   749 ;; Tracked objects:
   750 ;;		On entry : 0/0
   751 ;;		On exit  : 0/0
   752 ;;		Unchanged: 0/0
   753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   754 ;;      Params:         4       0       0       0       0       0       0
   755 ;;      Locals:         4       0       0       0       0       0       0
   756 ;;      Temps:          0       0       0       0       0       0       0
   757 ;;      Totals:         8       0       0       0       0       0       0
   758 ;;Total ram usage:        8 bytes
   759 ;; Hardware stack levels used: 1
   760 ;; This function calls:
   761 ;;		Nothing
   762 ;; This function is called by:
   763 ;;		_lcd_number
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           	psect	text6
   768  000708                     __ptext6:
   769                           	callstack 0
   770  000708                     ___awdiv:
   771                           	callstack 29
   772  000708  0E00               	movlw	0
   773  00070A  6E06               	movwf	___awdiv@sign^0,c
   774  00070C  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   775  00070E  EF8D  F003         	goto	u130
   776  000712  EF8B  F003         	goto	u131
   777  000716                     u131:
   778  000716  EF93  F003         	goto	l905
   779  00071A                     u130:
   780  00071A  6C03               	negf	___awdiv@divisor^0,c
   781  00071C  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   782  00071E  B0D8               	btfsc	status,0,c
   783  000720  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   784  000722  0E01               	movlw	1
   785  000724  6E06               	movwf	___awdiv@sign^0,c
   786  000726                     l905:
   787  000726  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   788  000728  EF9A  F003         	goto	u140
   789  00072C  EF98  F003         	goto	u141
   790  000730                     u141:
   791  000730  EFA0  F003         	goto	l911
   792  000734                     u140:
   793  000734  6C01               	negf	___awdiv@dividend^0,c
   794  000736  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   795  000738  B0D8               	btfsc	status,0,c
   796  00073A  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   797  00073C  0E01               	movlw	1
   798  00073E  1A06               	xorwf	___awdiv@sign^0,f,c
   799  000740                     l911:
   800  000740  0E00               	movlw	0
   801  000742  6E08               	movwf	(___awdiv@quotient+1)^0,c
   802  000744  0E00               	movlw	0
   803  000746  6E07               	movwf	___awdiv@quotient^0,c
   804  000748  5003               	movf	___awdiv@divisor^0,w,c
   805  00074A  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   806  00074C  B4D8               	btfsc	status,2,c
   807  00074E  EFAB  F003         	goto	u151
   808  000752  EFAD  F003         	goto	u150
   809  000756                     u151:
   810  000756  EFD5  F003         	goto	l933
   811  00075A                     u150:
   812  00075A  0E01               	movlw	1
   813  00075C  6E05               	movwf	___awdiv@counter^0,c
   814  00075E  EFB5  F003         	goto	l919
   815  000762                     l917:
   816  000762  90D8               	bcf	status,0,c
   817  000764  3603               	rlcf	___awdiv@divisor^0,f,c
   818  000766  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   819  000768  2A05               	incf	___awdiv@counter^0,f,c
   820  00076A                     l919:
   821  00076A  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   822  00076C  EFBA  F003         	goto	u161
   823  000770  EFBC  F003         	goto	u160
   824  000774                     u161:
   825  000774  EFB1  F003         	goto	l917
   826  000778                     u160:
   827  000778                     l921:
   828  000778  90D8               	bcf	status,0,c
   829  00077A  3607               	rlcf	___awdiv@quotient^0,f,c
   830  00077C  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   831  00077E  5003               	movf	___awdiv@divisor^0,w,c
   832  000780  5C01               	subwf	___awdiv@dividend^0,w,c
   833  000782  5004               	movf	(___awdiv@divisor+1)^0,w,c
   834  000784  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   835  000786  A0D8               	btfss	status,0,c
   836  000788  EFC8  F003         	goto	u171
   837  00078C  EFCA  F003         	goto	u170
   838  000790                     u171:
   839  000790  EFCF  F003         	goto	l929
   840  000794                     u170:
   841  000794  5003               	movf	___awdiv@divisor^0,w,c
   842  000796  5E01               	subwf	___awdiv@dividend^0,f,c
   843  000798  5004               	movf	(___awdiv@divisor+1)^0,w,c
   844  00079A  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   845  00079C  8007               	bsf	___awdiv@quotient^0,0,c
   846  00079E                     l929:
   847  00079E  90D8               	bcf	status,0,c
   848  0007A0  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   849  0007A2  3203               	rrcf	___awdiv@divisor^0,f,c
   850  0007A4  2E05               	decfsz	___awdiv@counter^0,f,c
   851  0007A6  EFBC  F003         	goto	l921
   852  0007AA                     l933:
   853  0007AA  5006               	movf	___awdiv@sign^0,w,c
   854  0007AC  B4D8               	btfsc	status,2,c
   855  0007AE  EFDB  F003         	goto	u181
   856  0007B2  EFDD  F003         	goto	u180
   857  0007B6                     u181:
   858  0007B6  EFE1  F003         	goto	l937
   859  0007BA                     u180:
   860  0007BA  6C07               	negf	___awdiv@quotient^0,c
   861  0007BC  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   862  0007BE  B0D8               	btfsc	status,0,c
   863  0007C0  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   864  0007C2                     l937:
   865  0007C2  C007  F001         	movff	___awdiv@quotient,?___awdiv
   866  0007C6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   867  0007CA  0012               	return		;funcret
   868  0007CC                     __end_of___awdiv:
   869                           	callstack 0
   870                           
   871 ;; *************** function _lcd_command *****************
   872 ;; Defined at:
   873 ;;		line 6 in file "../Code/Lcd.X/MyLcd16.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  cmnd            1    wreg     unsigned char 
   876 ;; Auto vars:     Size  Location     Type
   877 ;;  cmnd            1    1[COMRAM] unsigned char 
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      void 
   880 ;; Registers used:
   881 ;;		wreg, status,2, status,0
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   887 ;;      Params:         0       0       0       0       0       0       0
   888 ;;      Locals:         1       0       0       0       0       0       0
   889 ;;      Temps:          1       0       0       0       0       0       0
   890 ;;      Totals:         2       0       0       0       0       0       0
   891 ;;Total ram usage:        2 bytes
   892 ;; Hardware stack levels used: 1
   893 ;; This function calls:
   894 ;;		Nothing
   895 ;; This function is called by:
   896 ;;		_main
   897 ;; This function uses a non-reentrant model
   898 ;;
   899                           
   900                           	psect	text7
   901  0008EC                     __ptext7:
   902                           	callstack 0
   903  0008EC                     _lcd_command:
   904                           	callstack 30
   905                           
   906                           ;incstack = 0
   907                           ;lcd_command@cmnd stored from wreg
   908  0008EC  6E02               	movwf	lcd_command@cmnd^0,c
   909  0008EE                     
   910                           ;../Code/Lcd.X/MyLcd16.c: 6: void lcd_command(char cmnd);../Code/Lcd.X/MyLcd16.c: 7: {;.
      +                          ./Code/Lcd.X/MyLcd16.c: 8:  PORTC &= ~(1<<1);
   911  0008EE  9282               	bcf	130,1,c	;volatile
   912                           
   913                           ;../Code/Lcd.X/MyLcd16.c: 9:  PORTC &= ~(1<<3);
   914  0008F0  9682               	bcf	130,3,c	;volatile
   915  0008F2                     
   916                           ;../Code/Lcd.X/MyLcd16.c: 11:  PORTD = cmnd;
   917  0008F2  C002  FF83         	movff	lcd_command@cmnd,3971	;volatile
   918  0008F6                     
   919                           ;../Code/Lcd.X/MyLcd16.c: 14:  PORTC |= (1<<2);
   920  0008F6  8482               	bsf	130,2,c	;volatile
   921  0008F8                     
   922                           ;../Code/Lcd.X/MyLcd16.c: 15:  _delay((unsigned long)((1)*(8000000/4000.0)));
   923  0008F8  0E03               	movlw	3
   924  0008FA  6E01               	movwf	??_lcd_command^0,c
   925  0008FC  0E98               	movlw	152
   926  0008FE                     u257:
   927  0008FE  2EE8               	decfsz	wreg,f,c
   928  000900  D7FE               	bra	u257
   929  000902  2E01               	decfsz	??_lcd_command^0,f,c
   930  000904  D7FC               	bra	u257
   931  000906                     
   932                           ;../Code/Lcd.X/MyLcd16.c: 16:     PORTC &= ~(1<<2);
   933  000906  9482               	bcf	130,2,c	;volatile
   934  000908                     
   935                           ;../Code/Lcd.X/MyLcd16.c: 17:  _delay((unsigned long)((3)*(8000000/4000.0)));
   936  000908  0E08               	movlw	8
   937  00090A  6E01               	movwf	??_lcd_command^0,c
   938  00090C  0ECA               	movlw	202
   939  00090E                     u267:
   940  00090E  2EE8               	decfsz	wreg,f,c
   941  000910  D7FE               	bra	u267
   942  000912  2E01               	decfsz	??_lcd_command^0,f,c
   943  000914  D7FC               	bra	u267
   944  000916  0012               	return		;funcret
   945  000918                     __end_of_lcd_command:
   946                           	callstack 0
   947                           
   948                           	psect	rparam
   949  0000                     
   950                           	psect	idloc
   951                           
   952                           ;Config register IDLOC0 @ 0x200000
   953                           ;	unspecified, using default values
   954  200000                     	org	2097152
   955  200000  FF                 	db	255
   956                           
   957                           ;Config register IDLOC1 @ 0x200001
   958                           ;	unspecified, using default values
   959  200001                     	org	2097153
   960  200001  FF                 	db	255
   961                           
   962                           ;Config register IDLOC2 @ 0x200002
   963                           ;	unspecified, using default values
   964  200002                     	org	2097154
   965  200002  FF                 	db	255
   966                           
   967                           ;Config register IDLOC3 @ 0x200003
   968                           ;	unspecified, using default values
   969  200003                     	org	2097155
   970  200003  FF                 	db	255
   971                           
   972                           ;Config register IDLOC4 @ 0x200004
   973                           ;	unspecified, using default values
   974  200004                     	org	2097156
   975  200004  FF                 	db	255
   976                           
   977                           ;Config register IDLOC5 @ 0x200005
   978                           ;	unspecified, using default values
   979  200005                     	org	2097157
   980  200005  FF                 	db	255
   981                           
   982                           ;Config register IDLOC6 @ 0x200006
   983                           ;	unspecified, using default values
   984  200006                     	org	2097158
   985  200006  FF                 	db	255
   986                           
   987                           ;Config register IDLOC7 @ 0x200007
   988                           ;	unspecified, using default values
   989  200007                     	org	2097159
   990  200007  FF                 	db	255
   991                           
   992                           	psect	config
   993                           
   994                           ; Padding undefined space
   995  300000                     	org	3145728
   996  300000  FF                 	db	255
   997                           
   998                           ;Config register CONFIG1H @ 0x300001
   999                           ;	Oscillator Selection bits
  1000                           ;	OSC = RCIO6, External RC oscillator, port function on RA6
  1001                           ;	Fail-Safe Clock Monitor Enable bit
  1002                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1003                           ;	Internal/External Oscillator Switchover bit
  1004                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1005  300001                     	org	3145729
  1006  300001  07                 	db	7
  1007                           
  1008                           ;Config register CONFIG2L @ 0x300002
  1009                           ;	Power-up Timer Enable bit
  1010                           ;	PWRT = OFF, PWRT disabled
  1011                           ;	Brown-out Reset Enable bits
  1012                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1013                           ;	Brown Out Reset Voltage bits
  1014                           ;	BORV = 3, Minimum setting
  1015  300002                     	org	3145730
  1016  300002  19                 	db	25
  1017                           
  1018                           ;Config register CONFIG2H @ 0x300003
  1019                           ;	Watchdog Timer Enable bit
  1020                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1021                           ;	Watchdog Timer Postscale Select bits
  1022                           ;	WDTPS = 32768, 1:32768
  1023  300003                     	org	3145731
  1024  300003  1E                 	db	30
  1025                           
  1026                           ; Padding undefined space
  1027  300004                     	org	3145732
  1028  300004  FF                 	db	255
  1029                           
  1030                           ;Config register CONFIG3H @ 0x300005
  1031                           ;	CCP2 MUX bit
  1032                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1033                           ;	PORTB A/D Enable bit
  1034                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1035                           ;	Low-Power Timer1 Oscillator Enable bit
  1036                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1037                           ;	MCLR Pin Enable bit
  1038                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  1039  300005                     	org	3145733
  1040  300005  01                 	db	1
  1041                           
  1042                           ;Config register CONFIG4L @ 0x300006
  1043                           ;	Stack Full/Underflow Reset Enable bit
  1044                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1045                           ;	Single-Supply ICSP Enable bit
  1046                           ;	LVP = OFF, Single-Supply ICSP disabled
  1047                           ;	Extended Instruction Set Enable bit
  1048                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1049                           ;	Background Debugger Enable bit
  1050                           ;	DEBUG = 0x1, unprogrammed default
  1051  300006                     	org	3145734
  1052  300006  80                 	db	128
  1053                           
  1054                           ; Padding undefined space
  1055  300007                     	org	3145735
  1056  300007  FF                 	db	255
  1057                           
  1058                           ;Config register CONFIG5L @ 0x300008
  1059                           ;	Code Protection bit
  1060                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1061                           ;	Code Protection bit
  1062                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1063                           ;	Code Protection bit
  1064                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1065                           ;	Code Protection bit
  1066                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1067  300008                     	org	3145736
  1068  300008  0F                 	db	15
  1069                           
  1070                           ;Config register CONFIG5H @ 0x300009
  1071                           ;	Boot Block Code Protection bit
  1072                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1073                           ;	Data EEPROM Code Protection bit
  1074                           ;	CPD = OFF, Data EEPROM not code-protected
  1075  300009                     	org	3145737
  1076  300009  C0                 	db	192
  1077                           
  1078                           ;Config register CONFIG6L @ 0x30000A
  1079                           ;	Write Protection bit
  1080                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1081                           ;	Write Protection bit
  1082                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1083                           ;	Write Protection bit
  1084                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1085                           ;	Write Protection bit
  1086                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1087  30000A                     	org	3145738
  1088  30000A  0F                 	db	15
  1089                           
  1090                           ;Config register CONFIG6H @ 0x30000B
  1091                           ;	Configuration Register Write Protection bit
  1092                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1093                           ;	Boot Block Write Protection bit
  1094                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1095                           ;	Data EEPROM Write Protection bit
  1096                           ;	WRTD = OFF, Data EEPROM not write-protected
  1097  30000B                     	org	3145739
  1098  30000B  E0                 	db	224
  1099                           
  1100                           ;Config register CONFIG7L @ 0x30000C
  1101                           ;	Table Read Protection bit
  1102                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1103                           ;	Table Read Protection bit
  1104                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1105                           ;	Table Read Protection bit
  1106                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1107                           ;	Table Read Protection bit
  1108                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1109  30000C                     	org	3145740
  1110  30000C  0F                 	db	15
  1111                           
  1112                           ;Config register CONFIG7H @ 0x30000D
  1113                           ;	Boot Block Table Read Protection bit
  1114                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1115  30000D                     	org	3145741
  1116  30000D  40                 	db	64
  1117                           tosu	equ	0xFFF
  1118                           tosh	equ	0xFFE
  1119                           tosl	equ	0xFFD
  1120                           stkptr	equ	0xFFC
  1121                           pclatu	equ	0xFFB
  1122                           pclath	equ	0xFFA
  1123                           pcl	equ	0xFF9
  1124                           tblptru	equ	0xFF8
  1125                           tblptrh	equ	0xFF7
  1126                           tblptrl	equ	0xFF6
  1127                           tablat	equ	0xFF5
  1128                           prodh	equ	0xFF4
  1129                           prodl	equ	0xFF3
  1130                           indf0	equ	0xFEF
  1131                           postinc0	equ	0xFEE
  1132                           postdec0	equ	0xFED
  1133                           preinc0	equ	0xFEC
  1134                           plusw0	equ	0xFEB
  1135                           fsr0h	equ	0xFEA
  1136                           fsr0l	equ	0xFE9
  1137                           wreg	equ	0xFE8
  1138                           indf1	equ	0xFE7
  1139                           postinc1	equ	0xFE6
  1140                           postdec1	equ	0xFE5
  1141                           preinc1	equ	0xFE4
  1142                           plusw1	equ	0xFE3
  1143                           fsr1h	equ	0xFE2
  1144                           fsr1l	equ	0xFE1
  1145                           bsr	equ	0xFE0
  1146                           indf2	equ	0xFDF
  1147                           postinc2	equ	0xFDE
  1148                           postdec2	equ	0xFDD
  1149                           preinc2	equ	0xFDC
  1150                           plusw2	equ	0xFDB
  1151                           fsr2h	equ	0xFDA
  1152                           fsr2l	equ	0xFD9
  1153                           status	equ	0xFD8

Data Sizes:
    Strings     13
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     20      20
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    lcd_string@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 


Critical Paths under _main in COMRAM

    _main->_lcd_number
    _lcd_string->_strlen
    _lcd_number->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    2066
                                             16 COMRAM     4     4      0
                        _lcd_command
                         _lcd_number
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           6     4      2     347
                                              4 COMRAM     6     4      2
                           _lcd_char
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _lcd_number                                           8     6      2    1680
                                              8 COMRAM     8     6      2
                            ___awdiv
                             ___wmul
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_command                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_command
   _lcd_number
     ___awdiv
     ___wmul
     _lcd_char
   _lcd_string
     _lcd_char
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     14      14       1       15.7%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Apr 01 01:13:07 2021

           lcd_char@data 0002                       l44 0916                       l53 0884  
                     l47 08EA                       l63 0706                       l57 0652  
                     l66 093C             ___awdiv@sign 0006      ___wmul@multiplicand 0003  
                    l297 07CA                      l821 08F6                      l901 071A  
                    l823 08F8                      l911 0740                      l903 0722  
                    l751 08CC                      l743 08BE                      l825 0906  
                    l817 08EE                      l921 0778                      l913 0748  
                    l905 0726                      l753 08DA                      l745 08C2  
                    l827 0908                      l819 08F2                      l931 07A4  
                    l923 077E                      l915 075A                      l907 0734  
                    l755 08DC                      l747 08C6                      l925 0794  
                    l917 0762                      l933 07AA                      l909 073C  
                    l749 08CA                      l941 0610                      l935 07BA  
                    l927 079C                      l919 076A                      l951 0684  
                    l943 0618                      l937 07C2                      l929 079E  
                    l961 06EC                      l953 068C                      l945 0620  
                    l881 0886                      l891 0918                      l955 06A8  
                    l883 0892                      l963 0836                      l971 07CC  
                    l893 0934                      l957 06B0                      l949 0636  
                    l885 0896                      l965 0842                      l981 07FA  
                    l973 07DC                      l959 06D0                      l887 08B2  
                    l967 085E                      l983 0806                      l975 07E2  
                    l897 0708                      l969 0862                      l985 081C  
                    l977 07E8                      l899 070C                      l987 0822  
                    l979 07EE                      u200 0680                      u120 08B2  
                    u201 067C                      u121 08AE                      u130 071A  
                    u210 0706                      u131 0716                      u211 0702  
                    u140 0734                      u220 0884                      u141 0730  
                    u221 0880                      u150 075A                      u151 0756  
                    u160 0778                      u161 0774                      u170 0794  
                    u171 0790                      u180 07BA                      u181 07B6  
                    u237 08D2                      u190 0632                      u247 08E2  
                    u191 062E                      u257 08FE                      u267 090E  
                    wreg 000FE8        lcd_number@num_div 000F                     STR_1 0601  
                   _main 07CC                     prodh 000FF4                     prodl 000FF3  
                   start 0000              lcd_string@i 0009       lcd_number@num_test 000D  
           ___param_bank 000000                    ?_main 0001          __end_of___awdiv 07CC  
        ___awdiv@divisor 0003          ___awdiv@counter 0005                    _TMR1H 000FCF  
                  _TMR1L 000FCE                    _PORTC 000F82                    _PORTD 000F83  
                  _TRISC 000F94                    _TRISD 000F95                    tablat 000FF5  
                  status 000FD8          __initialization 093E             __end_of_main 0836  
                 ??_main 0011            __activetblptr 000001         ___awdiv@dividend 0001  
          lcd_number@num 0009         __end_of_lcd_char 08EC     __size_of_lcd_command 002C  
                 ___wmul 0918                ??___awdiv 0005         ___awdiv@quotient 0007  
                 isa$std 000001                   _strlen 0886             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
          lcd_string@str 0005               __accesstop 0080  __end_of__initialization 093E  
          ___rparam_used 000001           __pcstackCOMRAM 0001          lcd_command@cmnd 0002  
                ?___wmul 0001                  ?_strlen 0001               _lcd_number 0610  
              ?_lcd_char 0001               _lcd_string 0836                  __Hparam 0000  
                __Lparam 0000                  ___awdiv 0708          __size_of___wmul 0026  
           __psmallconst 0600                  __pcinit 093E                  __ramtop 0600  
                __ptext0 07CC                  __ptext1 0836                  __ptext2 0886  
                __ptext3 0610                  __ptext4 08C0                  __ptext5 0918  
                __ptext6 0708                  __ptext7 08EC          __size_of_strlen 003A  
              _T1CONbits 000FCD               ??_lcd_char 0001                  main@cnt 0013  
   end_of_initialization 093E                  strlen@a 0003                  strlen@s 0001  
            ?_lcd_number 0009              ?_lcd_string 0005    lcd_number@num_display 000B  
          ??_lcd_command 0001           __end_of___wmul 093E           __end_of_strlen 08C0  
    start_initialization 093E                 ??___wmul 0005      __size_of_lcd_number 00F8  
    __end_of_lcd_command 0918      __size_of_lcd_string 0050                 ??_strlen 0003  
      __size_of_lcd_char 002C                 ?___awdiv 0001              __smallconst 0600  
         ___wmul@product 0005                 _PIE1bits 000F9D              _lcd_command 08EC  
      ___wmul@multiplier 0001             ??_lcd_number 000B             ??_lcd_string 0007  
               __Hrparam 0000                 __Lrparam 0000             __Lsmallconst 0600  
     __end_of_lcd_number 0708         __size_of___awdiv 00C4       __end_of_lcd_string 0886  
               _lcd_char 08C0            __size_of_main 006A                 isa$xinst 000000  
           ?_lcd_command 0001  
