

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Mar 31 16:58:39 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4520 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _TRISD	set	3989
    56  0000                     _TRISC	set	3988
    57  0000                     _PORTD	set	3971
    58  0000                     _PORTC	set	3970
    59                           
    60                           	psect	smallconst
    61  000600                     __psmallconst:
    62                           	callstack 0
    63  000600  00                 	db	0
    64  000601                     STR_1:
    65  000601  20                 	db	32
    66  000602  63                 	db	99	;'c'
    67  000603  68                 	db	104	;'h'
    68  000604  75                 	db	117	;'u'
    69  000605  63                 	db	99	;'c'
    70  000606  20                 	db	32
    71  000607  6D                 	db	109	;'m'
    72  000608  75                 	db	117	;'u'
    73  000609  6E                 	db	110	;'n'
    74  00060A  67                 	db	103	;'g'
    75  00060B  00                 	db	0
    76  00060C  00                 	db	0	; dummy byte at the end
    77  0000                     
    78                           ; #config settings
    79                           
    80                           	psect	cinit
    81  000988                     __pcinit:
    82                           	callstack 0
    83  000988                     start_initialization:
    84                           	callstack 0
    85  000988                     __initialization:
    86                           	callstack 0
    87  000988                     end_of_initialization:
    88                           	callstack 0
    89  000988                     __end_of__initialization:
    90                           	callstack 0
    91  000988  0E00               	movlw	low (__Lsmallconst shr (0+16))
    92  00098A  6EF8               	movwf	tblptru,c
    93  00098C  0E06               	movlw	high __Lsmallconst
    94  00098E  6EF7               	movwf	tblptrh,c
    95  000990  0100               	movlb	0
    96  000992  EF72  F004         	goto	_main	;jump to C main() function
    97                           
    98                           	psect	cstackCOMRAM
    99  000001                     __pcstackCOMRAM:
   100                           	callstack 0
   101  000001                     ??_lcd_command:
   102  000001                     ??_lcd_char:
   103  000001                     ?_strlen:
   104                           	callstack 0
   105  000001                     ?___wmul:
   106                           	callstack 0
   107  000001                     ?___awdiv:
   108                           	callstack 0
   109  000001                     ___wmul@multiplier:
   110                           	callstack 0
   111  000001                     ___awdiv@dividend:
   112                           	callstack 0
   113  000001                     strlen@s:
   114                           	callstack 0
   115                           
   116                           ; 2 bytes @ 0x0
   117  000001                     	ds	2
   118  000003                     lcd_command@cmnd:
   119                           	callstack 0
   120  000003                     lcd_char@data:
   121                           	callstack 0
   122  000003                     ___wmul@multiplicand:
   123                           	callstack 0
   124  000003                     ___awdiv@divisor:
   125                           	callstack 0
   126  000003                     strlen@a:
   127                           	callstack 0
   128                           
   129                           ; 2 bytes @ 0x2
   130  000003                     	ds	2
   131  000005                     ___awdiv@counter:
   132                           	callstack 0
   133  000005                     lcd_string@str:
   134                           	callstack 0
   135  000005                     ___wmul@product:
   136                           	callstack 0
   137                           
   138                           ; 2 bytes @ 0x4
   139  000005                     	ds	1
   140  000006                     ___awdiv@sign:
   141                           	callstack 0
   142                           
   143                           ; 1 bytes @ 0x5
   144  000006                     	ds	1
   145  000007                     ??_lcd_string:
   146  000007                     ___awdiv@quotient:
   147                           	callstack 0
   148                           
   149                           ; 2 bytes @ 0x6
   150  000007                     	ds	2
   151  000009                     lcd_string@i:
   152                           	callstack 0
   153  000009                     lcd_number@num:
   154                           	callstack 0
   155                           
   156                           ; 2 bytes @ 0x8
   157  000009                     	ds	2
   158  00000B                     lcd_number@num_display:
   159                           	callstack 0
   160                           
   161                           ; 2 bytes @ 0xA
   162  00000B                     	ds	2
   163  00000D                     lcd_number@num_test:
   164                           	callstack 0
   165                           
   166                           ; 2 bytes @ 0xC
   167  00000D                     	ds	2
   168  00000F                     lcd_number@num_div:
   169                           	callstack 0
   170                           
   171                           ; 2 bytes @ 0xE
   172  00000F                     	ds	2
   173  000011                     
   174                           ; 1 bytes @ 0x10
   175 ;;
   176 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   177 ;;
   178 ;; *************** function _main *****************
   179 ;; Defined at:
   180 ;;		line 161 in file "newmain.c"
   181 ;; Parameters:    Size  Location     Type
   182 ;;		None
   183 ;; Auto vars:     Size  Location     Type
   184 ;;  x               2    0        int 
   185 ;; Return value:  Size  Location     Type
   186 ;;                  1    wreg      void 
   187 ;; Registers used:
   188 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   189 ;; Tracked objects:
   190 ;;		On entry : 0/0
   191 ;;		On exit  : 0/0
   192 ;;		Unchanged: 0/0
   193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   194 ;;      Params:         0       0       0       0       0       0       0
   195 ;;      Locals:         0       0       0       0       0       0       0
   196 ;;      Temps:          0       0       0       0       0       0       0
   197 ;;      Totals:         0       0       0       0       0       0       0
   198 ;;Total ram usage:        0 bytes
   199 ;; Hardware stack levels required when called: 2
   200 ;; This function calls:
   201 ;;		_lcd_command
   202 ;;		_lcd_number
   203 ;;		_lcd_string
   204 ;; This function is called by:
   205 ;;		Startup code after reset
   206 ;; This function uses a non-reentrant model
   207 ;;
   208                           
   209                           	psect	text0
   210  0008E4                     __ptext0:
   211                           	callstack 0
   212  0008E4                     _main:
   213                           	callstack 29
   214  0008E4                     
   215                           ;newmain.c: 162:     TRISC = 0;
   216  0008E4  0E00               	movlw	0
   217  0008E6  6E94               	movwf	148,c	;volatile
   218                           
   219                           ;newmain.c: 163:     TRISD = 0;
   220  0008E8  0E00               	movlw	0
   221  0008EA  6E95               	movwf	149,c	;volatile
   222                           
   223                           ;newmain.c: 164:     PORTD = 0;
   224  0008EC  0E00               	movlw	0
   225  0008EE  6E83               	movwf	131,c	;volatile
   226                           
   227                           ;newmain.c: 165:     PORTC = 0;
   228  0008F0  0E00               	movlw	0
   229  0008F2  6E82               	movwf	130,c	;volatile
   230  0008F4                     
   231                           ;newmain.c: 166:     lcd_command(0x28);
   232  0008F4  0E28               	movlw	40
   233  0008F6  EC10  F004         	call	_lcd_command
   234  0008FA                     
   235                           ;newmain.c: 167:  lcd_command(0x0c);
   236  0008FA  0E0C               	movlw	12
   237  0008FC  EC10  F004         	call	_lcd_command
   238  000900                     
   239                           ;newmain.c: 168:  lcd_command(0x01);
   240  000900  0E01               	movlw	1
   241  000902  EC10  F004         	call	_lcd_command
   242  000906                     
   243                           ;newmain.c: 170:  lcd_string(" chuc mung");
   244  000906  0E01               	movlw	low STR_1
   245  000908  6E05               	movwf	lcd_string@str^0,c
   246  00090A  0E06               	movlw	high STR_1
   247  00090C  6E06               	movwf	(lcd_string@str+1)^0,c
   248  00090E  EC4A  F004         	call	_lcd_string	;wreg free
   249  000912                     
   250                           ;newmain.c: 171:     lcd_command(0xc0);
   251  000912  0EC0               	movlw	192
   252  000914  EC10  F004         	call	_lcd_command
   253  000918                     
   254                           ;newmain.c: 173:     lcd_number(x);
   255  000918  0E77               	movlw	119
   256  00091A  6E0A               	movwf	(lcd_number@num+1)^0,c
   257  00091C  0E24               	movlw	36
   258  00091E  6E09               	movwf	lcd_number@num^0,c
   259  000920  EC07  F003         	call	_lcd_number	;wreg free
   260  000924  EF00  F000         	goto	start
   261  000928                     __end_of_main:
   262                           	callstack 0
   263                           
   264 ;; *************** function _lcd_string *****************
   265 ;; Defined at:
   266 ;;		line 133 in file "newmain.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;  str             2    4[COMRAM] PTR unsigned char 
   269 ;;		 -> STR_1(11), 
   270 ;; Auto vars:     Size  Location     Type
   271 ;;  i               2    8[COMRAM] int 
   272 ;; Return value:  Size  Location     Type
   273 ;;                  1    wreg      void 
   274 ;; Registers used:
   275 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   276 ;; Tracked objects:
   277 ;;		On entry : 0/0
   278 ;;		On exit  : 0/0
   279 ;;		Unchanged: 0/0
   280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   281 ;;      Params:         2       0       0       0       0       0       0
   282 ;;      Locals:         2       0       0       0       0       0       0
   283 ;;      Temps:          2       0       0       0       0       0       0
   284 ;;      Totals:         6       0       0       0       0       0       0
   285 ;;Total ram usage:        6 bytes
   286 ;; Hardware stack levels used: 1
   287 ;; Hardware stack levels required when called: 1
   288 ;; This function calls:
   289 ;;		_lcd_char
   290 ;;		_strlen
   291 ;; This function is called by:
   292 ;;		_main
   293 ;; This function uses a non-reentrant model
   294 ;;
   295                           
   296                           	psect	text1
   297  000894                     __ptext1:
   298                           	callstack 0
   299  000894                     _lcd_string:
   300                           	callstack 29
   301  000894                     
   302                           ;newmain.c: 133: void lcd_string(char *str);newmain.c: 134: {;newmain.c: 135:  for(int i
      +                          =0; i<strlen(str); i++)
   303  000894  0E00               	movlw	0
   304  000896  6E0A               	movwf	(lcd_string@i+1)^0,c
   305  000898  0E00               	movlw	0
   306  00089A  6E09               	movwf	lcd_string@i^0,c
   307  00089C  EF60  F004         	goto	l925
   308  0008A0                     l921:
   309                           
   310                           ;newmain.c: 136:  {;newmain.c: 137:   lcd_char(str[i]);
   311  0008A0  5009               	movf	lcd_string@i^0,w,c
   312  0008A2  2405               	addwf	lcd_string@str^0,w,c
   313  0008A4  6E07               	movwf	??_lcd_string^0,c
   314  0008A6  500A               	movf	(lcd_string@i+1)^0,w,c
   315  0008A8  2006               	addwfc	(lcd_string@str+1)^0,w,c
   316  0008AA  6E08               	movwf	(??_lcd_string+1)^0,c
   317  0008AC  C007  FFF6         	movff	??_lcd_string,tblptrl
   318  0008B0  C008  FFF7         	movff	??_lcd_string+1,tblptrh
   319  0008B4                     	if	0	;tblptru may be non-zero
   320  0008B4                     	endif
   321  0008B4                     	if	0	;tblptru may be non-zero
   322  0008B4                     	endif
   323  0008B4  0008               	tblrd		*
   324  0008B6  50F5               	movf	tablat,w,c
   325  0008B8  ECD6  F003         	call	_lcd_char
   326  0008BC                     
   327                           ;newmain.c: 138:  }
   328  0008BC  4A09               	infsnz	lcd_string@i^0,f,c
   329  0008BE  2A0A               	incf	(lcd_string@i+1)^0,f,c
   330  0008C0                     l925:
   331  0008C0  C005  F001         	movff	lcd_string@str,strlen@s
   332  0008C4  C006  F002         	movff	lcd_string@str+1,strlen@s+1
   333  0008C8  EC94  F004         	call	_strlen	;wreg free
   334  0008CC  5001               	movf	?_strlen^0,w,c
   335  0008CE  5C09               	subwf	lcd_string@i^0,w,c
   336  0008D0  5002               	movf	(?_strlen+1)^0,w,c
   337  0008D2  580A               	subwfb	(lcd_string@i+1)^0,w,c
   338  0008D4  A0D8               	btfss	status,0,c
   339  0008D6  EF6F  F004         	goto	u181
   340  0008DA  EF71  F004         	goto	u180
   341  0008DE                     u181:
   342  0008DE  EF50  F004         	goto	l921
   343  0008E2                     u180:
   344  0008E2  0012               	return		;funcret
   345  0008E4                     __end_of_lcd_string:
   346                           	callstack 0
   347                           
   348 ;; *************** function _strlen *****************
   349 ;; Defined at:
   350 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
   351 ;; Parameters:    Size  Location     Type
   352 ;;  s               2    0[COMRAM] PTR const unsigned char 
   353 ;;		 -> STR_1(11), 
   354 ;; Auto vars:     Size  Location     Type
   355 ;;  a               2    2[COMRAM] PTR const unsigned char 
   356 ;;		 -> STR_1(11), 
   357 ;; Return value:  Size  Location     Type
   358 ;;                  2    0[COMRAM] unsigned int 
   359 ;; Registers used:
   360 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   361 ;; Tracked objects:
   362 ;;		On entry : 0/0
   363 ;;		On exit  : 0/0
   364 ;;		Unchanged: 0/0
   365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   366 ;;      Params:         2       0       0       0       0       0       0
   367 ;;      Locals:         2       0       0       0       0       0       0
   368 ;;      Temps:          0       0       0       0       0       0       0
   369 ;;      Totals:         4       0       0       0       0       0       0
   370 ;;Total ram usage:        4 bytes
   371 ;; Hardware stack levels used: 1
   372 ;; This function calls:
   373 ;;		Nothing
   374 ;; This function is called by:
   375 ;;		_lcd_string
   376 ;; This function uses a non-reentrant model
   377 ;;
   378                           
   379                           	psect	text2
   380  000928                     __ptext2:
   381                           	callstack 0
   382  000928                     _strlen:
   383                           	callstack 29
   384  000928  C001  F003         	movff	strlen@s,strlen@a
   385  00092C  C002  F004         	movff	strlen@s+1,strlen@a+1
   386  000930  EF9C  F004         	goto	l863
   387  000934                     l861:
   388  000934  4A01               	infsnz	strlen@s^0,f,c
   389  000936  2A02               	incf	(strlen@s+1)^0,f,c
   390  000938                     l863:
   391  000938  C001  FFF6         	movff	strlen@s,tblptrl
   392  00093C  C002  FFF7         	movff	strlen@s+1,tblptrh
   393  000940                     	if	0	;tblptru may be non-zero
   394  000940                     	endif
   395  000940                     	if	0	;tblptru may be non-zero
   396  000940                     	endif
   397  000940  0008               	tblrd		*
   398  000942  50F5               	movf	tablat,w,c
   399  000944  0900               	iorlw	0
   400  000946  A4D8               	btfss	status,2,c
   401  000948  EFA8  F004         	goto	u111
   402  00094C  EFAA  F004         	goto	u110
   403  000950                     u111:
   404  000950  EF9A  F004         	goto	l861
   405  000954                     u110:
   406  000954  5003               	movf	strlen@a^0,w,c
   407  000956  5C01               	subwf	strlen@s^0,w,c
   408  000958  6E01               	movwf	?_strlen^0,c
   409  00095A  5004               	movf	(strlen@a+1)^0,w,c
   410  00095C  5802               	subwfb	(strlen@s+1)^0,w,c
   411  00095E  6E02               	movwf	(?_strlen+1)^0,c
   412  000960  0012               	return		;funcret
   413  000962                     __end_of_strlen:
   414                           	callstack 0
   415                           
   416 ;; *************** function _lcd_number *****************
   417 ;; Defined at:
   418 ;;		line 141 in file "newmain.c"
   419 ;; Parameters:    Size  Location     Type
   420 ;;  num             2    8[COMRAM] int 
   421 ;; Auto vars:     Size  Location     Type
   422 ;;  num_div         2   14[COMRAM] int 
   423 ;;  num_test        2   12[COMRAM] int 
   424 ;;  num_display     2   10[COMRAM] int 
   425 ;; Return value:  Size  Location     Type
   426 ;;                  1    wreg      void 
   427 ;; Registers used:
   428 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   434 ;;      Params:         2       0       0       0       0       0       0
   435 ;;      Locals:         6       0       0       0       0       0       0
   436 ;;      Temps:          0       0       0       0       0       0       0
   437 ;;      Totals:         8       0       0       0       0       0       0
   438 ;;Total ram usage:        8 bytes
   439 ;; Hardware stack levels used: 1
   440 ;; Hardware stack levels required when called: 1
   441 ;; This function calls:
   442 ;;		___awdiv
   443 ;;		___wmul
   444 ;;		_lcd_char
   445 ;; This function is called by:
   446 ;;		_main
   447 ;; This function uses a non-reentrant model
   448 ;;
   449                           
   450                           	psect	text3
   451  00060E                     __ptext3:
   452                           	callstack 0
   453  00060E                     _lcd_number:
   454                           	callstack 29
   455  00060E                     
   456                           ;newmain.c: 141: void lcd_number(int num);newmain.c: 142: {;newmain.c: 143:     int num_
      +                          div = 10000;
   457  00060E  0E27               	movlw	39
   458  000610  6E10               	movwf	(lcd_number@num_div+1)^0,c
   459  000612  0E10               	movlw	16
   460  000614  6E0F               	movwf	lcd_number@num_div^0,c
   461  000616                     
   462                           ;newmain.c: 144:     int num_test = num;
   463  000616  C009  F00D         	movff	lcd_number@num,lcd_number@num_test
   464  00061A  C00A  F00E         	movff	lcd_number@num+1,lcd_number@num_test+1
   465                           
   466                           ;newmain.c: 146:     while (num_test/num_div <= 0 )
   467  00061E  EF1F  F003         	goto	l27
   468  000622                     l931:
   469                           
   470                           ;newmain.c: 147:     {;newmain.c: 148:         num_div /= 10;
   471  000622  C00F  F001         	movff	lcd_number@num_div,___awdiv@dividend
   472  000626  C010  F002         	movff	lcd_number@num_div+1,___awdiv@dividend+1
   473  00062A  0E00               	movlw	0
   474  00062C  6E04               	movwf	(___awdiv@divisor+1)^0,c
   475  00062E  0E0A               	movlw	10
   476  000630  6E03               	movwf	___awdiv@divisor^0,c
   477  000632  EC74  F003         	call	___awdiv	;wreg free
   478  000636  C001  F00F         	movff	?___awdiv,lcd_number@num_div
   479  00063A  C002  F010         	movff	?___awdiv+1,lcd_number@num_div+1
   480  00063E                     l27:
   481                           
   482                           ;newmain.c: 146:     while (num_test/num_div <= 0 )
   483  00063E  C00D  F001         	movff	lcd_number@num_test,___awdiv@dividend
   484  000642  C00E  F002         	movff	lcd_number@num_test+1,___awdiv@dividend+1
   485  000646  C00F  F003         	movff	lcd_number@num_div,___awdiv@divisor
   486  00064A  C010  F004         	movff	lcd_number@num_div+1,___awdiv@divisor+1
   487  00064E  EC74  F003         	call	___awdiv	;wreg free
   488  000652  BE02               	btfsc	(?___awdiv+1)^0,7,c
   489  000654  EF34  F003         	goto	u191
   490  000658  5002               	movf	(?___awdiv+1)^0,w,c
   491  00065A  E108               	bnz	u190
   492  00065C  0401               	decf	?___awdiv^0,w,c
   493  00065E  A0D8               	btfss	status,0,c
   494  000660  EF34  F003         	goto	u191
   495  000664  EF36  F003         	goto	u190
   496  000668                     u191:
   497  000668  EF11  F003         	goto	l931
   498  00066C                     u190:
   499  00066C                     l933:
   500                           
   501                           ;newmain.c: 152:     {;newmain.c: 153:         num_display = num_test/num_div;
   502  00066C  C00D  F001         	movff	lcd_number@num_test,___awdiv@dividend
   503  000670  C00E  F002         	movff	lcd_number@num_test+1,___awdiv@dividend+1
   504  000674  C00F  F003         	movff	lcd_number@num_div,___awdiv@divisor
   505  000678  C010  F004         	movff	lcd_number@num_div+1,___awdiv@divisor+1
   506  00067C  EC74  F003         	call	___awdiv	;wreg free
   507  000680  C001  F00B         	movff	?___awdiv,lcd_number@num_display
   508  000684  C002  F00C         	movff	?___awdiv+1,lcd_number@num_display+1
   509                           
   510                           ;newmain.c: 154:         lcd_char(num_display + 48U);
   511  000688  500B               	movf	lcd_number@num_display^0,w,c
   512  00068A  0F30               	addlw	48
   513  00068C  ECD6  F003         	call	_lcd_char
   514  000690                     
   515                           ;newmain.c: 155:         num_test = num_test - num_div*num_display;
   516  000690  C00F  F001         	movff	lcd_number@num_div,___wmul@multiplier
   517  000694  C010  F002         	movff	lcd_number@num_div+1,___wmul@multiplier+1
   518  000698  C00B  F003         	movff	lcd_number@num_display,___wmul@multiplicand
   519  00069C  C00C  F004         	movff	lcd_number@num_display+1,___wmul@multiplicand+1
   520  0006A0  ECB1  F004         	call	___wmul	;wreg free
   521  0006A4  5001               	movf	?___wmul^0,w,c
   522  0006A6  5C0D               	subwf	lcd_number@num_test^0,w,c
   523  0006A8  6E0D               	movwf	lcd_number@num_test^0,c
   524  0006AA  5002               	movf	(?___wmul+1)^0,w,c
   525  0006AC  580E               	subwfb	(lcd_number@num_test+1)^0,w,c
   526  0006AE  6E0E               	movwf	(lcd_number@num_test+1)^0,c
   527  0006B0                     
   528                           ;newmain.c: 156:         num_div /= 10;
   529  0006B0  C00F  F001         	movff	lcd_number@num_div,___awdiv@dividend
   530  0006B4  C010  F002         	movff	lcd_number@num_div+1,___awdiv@dividend+1
   531  0006B8  0E00               	movlw	0
   532  0006BA  6E04               	movwf	(___awdiv@divisor+1)^0,c
   533  0006BC  0E0A               	movlw	10
   534  0006BE  6E03               	movwf	___awdiv@divisor^0,c
   535  0006C0  EC74  F003         	call	___awdiv	;wreg free
   536  0006C4  C001  F00F         	movff	?___awdiv,lcd_number@num_div
   537  0006C8  C002  F010         	movff	?___awdiv+1,lcd_number@num_div+1
   538  0006CC                     
   539                           ;newmain.c: 157:     }
   540  0006CC  BE10               	btfsc	(lcd_number@num_div+1)^0,7,c
   541  0006CE  EF73  F003         	goto	u200
   542  0006D2  5010               	movf	(lcd_number@num_div+1)^0,w,c
   543  0006D4  E106               	bnz	u201
   544  0006D6  040F               	decf	lcd_number@num_div^0,w,c
   545  0006D8  B0D8               	btfsc	status,0,c
   546  0006DA  EF71  F003         	goto	u201
   547  0006DE  EF73  F003         	goto	u200
   548  0006E2                     u201:
   549  0006E2  EF36  F003         	goto	l933
   550  0006E6                     u200:
   551  0006E6  0012               	return		;funcret
   552  0006E8                     __end_of_lcd_number:
   553                           	callstack 0
   554                           
   555 ;; *************** function _lcd_char *****************
   556 ;; Defined at:
   557 ;;		line 113 in file "newmain.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;  data            1    wreg     unsigned char 
   560 ;; Auto vars:     Size  Location     Type
   561 ;;  data            1    2[COMRAM] unsigned char 
   562 ;; Return value:  Size  Location     Type
   563 ;;                  1    wreg      void 
   564 ;; Registers used:
   565 ;;		wreg, status,2, status,0
   566 ;; Tracked objects:
   567 ;;		On entry : 0/0
   568 ;;		On exit  : 0/0
   569 ;;		Unchanged: 0/0
   570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   571 ;;      Params:         0       0       0       0       0       0       0
   572 ;;      Locals:         1       0       0       0       0       0       0
   573 ;;      Temps:          2       0       0       0       0       0       0
   574 ;;      Totals:         3       0       0       0       0       0       0
   575 ;;Total ram usage:        3 bytes
   576 ;; Hardware stack levels used: 1
   577 ;; This function calls:
   578 ;;		Nothing
   579 ;; This function is called by:
   580 ;;		_lcd_string
   581 ;;		_lcd_number
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585                           	psect	text4
   586  0007AC                     __ptext4:
   587                           	callstack 0
   588  0007AC                     _lcd_char:
   589                           	callstack 29
   590                           
   591                           ;incstack = 0
   592                           ;lcd_char@data stored from wreg
   593  0007AC  6E03               	movwf	lcd_char@data^0,c
   594  0007AE                     
   595                           ;newmain.c: 113: void lcd_char(char data);newmain.c: 114: {;newmain.c: 115:    PORTC =(P
      +                          ORTC & 0x0F) | (data & 0xF0);
   596  0007AE  C003  F001         	movff	lcd_char@data,??_lcd_char
   597  0007B2  0EF0               	movlw	240
   598  0007B4  1601               	andwf	??_lcd_char^0,f,c
   599  0007B6  5082               	movf	130,w,c	;volatile
   600  0007B8  0B0F               	andlw	15
   601  0007BA  1001               	iorwf	??_lcd_char^0,w,c
   602  0007BC  6E82               	movwf	130,c	;volatile
   603  0007BE                     
   604                           ;newmain.c: 117:     PORTD &= ~(1<<1);
   605  0007BE  9283               	bcf	131,1,c	;volatile
   606  0007C0                     
   607                           ;newmain.c: 118:  PORTD |= (1<<0);
   608  0007C0  8083               	bsf	131,0,c	;volatile
   609  0007C2                     
   610                           ;newmain.c: 121:  PORTD |= (1<<2);
   611  0007C2  8483               	bsf	131,2,c	;volatile
   612                           
   613                           ;newmain.c: 122:  _delay((unsigned long)((1)*(8000000/4000.0)));
   614  0007C4  0E03               	movlw	3
   615  0007C6  6E01               	movwf	??_lcd_char^0,c
   616  0007C8  0E98               	movlw	152
   617  0007CA                     u217:
   618  0007CA  2EE8               	decfsz	wreg,f,c
   619  0007CC  D7FE               	bra	u217
   620  0007CE  2E01               	decfsz	??_lcd_char^0,f,c
   621  0007D0  D7FC               	bra	u217
   622  0007D2                     
   623                           ;newmain.c: 123:     PORTD &= ~(1<<2);
   624  0007D2  9483               	bcf	131,2,c	;volatile
   625  0007D4                     
   626                           ;newmain.c: 124:  _delay((unsigned long)((200)*(8000000/4000.0)));
   627  0007D4  0E03               	movlw	3
   628  0007D6  6E02               	movwf	(??_lcd_char+1)^0,c
   629  0007D8  0E08               	movlw	8
   630  0007DA  6E01               	movwf	??_lcd_char^0,c
   631  0007DC  0E77               	movlw	119
   632  0007DE                     u227:
   633  0007DE  2EE8               	decfsz	wreg,f,c
   634  0007E0  D7FE               	bra	u227
   635  0007E2  2E01               	decfsz	??_lcd_char^0,f,c
   636  0007E4  D7FC               	bra	u227
   637  0007E6  2E02               	decfsz	(??_lcd_char+1)^0,f,c
   638  0007E8  D7FA               	bra	u227
   639  0007EA  F000               	nop	
   640  0007EC                     
   641                           ;newmain.c: 126:     PORTC = (PORTC & 0x0F) | (data << 4);
   642  0007EC  C003  F001         	movff	lcd_char@data,??_lcd_char
   643  0007F0  3A01               	swapf	??_lcd_char^0,f,c
   644  0007F2  0EF0               	movlw	240
   645  0007F4  1601               	andwf	??_lcd_char^0,f,c
   646  0007F6  5082               	movf	130,w,c	;volatile
   647  0007F8  0B0F               	andlw	15
   648  0007FA  1001               	iorwf	??_lcd_char^0,w,c
   649  0007FC  6E82               	movwf	130,c	;volatile
   650  0007FE                     
   651                           ;newmain.c: 128:  PORTD |= (1<<2);
   652  0007FE  8483               	bsf	131,2,c	;volatile
   653  000800                     
   654                           ;newmain.c: 129:  _delay((unsigned long)((1)*(8000000/4000.0)));
   655  000800  0E03               	movlw	3
   656  000802  6E01               	movwf	??_lcd_char^0,c
   657  000804  0E98               	movlw	152
   658  000806                     u237:
   659  000806  2EE8               	decfsz	wreg,f,c
   660  000808  D7FE               	bra	u237
   661  00080A  2E01               	decfsz	??_lcd_char^0,f,c
   662  00080C  D7FC               	bra	u237
   663                           
   664                           ;newmain.c: 130:     PORTD &= ~(1<<2);
   665  00080E  9483               	bcf	131,2,c	;volatile
   666  000810                     
   667                           ;newmain.c: 131:  _delay((unsigned long)((3)*(8000000/4000.0)));
   668  000810  0E08               	movlw	8
   669  000812  6E01               	movwf	??_lcd_char^0,c
   670  000814  0ECA               	movlw	202
   671  000816                     u247:
   672  000816  2EE8               	decfsz	wreg,f,c
   673  000818  D7FE               	bra	u247
   674  00081A  2E01               	decfsz	??_lcd_char^0,f,c
   675  00081C  D7FC               	bra	u247
   676  00081E  0012               	return		;funcret
   677  000820                     __end_of_lcd_char:
   678                           	callstack 0
   679                           
   680 ;; *************** function ___wmul *****************
   681 ;; Defined at:
   682 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
   683 ;; Parameters:    Size  Location     Type
   684 ;;  multiplier      2    0[COMRAM] unsigned int 
   685 ;;  multiplicand    2    2[COMRAM] unsigned int 
   686 ;; Auto vars:     Size  Location     Type
   687 ;;  product         2    4[COMRAM] unsigned int 
   688 ;; Return value:  Size  Location     Type
   689 ;;                  2    0[COMRAM] unsigned int 
   690 ;; Registers used:
   691 ;;		wreg, status,2, status,0, prodl, prodh
   692 ;; Tracked objects:
   693 ;;		On entry : 0/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   697 ;;      Params:         4       0       0       0       0       0       0
   698 ;;      Locals:         2       0       0       0       0       0       0
   699 ;;      Temps:          0       0       0       0       0       0       0
   700 ;;      Totals:         6       0       0       0       0       0       0
   701 ;;Total ram usage:        6 bytes
   702 ;; Hardware stack levels used: 1
   703 ;; This function calls:
   704 ;;		Nothing
   705 ;; This function is called by:
   706 ;;		_lcd_number
   707 ;; This function uses a non-reentrant model
   708 ;;
   709                           
   710                           	psect	text5
   711  000962                     __ptext5:
   712                           	callstack 0
   713  000962                     ___wmul:
   714                           	callstack 29
   715  000962  5001               	movf	___wmul@multiplier^0,w,c
   716  000964  0203               	mulwf	___wmul@multiplicand^0,c
   717  000966  CFF3 F005          	movff	prodl,___wmul@product
   718  00096A  CFF4 F006          	movff	prodh,___wmul@product+1
   719  00096E  5001               	movf	___wmul@multiplier^0,w,c
   720  000970  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   721  000972  50F3               	movf	243,w,c
   722  000974  2606               	addwf	(___wmul@product+1)^0,f,c
   723  000976  5002               	movf	(___wmul@multiplier+1)^0,w,c
   724  000978  0203               	mulwf	___wmul@multiplicand^0,c
   725  00097A  50F3               	movf	243,w,c
   726  00097C  2606               	addwf	(___wmul@product+1)^0,f,c
   727  00097E  C005  F001         	movff	___wmul@product,?___wmul
   728  000982  C006  F002         	movff	___wmul@product+1,?___wmul+1
   729  000986  0012               	return		;funcret
   730  000988                     __end_of___wmul:
   731                           	callstack 0
   732                           
   733 ;; *************** function ___awdiv *****************
   734 ;; Defined at:
   735 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
   736 ;; Parameters:    Size  Location     Type
   737 ;;  dividend        2    0[COMRAM] int 
   738 ;;  divisor         2    2[COMRAM] int 
   739 ;; Auto vars:     Size  Location     Type
   740 ;;  quotient        2    6[COMRAM] int 
   741 ;;  sign            1    5[COMRAM] unsigned char 
   742 ;;  counter         1    4[COMRAM] unsigned char 
   743 ;; Return value:  Size  Location     Type
   744 ;;                  2    0[COMRAM] int 
   745 ;; Registers used:
   746 ;;		wreg, status,2, status,0
   747 ;; Tracked objects:
   748 ;;		On entry : 0/0
   749 ;;		On exit  : 0/0
   750 ;;		Unchanged: 0/0
   751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   752 ;;      Params:         4       0       0       0       0       0       0
   753 ;;      Locals:         4       0       0       0       0       0       0
   754 ;;      Temps:          0       0       0       0       0       0       0
   755 ;;      Totals:         8       0       0       0       0       0       0
   756 ;;Total ram usage:        8 bytes
   757 ;; Hardware stack levels used: 1
   758 ;; This function calls:
   759 ;;		Nothing
   760 ;; This function is called by:
   761 ;;		_lcd_number
   762 ;; This function uses a non-reentrant model
   763 ;;
   764                           
   765                           	psect	text6
   766  0006E8                     __ptext6:
   767                           	callstack 0
   768  0006E8                     ___awdiv:
   769                           	callstack 29
   770  0006E8  0E00               	movlw	0
   771  0006EA  6E06               	movwf	___awdiv@sign^0,c
   772  0006EC  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   773  0006EE  EF7D  F003         	goto	u120
   774  0006F2  EF7B  F003         	goto	u121
   775  0006F6                     u121:
   776  0006F6  EF83  F003         	goto	l883
   777  0006FA                     u120:
   778  0006FA  6C03               	negf	___awdiv@divisor^0,c
   779  0006FC  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   780  0006FE  B0D8               	btfsc	status,0,c
   781  000700  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   782  000702  0E01               	movlw	1
   783  000704  6E06               	movwf	___awdiv@sign^0,c
   784  000706                     l883:
   785  000706  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   786  000708  EF8A  F003         	goto	u130
   787  00070C  EF88  F003         	goto	u131
   788  000710                     u131:
   789  000710  EF90  F003         	goto	l889
   790  000714                     u130:
   791  000714  6C01               	negf	___awdiv@dividend^0,c
   792  000716  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   793  000718  B0D8               	btfsc	status,0,c
   794  00071A  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   795  00071C  0E01               	movlw	1
   796  00071E  1A06               	xorwf	___awdiv@sign^0,f,c
   797  000720                     l889:
   798  000720  0E00               	movlw	0
   799  000722  6E08               	movwf	(___awdiv@quotient+1)^0,c
   800  000724  0E00               	movlw	0
   801  000726  6E07               	movwf	___awdiv@quotient^0,c
   802  000728  5003               	movf	___awdiv@divisor^0,w,c
   803  00072A  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   804  00072C  B4D8               	btfsc	status,2,c
   805  00072E  EF9B  F003         	goto	u141
   806  000732  EF9D  F003         	goto	u140
   807  000736                     u141:
   808  000736  EFC5  F003         	goto	l911
   809  00073A                     u140:
   810  00073A  0E01               	movlw	1
   811  00073C  6E05               	movwf	___awdiv@counter^0,c
   812  00073E  EFA5  F003         	goto	l897
   813  000742                     l895:
   814  000742  90D8               	bcf	status,0,c
   815  000744  3603               	rlcf	___awdiv@divisor^0,f,c
   816  000746  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   817  000748  2A05               	incf	___awdiv@counter^0,f,c
   818  00074A                     l897:
   819  00074A  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   820  00074C  EFAA  F003         	goto	u151
   821  000750  EFAC  F003         	goto	u150
   822  000754                     u151:
   823  000754  EFA1  F003         	goto	l895
   824  000758                     u150:
   825  000758                     l899:
   826  000758  90D8               	bcf	status,0,c
   827  00075A  3607               	rlcf	___awdiv@quotient^0,f,c
   828  00075C  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   829  00075E  5003               	movf	___awdiv@divisor^0,w,c
   830  000760  5C01               	subwf	___awdiv@dividend^0,w,c
   831  000762  5004               	movf	(___awdiv@divisor+1)^0,w,c
   832  000764  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   833  000766  A0D8               	btfss	status,0,c
   834  000768  EFB8  F003         	goto	u161
   835  00076C  EFBA  F003         	goto	u160
   836  000770                     u161:
   837  000770  EFBF  F003         	goto	l907
   838  000774                     u160:
   839  000774  5003               	movf	___awdiv@divisor^0,w,c
   840  000776  5E01               	subwf	___awdiv@dividend^0,f,c
   841  000778  5004               	movf	(___awdiv@divisor+1)^0,w,c
   842  00077A  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   843  00077C  8007               	bsf	___awdiv@quotient^0,0,c
   844  00077E                     l907:
   845  00077E  90D8               	bcf	status,0,c
   846  000780  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   847  000782  3203               	rrcf	___awdiv@divisor^0,f,c
   848  000784  2E05               	decfsz	___awdiv@counter^0,f,c
   849  000786  EFAC  F003         	goto	l899
   850  00078A                     l911:
   851  00078A  5006               	movf	___awdiv@sign^0,w,c
   852  00078C  B4D8               	btfsc	status,2,c
   853  00078E  EFCB  F003         	goto	u171
   854  000792  EFCD  F003         	goto	u170
   855  000796                     u171:
   856  000796  EFD1  F003         	goto	l915
   857  00079A                     u170:
   858  00079A  6C07               	negf	___awdiv@quotient^0,c
   859  00079C  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   860  00079E  B0D8               	btfsc	status,0,c
   861  0007A0  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   862  0007A2                     l915:
   863  0007A2  C007  F001         	movff	___awdiv@quotient,?___awdiv
   864  0007A6  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   865  0007AA  0012               	return		;funcret
   866  0007AC                     __end_of___awdiv:
   867                           	callstack 0
   868                           
   869 ;; *************** function _lcd_command *****************
   870 ;; Defined at:
   871 ;;		line 92 in file "newmain.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;  cmnd            1    wreg     unsigned char 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  cmnd            1    2[COMRAM] unsigned char 
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg, status,2, status,0
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   885 ;;      Params:         0       0       0       0       0       0       0
   886 ;;      Locals:         1       0       0       0       0       0       0
   887 ;;      Temps:          2       0       0       0       0       0       0
   888 ;;      Totals:         3       0       0       0       0       0       0
   889 ;;Total ram usage:        3 bytes
   890 ;; Hardware stack levels used: 1
   891 ;; This function calls:
   892 ;;		Nothing
   893 ;; This function is called by:
   894 ;;		_main
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           	psect	text7
   899  000820                     __ptext7:
   900                           	callstack 0
   901  000820                     _lcd_command:
   902                           	callstack 30
   903                           
   904                           ;incstack = 0
   905                           ;lcd_command@cmnd stored from wreg
   906  000820  6E03               	movwf	lcd_command@cmnd^0,c
   907  000822                     
   908                           ;newmain.c: 92: void lcd_command(char cmnd);newmain.c: 93: {;newmain.c: 94:     PORTC =(
      +                          PORTC & 0x0F) | (cmnd & 0xF0);
   909  000822  C003  F001         	movff	lcd_command@cmnd,??_lcd_command
   910  000826  0EF0               	movlw	240
   911  000828  1601               	andwf	??_lcd_command^0,f,c
   912  00082A  5082               	movf	130,w,c	;volatile
   913  00082C  0B0F               	andlw	15
   914  00082E  1001               	iorwf	??_lcd_command^0,w,c
   915  000830  6E82               	movwf	130,c	;volatile
   916  000832                     
   917                           ;newmain.c: 96:  PORTD &= ~(1<<1);
   918  000832  9283               	bcf	131,1,c	;volatile
   919  000834                     
   920                           ;newmain.c: 97:  PORTD &= ~(1<<0);
   921  000834  9083               	bcf	131,0,c	;volatile
   922  000836                     
   923                           ;newmain.c: 100:  PORTD |= (1<<2);
   924  000836  8483               	bsf	131,2,c	;volatile
   925                           
   926                           ;newmain.c: 101:  _delay((unsigned long)((1)*(8000000/4000.0)));
   927  000838  0E03               	movlw	3
   928  00083A  6E01               	movwf	??_lcd_command^0,c
   929  00083C  0E98               	movlw	152
   930  00083E                     u257:
   931  00083E  2EE8               	decfsz	wreg,f,c
   932  000840  D7FE               	bra	u257
   933  000842  2E01               	decfsz	??_lcd_command^0,f,c
   934  000844  D7FC               	bra	u257
   935  000846                     
   936                           ;newmain.c: 102:     PORTD &= ~(1<<2);
   937  000846  9483               	bcf	131,2,c	;volatile
   938  000848                     
   939                           ;newmain.c: 103:  _delay((unsigned long)((200)*(8000000/4000.0)));
   940  000848  0E03               	movlw	3
   941  00084A  6E02               	movwf	(??_lcd_command+1)^0,c
   942  00084C  0E08               	movlw	8
   943  00084E  6E01               	movwf	??_lcd_command^0,c
   944  000850  0E77               	movlw	119
   945  000852                     u267:
   946  000852  2EE8               	decfsz	wreg,f,c
   947  000854  D7FE               	bra	u267
   948  000856  2E01               	decfsz	??_lcd_command^0,f,c
   949  000858  D7FC               	bra	u267
   950  00085A  2E02               	decfsz	(??_lcd_command+1)^0,f,c
   951  00085C  D7FA               	bra	u267
   952  00085E  F000               	nop	
   953  000860                     
   954                           ;newmain.c: 105:     PORTC = (PORTC & 0x0F) | (cmnd << 4);
   955  000860  C003  F001         	movff	lcd_command@cmnd,??_lcd_command
   956  000864  3A01               	swapf	??_lcd_command^0,f,c
   957  000866  0EF0               	movlw	240
   958  000868  1601               	andwf	??_lcd_command^0,f,c
   959  00086A  5082               	movf	130,w,c	;volatile
   960  00086C  0B0F               	andlw	15
   961  00086E  1001               	iorwf	??_lcd_command^0,w,c
   962  000870  6E82               	movwf	130,c	;volatile
   963  000872                     
   964                           ;newmain.c: 107:  PORTD |= (1<<2);
   965  000872  8483               	bsf	131,2,c	;volatile
   966  000874                     
   967                           ;newmain.c: 108:  _delay((unsigned long)((1)*(8000000/4000.0)));
   968  000874  0E03               	movlw	3
   969  000876  6E01               	movwf	??_lcd_command^0,c
   970  000878  0E98               	movlw	152
   971  00087A                     u277:
   972  00087A  2EE8               	decfsz	wreg,f,c
   973  00087C  D7FE               	bra	u277
   974  00087E  2E01               	decfsz	??_lcd_command^0,f,c
   975  000880  D7FC               	bra	u277
   976                           
   977                           ;newmain.c: 109:     PORTD &= ~(1<<2);
   978  000882  9483               	bcf	131,2,c	;volatile
   979  000884                     
   980                           ;newmain.c: 110:  _delay((unsigned long)((3)*(8000000/4000.0)));
   981  000884  0E08               	movlw	8
   982  000886  6E01               	movwf	??_lcd_command^0,c
   983  000888  0ECA               	movlw	202
   984  00088A                     u287:
   985  00088A  2EE8               	decfsz	wreg,f,c
   986  00088C  D7FE               	bra	u287
   987  00088E  2E01               	decfsz	??_lcd_command^0,f,c
   988  000890  D7FC               	bra	u287
   989  000892  0012               	return		;funcret
   990  000894                     __end_of_lcd_command:
   991                           	callstack 0
   992                           
   993                           	psect	rparam
   994  0000                     
   995                           	psect	idloc
   996                           
   997                           ;Config register IDLOC0 @ 0x200000
   998                           ;	unspecified, using default values
   999  200000                     	org	2097152
  1000  200000  FF                 	db	255
  1001                           
  1002                           ;Config register IDLOC1 @ 0x200001
  1003                           ;	unspecified, using default values
  1004  200001                     	org	2097153
  1005  200001  FF                 	db	255
  1006                           
  1007                           ;Config register IDLOC2 @ 0x200002
  1008                           ;	unspecified, using default values
  1009  200002                     	org	2097154
  1010  200002  FF                 	db	255
  1011                           
  1012                           ;Config register IDLOC3 @ 0x200003
  1013                           ;	unspecified, using default values
  1014  200003                     	org	2097155
  1015  200003  FF                 	db	255
  1016                           
  1017                           ;Config register IDLOC4 @ 0x200004
  1018                           ;	unspecified, using default values
  1019  200004                     	org	2097156
  1020  200004  FF                 	db	255
  1021                           
  1022                           ;Config register IDLOC5 @ 0x200005
  1023                           ;	unspecified, using default values
  1024  200005                     	org	2097157
  1025  200005  FF                 	db	255
  1026                           
  1027                           ;Config register IDLOC6 @ 0x200006
  1028                           ;	unspecified, using default values
  1029  200006                     	org	2097158
  1030  200006  FF                 	db	255
  1031                           
  1032                           ;Config register IDLOC7 @ 0x200007
  1033                           ;	unspecified, using default values
  1034  200007                     	org	2097159
  1035  200007  FF                 	db	255
  1036                           
  1037                           	psect	config
  1038                           
  1039                           ; Padding undefined space
  1040  300000                     	org	3145728
  1041  300000  FF                 	db	255
  1042                           
  1043                           ;Config register CONFIG1H @ 0x300001
  1044                           ;	Oscillator Selection bits
  1045                           ;	OSC = RCIO6, External RC oscillator, port function on RA6
  1046                           ;	Fail-Safe Clock Monitor Enable bit
  1047                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1048                           ;	Internal/External Oscillator Switchover bit
  1049                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1050  300001                     	org	3145729
  1051  300001  07                 	db	7
  1052                           
  1053                           ;Config register CONFIG2L @ 0x300002
  1054                           ;	Power-up Timer Enable bit
  1055                           ;	PWRT = OFF, PWRT disabled
  1056                           ;	Brown-out Reset Enable bits
  1057                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1058                           ;	Brown Out Reset Voltage bits
  1059                           ;	BORV = 3, Minimum setting
  1060  300002                     	org	3145730
  1061  300002  19                 	db	25
  1062                           
  1063                           ;Config register CONFIG2H @ 0x300003
  1064                           ;	Watchdog Timer Enable bit
  1065                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1066                           ;	Watchdog Timer Postscale Select bits
  1067                           ;	WDTPS = 32768, 1:32768
  1068  300003                     	org	3145731
  1069  300003  1E                 	db	30
  1070                           
  1071                           ; Padding undefined space
  1072  300004                     	org	3145732
  1073  300004  FF                 	db	255
  1074                           
  1075                           ;Config register CONFIG3H @ 0x300005
  1076                           ;	CCP2 MUX bit
  1077                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1078                           ;	PORTB A/D Enable bit
  1079                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1080                           ;	Low-Power Timer1 Oscillator Enable bit
  1081                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1082                           ;	MCLR Pin Enable bit
  1083                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  1084  300005                     	org	3145733
  1085  300005  01                 	db	1
  1086                           
  1087                           ;Config register CONFIG4L @ 0x300006
  1088                           ;	Stack Full/Underflow Reset Enable bit
  1089                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1090                           ;	Single-Supply ICSP Enable bit
  1091                           ;	LVP = OFF, Single-Supply ICSP disabled
  1092                           ;	Extended Instruction Set Enable bit
  1093                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1094                           ;	Background Debugger Enable bit
  1095                           ;	DEBUG = 0x1, unprogrammed default
  1096  300006                     	org	3145734
  1097  300006  80                 	db	128
  1098                           
  1099                           ; Padding undefined space
  1100  300007                     	org	3145735
  1101  300007  FF                 	db	255
  1102                           
  1103                           ;Config register CONFIG5L @ 0x300008
  1104                           ;	Code Protection bit
  1105                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1106                           ;	Code Protection bit
  1107                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1108                           ;	Code Protection bit
  1109                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1110                           ;	Code Protection bit
  1111                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1112  300008                     	org	3145736
  1113  300008  0F                 	db	15
  1114                           
  1115                           ;Config register CONFIG5H @ 0x300009
  1116                           ;	Boot Block Code Protection bit
  1117                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1118                           ;	Data EEPROM Code Protection bit
  1119                           ;	CPD = OFF, Data EEPROM not code-protected
  1120  300009                     	org	3145737
  1121  300009  C0                 	db	192
  1122                           
  1123                           ;Config register CONFIG6L @ 0x30000A
  1124                           ;	Write Protection bit
  1125                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1126                           ;	Write Protection bit
  1127                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1128                           ;	Write Protection bit
  1129                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1130                           ;	Write Protection bit
  1131                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1132  30000A                     	org	3145738
  1133  30000A  0F                 	db	15
  1134                           
  1135                           ;Config register CONFIG6H @ 0x30000B
  1136                           ;	Configuration Register Write Protection bit
  1137                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1138                           ;	Boot Block Write Protection bit
  1139                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1140                           ;	Data EEPROM Write Protection bit
  1141                           ;	WRTD = OFF, Data EEPROM not write-protected
  1142  30000B                     	org	3145739
  1143  30000B  E0                 	db	224
  1144                           
  1145                           ;Config register CONFIG7L @ 0x30000C
  1146                           ;	Table Read Protection bit
  1147                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1148                           ;	Table Read Protection bit
  1149                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1150                           ;	Table Read Protection bit
  1151                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1152                           ;	Table Read Protection bit
  1153                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1154  30000C                     	org	3145740
  1155  30000C  0F                 	db	15
  1156                           
  1157                           ;Config register CONFIG7H @ 0x30000D
  1158                           ;	Boot Block Table Read Protection bit
  1159                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1160  30000D                     	org	3145741
  1161  30000D  40                 	db	64
  1162                           tosu	equ	0xFFF
  1163                           tosh	equ	0xFFE
  1164                           tosl	equ	0xFFD
  1165                           stkptr	equ	0xFFC
  1166                           pclatu	equ	0xFFB
  1167                           pclath	equ	0xFFA
  1168                           pcl	equ	0xFF9
  1169                           tblptru	equ	0xFF8
  1170                           tblptrh	equ	0xFF7
  1171                           tblptrl	equ	0xFF6
  1172                           tablat	equ	0xFF5
  1173                           prodh	equ	0xFF4
  1174                           prodl	equ	0xFF3
  1175                           indf0	equ	0xFEF
  1176                           postinc0	equ	0xFEE
  1177                           postdec0	equ	0xFED
  1178                           preinc0	equ	0xFEC
  1179                           plusw0	equ	0xFEB
  1180                           fsr0h	equ	0xFEA
  1181                           fsr0l	equ	0xFE9
  1182                           wreg	equ	0xFE8
  1183                           indf1	equ	0xFE7
  1184                           postinc1	equ	0xFE6
  1185                           postdec1	equ	0xFE5
  1186                           preinc1	equ	0xFE4
  1187                           plusw1	equ	0xFE3
  1188                           fsr1h	equ	0xFE2
  1189                           fsr1l	equ	0xFE1
  1190                           bsr	equ	0xFE0
  1191                           indf2	equ	0xFDF
  1192                           postinc2	equ	0xFDE
  1193                           postdec2	equ	0xFDD
  1194                           preinc2	equ	0xFDC
  1195                           plusw2	equ	0xFDB
  1196                           fsr2h	equ	0xFDA
  1197                           fsr2l	equ	0xFD9
  1198                           status	equ	0xFD8

Data Sizes:
    Strings     11
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     16      16
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    lcd_string@str	PTR unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_lcd_number
    _lcd_string->_strlen
    _lcd_number->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2011
                        _lcd_command
                         _lcd_number
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           6     4      2     362
                                              4 COMRAM     6     4      2
                           _lcd_char
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _lcd_number                                           8     6      2    1596
                                              8 COMRAM     8     6      2
                            ___awdiv
                             ___wmul
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_command                                          3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_command
   _lcd_number
     ___awdiv
     ___wmul
     _lcd_char
   _lcd_string
     _lcd_char
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     10      10       1       12.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Mar 31 16:58:39 2021

           lcd_char@data 0003                       l15 0892                       l40 0986  
                     l32 06E6                       l24 08E2                       l18 081E  
                     l27 063E                       l37 0924             ___awdiv@sign 0006  
    ___wmul@multiplicand 0003                      l271 07AA                      l801 0832  
                    l721 07BE                      l811 0860                      l803 0834  
                    l731 07EC                      l723 07C0                      l813 0872  
                    l805 0836                      l901 075E                      l733 07FE  
                    l725 07C2                      l717 0960                      l815 0874  
                    l807 0846                      l903 0774                      l911 078A  
                    l735 0800                      l727 07D2                      l719 07AE  
                    l817 0884                      l809 0848                      l913 079A  
                    l905 077C                      l737 0810                      l729 07D4  
                    l921 08A0                      l915 07A2                      l907 077E  
                    l931 0622                      l923 08BC                      l909 0784  
                    l933 066C                      l861 0934                      l925 08C0  
                    l941 08E4                      l871 097E                      l935 0690  
                    l927 060E                      l863 0938                      l919 0894  
                    l951 0912                      l943 08F4                      l881 0702  
                    l937 06B0                      l929 0616                      l865 0954  
                    l953 0918                      l945 08FA                      l891 0728  
                    l883 0706                      l875 06E8                      l939 06CC  
                    l859 0928                      l955 0918                      l947 0900  
                    l893 073A                      l885 0714                      l877 06EC  
                    l869 0962                      l949 0906                      l799 0822  
                    l895 0742                      l887 071C                      l879 06FA  
                    l897 074A                      l889 0720                      l899 0758  
                    u110 0954                      u111 0950                      u120 06FA  
                    u200 06E6                      u121 06F6                      u201 06E2  
                    u130 0714                      u131 0710                      u140 073A  
                    u141 0736                      u150 0758                      u151 0754  
                    u160 0774                      u161 0770                      u217 07CA  
                    u170 079A                      u171 0796                      u227 07DE  
                    u180 08E2                      u237 0806                      u181 08DE  
                    u190 066C                      u247 0816                      u191 0668  
                    u257 083E                      u267 0852                      u277 087A  
                    u287 088A                      wreg 000FE8        lcd_number@num_div 000F  
                   STR_1 0601                     _main 08E4                     prodh 000FF4  
                   prodl 000FF3                     start 0000              lcd_string@i 0009  
     lcd_number@num_test 000D             ___param_bank 000000                    ?_main 0001  
        __end_of___awdiv 07AC          ___awdiv@divisor 0003          ___awdiv@counter 0005  
                  _PORTC 000F82                    _PORTD 000F83                    _TRISC 000F94  
                  _TRISD 000F95                    tablat 000FF5                    status 000FD8  
        __initialization 0988             __end_of_main 0928                   ??_main 0011  
          __activetblptr 000001         ___awdiv@dividend 0001            lcd_number@num 0009  
       __end_of_lcd_char 0820     __size_of_lcd_command 0074                   ___wmul 0962  
              ??___awdiv 0005         ___awdiv@quotient 0007                   isa$std 000001  
                 _strlen 0928             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8            lcd_string@str 0005  
             __accesstop 0080  __end_of__initialization 0988            ___rparam_used 000001  
         __pcstackCOMRAM 0001          lcd_command@cmnd 0003                  ?___wmul 0001  
                ?_strlen 0001               _lcd_number 060E                ?_lcd_char 0001  
             _lcd_string 0894                  __Hparam 0000                  __Lparam 0000  
                ___awdiv 06E8          __size_of___wmul 0026             __psmallconst 0600  
                __pcinit 0988                  __ramtop 0600                  __ptext0 08E4  
                __ptext1 0894                  __ptext2 0928                  __ptext3 060E  
                __ptext4 07AC                  __ptext5 0962                  __ptext6 06E8  
                __ptext7 0820          __size_of_strlen 003A               ??_lcd_char 0001  
   end_of_initialization 0988                  strlen@a 0003                  strlen@s 0001  
            ?_lcd_number 0009              ?_lcd_string 0005    lcd_number@num_display 000B  
          ??_lcd_command 0001           __end_of___wmul 0988           __end_of_strlen 0962  
    start_initialization 0988                 ??___wmul 0005      __size_of_lcd_number 00DA  
    __end_of_lcd_command 0894      __size_of_lcd_string 0050                 ??_strlen 0003  
      __size_of_lcd_char 0074                 ?___awdiv 0001              __smallconst 0600  
         ___wmul@product 0005              _lcd_command 0820        ___wmul@multiplier 0001  
           ??_lcd_number 000B             ??_lcd_string 0007                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0600       __end_of_lcd_number 06E8  
       __size_of___awdiv 00C4       __end_of_lcd_string 08E4                 _lcd_char 07AC  
          __size_of_main 0044                 isa$xinst 000000             ?_lcd_command 0001  
