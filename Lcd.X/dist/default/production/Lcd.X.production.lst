

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Apr 30 13:30:51 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=2
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 12/02/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4520 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _PORTD	set	3971
    57  0000                     _PORTC	set	3970
    58  0000                     _TRISD	set	3989
    59  0000                     _TRISC	set	3988
    60                           
    61                           	psect	smallconst
    62  000600                     __psmallconst:
    63                           	callstack 0
    64  000600  00                 	db	0
    65  000601                     STR_1:
    66  000601  20                 	db	32
    67  000602  43                 	db	67	;'C'
    68  000603  68                 	db	104	;'h'
    69  000604  75                 	db	117	;'u'
    70  000605  63                 	db	99	;'c'
    71  000606  20                 	db	32
    72  000607  6D                 	db	109	;'m'
    73  000608  75                 	db	117	;'u'
    74  000609  6E                 	db	110	;'n'
    75  00060A  67                 	db	103	;'g'
    76  00060B  00                 	db	0
    77  00060C  00                 	db	0	; dummy byte at the end
    78  0000                     
    79                           ; #config settings
    80                           
    81                           	psect	cinit
    82  0009AE                     __pcinit:
    83                           	callstack 0
    84  0009AE                     start_initialization:
    85                           	callstack 0
    86  0009AE                     __initialization:
    87                           	callstack 0
    88  0009AE                     end_of_initialization:
    89                           	callstack 0
    90  0009AE                     __end_of__initialization:
    91                           	callstack 0
    92  0009AE  0E00               	movlw	low (__Lsmallconst shr (0+16))
    93  0009B0  6EF8               	movwf	tblptru,c
    94  0009B2  0E06               	movlw	high __Lsmallconst
    95  0009B4  6EF7               	movwf	tblptrh,c
    96  0009B6  0100               	movlb	0
    97  0009B8  EF1F  F004         	goto	_main	;jump to C main() function
    98                           
    99                           	psect	cstackCOMRAM
   100  000001                     __pcstackCOMRAM:
   101                           	callstack 0
   102  000001                     ??_lcd_command:
   103  000001                     ??_lcd_char:
   104  000001                     ?_strlen:
   105                           	callstack 0
   106  000001                     ?___wmul:
   107                           	callstack 0
   108  000001                     ?___awdiv:
   109                           	callstack 0
   110  000001                     ?___lwdiv:
   111                           	callstack 0
   112  000001                     ___wmul@multiplier:
   113                           	callstack 0
   114  000001                     ___awdiv@dividend:
   115                           	callstack 0
   116  000001                     ___lwdiv@dividend:
   117                           	callstack 0
   118  000001                     strlen@s:
   119                           	callstack 0
   120                           
   121                           ; 2 bytes @ 0x0
   122  000001                     	ds	1
   123  000002                     lcd_command@cmnd:
   124                           	callstack 0
   125  000002                     lcd_char@data:
   126                           	callstack 0
   127                           
   128                           ; 1 bytes @ 0x1
   129  000002                     	ds	1
   130  000003                     ___wmul@multiplicand:
   131                           	callstack 0
   132  000003                     ___awdiv@divisor:
   133                           	callstack 0
   134  000003                     ___lwdiv@divisor:
   135                           	callstack 0
   136  000003                     strlen@a:
   137                           	callstack 0
   138                           
   139                           ; 2 bytes @ 0x2
   140  000003                     	ds	2
   141  000005                     ___awdiv@counter:
   142                           	callstack 0
   143  000005                     lcd_string@str:
   144                           	callstack 0
   145  000005                     ___wmul@product:
   146                           	callstack 0
   147  000005                     ___lwdiv@quotient:
   148                           	callstack 0
   149                           
   150                           ; 2 bytes @ 0x4
   151  000005                     	ds	1
   152  000006                     ___awdiv@sign:
   153                           	callstack 0
   154                           
   155                           ; 1 bytes @ 0x5
   156  000006                     	ds	1
   157  000007                     ??_lcd_string:
   158  000007                     ___lwdiv@counter:
   159                           	callstack 0
   160  000007                     ___awdiv@quotient:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x6
   164  000007                     	ds	2
   165  000009                     lcd_string@i:
   166                           	callstack 0
   167  000009                     lcd_number@num:
   168                           	callstack 0
   169                           
   170                           ; 2 bytes @ 0x8
   171  000009                     	ds	2
   172  00000B                     lcd_number@num_display:
   173                           	callstack 0
   174                           
   175                           ; 2 bytes @ 0xA
   176  00000B                     	ds	2
   177  00000D                     lcd_number@num_test:
   178                           	callstack 0
   179                           
   180                           ; 2 bytes @ 0xC
   181  00000D                     	ds	2
   182  00000F                     lcd_number@num_div:
   183                           	callstack 0
   184                           
   185                           ; 2 bytes @ 0xE
   186  00000F                     	ds	2
   187  000011                     main@rate:
   188                           	callstack 0
   189                           
   190                           ; 2 bytes @ 0x10
   191  000011                     	ds	2
   192                           
   193 ;;
   194 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   195 ;;
   196 ;; *************** function _main *****************
   197 ;; Defined at:
   198 ;;		line 78 in file "newmain.c"
   199 ;; Parameters:    Size  Location     Type
   200 ;;		None
   201 ;; Auto vars:     Size  Location     Type
   202 ;;  rate            2   16[COMRAM] unsigned int 
   203 ;; Return value:  Size  Location     Type
   204 ;;                  1    wreg      void 
   205 ;; Registers used:
   206 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   207 ;; Tracked objects:
   208 ;;		On entry : 0/0
   209 ;;		On exit  : 0/0
   210 ;;		Unchanged: 0/0
   211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   212 ;;      Params:         0       0       0       0       0       0       0
   213 ;;      Locals:         2       0       0       0       0       0       0
   214 ;;      Temps:          0       0       0       0       0       0       0
   215 ;;      Totals:         2       0       0       0       0       0       0
   216 ;;Total ram usage:        2 bytes
   217 ;; Hardware stack levels required when called: 2
   218 ;; This function calls:
   219 ;;		___lwdiv
   220 ;;		_lcd_command
   221 ;;		_lcd_number
   222 ;;		_lcd_string
   223 ;; This function is called by:
   224 ;;		Startup code after reset
   225 ;; This function uses a non-reentrant model
   226 ;;
   227                           
   228                           	psect	text0
   229  00083E                     __ptext0:
   230                           	callstack 0
   231  00083E                     _main:
   232                           	callstack 29
   233  00083E                     
   234                           ;newmain.c: 79:     TRISC = 0;
   235  00083E  0E00               	movlw	0
   236  000840  6E94               	movwf	148,c	;volatile
   237                           
   238                           ;newmain.c: 80:     TRISD = 0;
   239  000842  0E00               	movlw	0
   240  000844  6E95               	movwf	149,c	;volatile
   241                           
   242                           ;newmain.c: 81:     PORTC = 0;
   243  000846  0E00               	movlw	0
   244  000848  6E82               	movwf	130,c	;volatile
   245                           
   246                           ;newmain.c: 82:     PORTD = 0;
   247  00084A  0E00               	movlw	0
   248  00084C  6E83               	movwf	131,c	;volatile
   249  00084E                     
   250                           ;newmain.c: 83:     lcd_command(0x38);
   251  00084E  0E38               	movlw	56
   252  000850  ECAE  F004         	call	_lcd_command
   253  000854                     
   254                           ;newmain.c: 84:  lcd_command(0x0c);
   255  000854  0E0C               	movlw	12
   256  000856  ECAE  F004         	call	_lcd_command
   257  00085A                     
   258                           ;newmain.c: 85:  lcd_command(0x01);
   259  00085A  0E01               	movlw	1
   260  00085C  ECAE  F004         	call	_lcd_command
   261  000860                     
   262                           ;newmain.c: 87:  lcd_string(" Chuc mung");
   263  000860  0E01               	movlw	low STR_1
   264  000862  6E05               	movwf	lcd_string@str^0,c
   265  000864  0E06               	movlw	high STR_1
   266  000866  6E06               	movwf	(lcd_string@str+1)^0,c
   267  000868  EC53  F004         	call	_lcd_string	;wreg free
   268  00086C                     
   269                           ;newmain.c: 88:     lcd_command(0xc0);
   270  00086C  0EC0               	movlw	192
   271  00086E  ECAE  F004         	call	_lcd_command
   272  000872                     
   273                           ;newmain.c: 89:     unsigned int rate;;newmain.c: 90:     rate = 250;
   274  000872  0E00               	movlw	0
   275  000874  6E12               	movwf	(main@rate+1)^0,c
   276  000876  0EFA               	movlw	250
   277  000878  6E11               	movwf	main@rate^0,c
   278  00087A                     
   279                           ;newmain.c: 91:     rate=rate/187;
   280  00087A  C011  F001         	movff	main@rate,___lwdiv@dividend
   281  00087E  C012  F002         	movff	main@rate+1,___lwdiv@dividend+1
   282  000882  0E00               	movlw	0
   283  000884  6E04               	movwf	(___lwdiv@divisor+1)^0,c
   284  000886  0EBB               	movlw	187
   285  000888  6E03               	movwf	___lwdiv@divisor^0,c
   286  00088A  ECE5  F003         	call	___lwdiv	;wreg free
   287  00088E  C001  F011         	movff	?___lwdiv,main@rate
   288  000892  C002  F012         	movff	?___lwdiv+1,main@rate+1
   289  000896                     
   290                           ;newmain.c: 92:     lcd_number(rate);
   291  000896  C011  F009         	movff	main@rate,lcd_number@num
   292  00089A  C012  F00A         	movff	main@rate+1,lcd_number@num+1
   293  00089E  EC07  F003         	call	_lcd_number	;wreg free
   294  0008A2  EF00  F000         	goto	start
   295  0008A6                     __end_of_main:
   296                           	callstack 0
   297                           
   298 ;; *************** function _lcd_string *****************
   299 ;; Defined at:
   300 ;;		line 32 in file "MyLcd16.c"
   301 ;; Parameters:    Size  Location     Type
   302 ;;  str             2    4[COMRAM] PTR unsigned char 
   303 ;;		 -> STR_1(11), 
   304 ;; Auto vars:     Size  Location     Type
   305 ;;  i               2    8[COMRAM] int 
   306 ;; Return value:  Size  Location     Type
   307 ;;                  1    wreg      void 
   308 ;; Registers used:
   309 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   310 ;; Tracked objects:
   311 ;;		On entry : 0/0
   312 ;;		On exit  : 0/0
   313 ;;		Unchanged: 0/0
   314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   315 ;;      Params:         2       0       0       0       0       0       0
   316 ;;      Locals:         2       0       0       0       0       0       0
   317 ;;      Temps:          2       0       0       0       0       0       0
   318 ;;      Totals:         6       0       0       0       0       0       0
   319 ;;Total ram usage:        6 bytes
   320 ;; Hardware stack levels used: 1
   321 ;; Hardware stack levels required when called: 1
   322 ;; This function calls:
   323 ;;		_lcd_char
   324 ;;		_strlen
   325 ;; This function is called by:
   326 ;;		_main
   327 ;; This function uses a non-reentrant model
   328 ;;
   329                           
   330                           	psect	text1
   331  0008A6                     __ptext1:
   332                           	callstack 0
   333  0008A6                     _lcd_string:
   334                           	callstack 29
   335  0008A6                     
   336                           ;MyLcd16.c: 32: void lcd_string(char *str);MyLcd16.c: 33: {;MyLcd16.c: 34:  for(int i=0;
      +                           i<strlen(str); i++)
   337  0008A6  0E00               	movlw	0
   338  0008A8  6E0A               	movwf	(lcd_string@i+1)^0,c
   339  0008AA  0E00               	movlw	0
   340  0008AC  6E09               	movwf	lcd_string@i^0,c
   341  0008AE  EF69  F004         	goto	l953
   342  0008B2                     l949:
   343                           
   344                           ;MyLcd16.c: 35:  {;MyLcd16.c: 36:   lcd_char(str[i]);
   345  0008B2  5009               	movf	lcd_string@i^0,w,c
   346  0008B4  2405               	addwf	lcd_string@str^0,w,c
   347  0008B6  6E07               	movwf	??_lcd_string^0,c
   348  0008B8  500A               	movf	(lcd_string@i+1)^0,w,c
   349  0008BA  2006               	addwfc	(lcd_string@str+1)^0,w,c
   350  0008BC  6E08               	movwf	(??_lcd_string+1)^0,c
   351  0008BE  C007  FFF6         	movff	??_lcd_string,tblptrl
   352  0008C2  C008  FFF7         	movff	??_lcd_string+1,tblptrh
   353  0008C6                     	if	0	;tblptru may be non-zero
   354  0008C6                     	endif
   355  0008C6                     	if	0	;tblptru may be non-zero
   356  0008C6                     	endif
   357  0008C6  0008               	tblrd		*
   358  0008C8  50F5               	movf	tablat,w,c
   359  0008CA  EC98  F004         	call	_lcd_char
   360  0008CE                     
   361                           ;MyLcd16.c: 37:  }
   362  0008CE  4A09               	infsnz	lcd_string@i^0,f,c
   363  0008D0  2A0A               	incf	(lcd_string@i+1)^0,f,c
   364  0008D2                     l953:
   365  0008D2  C005  F001         	movff	lcd_string@str,strlen@s
   366  0008D6  C006  F002         	movff	lcd_string@str+1,strlen@s+1
   367  0008DA  EC7B  F004         	call	_strlen	;wreg free
   368  0008DE  5001               	movf	?_strlen^0,w,c
   369  0008E0  5C09               	subwf	lcd_string@i^0,w,c
   370  0008E2  5002               	movf	(?_strlen+1)^0,w,c
   371  0008E4  580A               	subwfb	(lcd_string@i+1)^0,w,c
   372  0008E6  A0D8               	btfss	status,0,c
   373  0008E8  EF78  F004         	goto	u221
   374  0008EC  EF7A  F004         	goto	u220
   375  0008F0                     u221:
   376  0008F0  EF59  F004         	goto	l949
   377  0008F4                     u220:
   378  0008F4  0012               	return		;funcret
   379  0008F6                     __end_of_lcd_string:
   380                           	callstack 0
   381                           
   382 ;; *************** function _strlen *****************
   383 ;; Defined at:
   384 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\strlen.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;  s               2    0[COMRAM] PTR const unsigned char 
   387 ;;		 -> STR_1(11), 
   388 ;; Auto vars:     Size  Location     Type
   389 ;;  a               2    2[COMRAM] PTR const unsigned char 
   390 ;;		 -> STR_1(11), 
   391 ;; Return value:  Size  Location     Type
   392 ;;                  2    0[COMRAM] unsigned int 
   393 ;; Registers used:
   394 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   395 ;; Tracked objects:
   396 ;;		On entry : 0/0
   397 ;;		On exit  : 0/0
   398 ;;		Unchanged: 0/0
   399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   400 ;;      Params:         2       0       0       0       0       0       0
   401 ;;      Locals:         2       0       0       0       0       0       0
   402 ;;      Temps:          0       0       0       0       0       0       0
   403 ;;      Totals:         4       0       0       0       0       0       0
   404 ;;Total ram usage:        4 bytes
   405 ;; Hardware stack levels used: 1
   406 ;; This function calls:
   407 ;;		Nothing
   408 ;; This function is called by:
   409 ;;		_lcd_string
   410 ;; This function uses a non-reentrant model
   411 ;;
   412                           
   413                           	psect	text2
   414  0008F6                     __ptext2:
   415                           	callstack 0
   416  0008F6                     _strlen:
   417                           	callstack 29
   418  0008F6  C001  F003         	movff	strlen@s,strlen@a
   419  0008FA  C002  F004         	movff	strlen@s+1,strlen@a+1
   420  0008FE  EF83  F004         	goto	l891
   421  000902                     l889:
   422  000902  4A01               	infsnz	strlen@s^0,f,c
   423  000904  2A02               	incf	(strlen@s+1)^0,f,c
   424  000906                     l891:
   425  000906  C001  FFF6         	movff	strlen@s,tblptrl
   426  00090A  C002  FFF7         	movff	strlen@s+1,tblptrh
   427  00090E                     	if	0	;tblptru may be non-zero
   428  00090E                     	endif
   429  00090E                     	if	0	;tblptru may be non-zero
   430  00090E                     	endif
   431  00090E  0008               	tblrd		*
   432  000910  50F5               	movf	tablat,w,c
   433  000912  0900               	iorlw	0
   434  000914  A4D8               	btfss	status,2,c
   435  000916  EF8F  F004         	goto	u151
   436  00091A  EF91  F004         	goto	u150
   437  00091E                     u151:
   438  00091E  EF81  F004         	goto	l889
   439  000922                     u150:
   440  000922  5003               	movf	strlen@a^0,w,c
   441  000924  5C01               	subwf	strlen@s^0,w,c
   442  000926  6E01               	movwf	?_strlen^0,c
   443  000928  5004               	movf	(strlen@a+1)^0,w,c
   444  00092A  5802               	subwfb	(strlen@s+1)^0,w,c
   445  00092C  6E02               	movwf	(?_strlen+1)^0,c
   446  00092E  0012               	return		;funcret
   447  000930                     __end_of_strlen:
   448                           	callstack 0
   449                           
   450 ;; *************** function _lcd_number *****************
   451 ;; Defined at:
   452 ;;		line 40 in file "MyLcd16.c"
   453 ;; Parameters:    Size  Location     Type
   454 ;;  num             2    8[COMRAM] int 
   455 ;; Auto vars:     Size  Location     Type
   456 ;;  num_div         2   14[COMRAM] int 
   457 ;;  num_test        2   12[COMRAM] int 
   458 ;;  num_display     2   10[COMRAM] int 
   459 ;; Return value:  Size  Location     Type
   460 ;;                  1    wreg      void 
   461 ;; Registers used:
   462 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   463 ;; Tracked objects:
   464 ;;		On entry : 0/0
   465 ;;		On exit  : 0/0
   466 ;;		Unchanged: 0/0
   467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   468 ;;      Params:         2       0       0       0       0       0       0
   469 ;;      Locals:         6       0       0       0       0       0       0
   470 ;;      Temps:          0       0       0       0       0       0       0
   471 ;;      Totals:         8       0       0       0       0       0       0
   472 ;;Total ram usage:        8 bytes
   473 ;; Hardware stack levels used: 1
   474 ;; Hardware stack levels required when called: 1
   475 ;; This function calls:
   476 ;;		___awdiv
   477 ;;		___wmul
   478 ;;		_lcd_char
   479 ;; This function is called by:
   480 ;;		_main
   481 ;; This function uses a non-reentrant model
   482 ;;
   483                           
   484                           	psect	text3
   485  00060E                     __ptext3:
   486                           	callstack 0
   487  00060E                     _lcd_number:
   488                           	callstack 29
   489  00060E                     
   490                           ;MyLcd16.c: 40: void lcd_number(int num);MyLcd16.c: 41: {;MyLcd16.c: 42:     int num_div
      +                           = 10000;
   491  00060E  0E27               	movlw	39
   492  000610  6E10               	movwf	(lcd_number@num_div+1)^0,c
   493  000612  0E10               	movlw	16
   494  000614  6E0F               	movwf	lcd_number@num_div^0,c
   495  000616                     
   496                           ;MyLcd16.c: 43:     int num_test = num;
   497  000616  C009  F00D         	movff	lcd_number@num,lcd_number@num_test
   498  00061A  C00A  F00E         	movff	lcd_number@num+1,lcd_number@num_test+1
   499  00061E                     
   500                           ;MyLcd16.c: 46:     if (num != 0) while (num_test/num_div <= 0 )
   501  00061E  5009               	movf	lcd_number@num^0,w,c
   502  000620  100A               	iorwf	(lcd_number@num+1)^0,w,c
   503  000622  B4D8               	btfsc	status,2,c
   504  000624  EF16  F003         	goto	u231
   505  000628  EF18  F003         	goto	u230
   506  00062C                     u231:
   507  00062C  EF41  F003         	goto	l965
   508  000630                     u230:
   509  000630  EF28  F003         	goto	l43
   510  000634                     l963:
   511                           
   512                           ;MyLcd16.c: 47:     {;MyLcd16.c: 48:         num_div /= 10;
   513  000634  C00F  F001         	movff	lcd_number@num_div,___awdiv@dividend
   514  000638  C010  F002         	movff	lcd_number@num_div+1,___awdiv@dividend+1
   515  00063C  0E00               	movlw	0
   516  00063E  6E04               	movwf	(___awdiv@divisor+1)^0,c
   517  000640  0E0A               	movlw	10
   518  000642  6E03               	movwf	___awdiv@divisor^0,c
   519  000644  EC83  F003         	call	___awdiv	;wreg free
   520  000648  C001  F00F         	movff	?___awdiv,lcd_number@num_div
   521  00064C  C002  F010         	movff	?___awdiv+1,lcd_number@num_div+1
   522  000650                     l43:
   523                           
   524                           ;MyLcd16.c: 46:     if (num != 0) while (num_test/num_div <= 0 )
   525  000650  C00D  F001         	movff	lcd_number@num_test,___awdiv@dividend
   526  000654  C00E  F002         	movff	lcd_number@num_test+1,___awdiv@dividend+1
   527  000658  C00F  F003         	movff	lcd_number@num_div,___awdiv@divisor
   528  00065C  C010  F004         	movff	lcd_number@num_div+1,___awdiv@divisor+1
   529  000660  EC83  F003         	call	___awdiv	;wreg free
   530  000664  BE02               	btfsc	(?___awdiv+1)^0,7,c
   531  000666  EF3D  F003         	goto	u241
   532  00066A  5002               	movf	(?___awdiv+1)^0,w,c
   533  00066C  E108               	bnz	u240
   534  00066E  0401               	decf	?___awdiv^0,w,c
   535  000670  A0D8               	btfss	status,0,c
   536  000672  EF3D  F003         	goto	u241
   537  000676  EF3F  F003         	goto	u240
   538  00067A                     u241:
   539  00067A  EF1A  F003         	goto	l963
   540  00067E                     u240:
   541  00067E  EF45  F003         	goto	l967
   542  000682                     l965:
   543  000682  0E00               	movlw	0
   544  000684  6E10               	movwf	(lcd_number@num_div+1)^0,c
   545  000686  0E01               	movlw	1
   546  000688  6E0F               	movwf	lcd_number@num_div^0,c
   547  00068A                     l967:
   548                           
   549                           ;MyLcd16.c: 53:     {;MyLcd16.c: 54:         num_display = num_test/num_div;
   550  00068A  C00D  F001         	movff	lcd_number@num_test,___awdiv@dividend
   551  00068E  C00E  F002         	movff	lcd_number@num_test+1,___awdiv@dividend+1
   552  000692  C00F  F003         	movff	lcd_number@num_div,___awdiv@divisor
   553  000696  C010  F004         	movff	lcd_number@num_div+1,___awdiv@divisor+1
   554  00069A  EC83  F003         	call	___awdiv	;wreg free
   555  00069E  C001  F00B         	movff	?___awdiv,lcd_number@num_display
   556  0006A2  C002  F00C         	movff	?___awdiv+1,lcd_number@num_display+1
   557  0006A6                     
   558                           ;MyLcd16.c: 55:         lcd_char(num_display + 48U);
   559  0006A6  500B               	movf	lcd_number@num_display^0,w,c
   560  0006A8  0F30               	addlw	48
   561  0006AA  EC98  F004         	call	_lcd_char
   562  0006AE                     
   563                           ;MyLcd16.c: 56:         num_test = num_test - num_div*num_display;
   564  0006AE  C00F  F001         	movff	lcd_number@num_div,___wmul@multiplier
   565  0006B2  C010  F002         	movff	lcd_number@num_div+1,___wmul@multiplier+1
   566  0006B6  C00B  F003         	movff	lcd_number@num_display,___wmul@multiplicand
   567  0006BA  C00C  F004         	movff	lcd_number@num_display+1,___wmul@multiplicand+1
   568  0006BE  ECC4  F004         	call	___wmul	;wreg free
   569  0006C2  5001               	movf	?___wmul^0,w,c
   570  0006C4  5C0D               	subwf	lcd_number@num_test^0,w,c
   571  0006C6  6E0D               	movwf	lcd_number@num_test^0,c
   572  0006C8  5002               	movf	(?___wmul+1)^0,w,c
   573  0006CA  580E               	subwfb	(lcd_number@num_test+1)^0,w,c
   574  0006CC  6E0E               	movwf	(lcd_number@num_test+1)^0,c
   575  0006CE                     
   576                           ;MyLcd16.c: 57:         num_div /= 10;
   577  0006CE  C00F  F001         	movff	lcd_number@num_div,___awdiv@dividend
   578  0006D2  C010  F002         	movff	lcd_number@num_div+1,___awdiv@dividend+1
   579  0006D6  0E00               	movlw	0
   580  0006D8  6E04               	movwf	(___awdiv@divisor+1)^0,c
   581  0006DA  0E0A               	movlw	10
   582  0006DC  6E03               	movwf	___awdiv@divisor^0,c
   583  0006DE  EC83  F003         	call	___awdiv	;wreg free
   584  0006E2  C001  F00F         	movff	?___awdiv,lcd_number@num_div
   585  0006E6  C002  F010         	movff	?___awdiv+1,lcd_number@num_div+1
   586  0006EA                     
   587                           ;MyLcd16.c: 58:     }
   588  0006EA  BE10               	btfsc	(lcd_number@num_div+1)^0,7,c
   589  0006EC  EF82  F003         	goto	u250
   590  0006F0  5010               	movf	(lcd_number@num_div+1)^0,w,c
   591  0006F2  E106               	bnz	u251
   592  0006F4  040F               	decf	lcd_number@num_div^0,w,c
   593  0006F6  B0D8               	btfsc	status,0,c
   594  0006F8  EF80  F003         	goto	u251
   595  0006FC  EF82  F003         	goto	u250
   596  000700                     u251:
   597  000700  EF45  F003         	goto	l967
   598  000704                     u250:
   599  000704  0012               	return		;funcret
   600  000706                     __end_of_lcd_number:
   601                           	callstack 0
   602                           
   603 ;; *************** function _lcd_char *****************
   604 ;; Defined at:
   605 ;;		line 20 in file "MyLcd16.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;  data            1    wreg     unsigned char 
   608 ;; Auto vars:     Size  Location     Type
   609 ;;  data            1    1[COMRAM] unsigned char 
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, status,2, status,0
   614 ;; Tracked objects:
   615 ;;		On entry : 0/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   619 ;;      Params:         0       0       0       0       0       0       0
   620 ;;      Locals:         1       0       0       0       0       0       0
   621 ;;      Temps:          1       0       0       0       0       0       0
   622 ;;      Totals:         2       0       0       0       0       0       0
   623 ;;Total ram usage:        2 bytes
   624 ;; Hardware stack levels used: 1
   625 ;; This function calls:
   626 ;;		Nothing
   627 ;; This function is called by:
   628 ;;		_lcd_string
   629 ;;		_lcd_number
   630 ;; This function uses a non-reentrant model
   631 ;;
   632                           
   633                           	psect	text4
   634  000930                     __ptext4:
   635                           	callstack 0
   636  000930                     _lcd_char:
   637                           	callstack 29
   638                           
   639                           ;incstack = 0
   640                           ;lcd_char@data stored from wreg
   641  000930  6E02               	movwf	lcd_char@data^0,c
   642  000932                     
   643                           ;MyLcd16.c: 20: void lcd_char(char data);MyLcd16.c: 21: {;MyLcd16.c: 22:     PORTC &= ~(
      +                          1<<5);
   644  000932  9A82               	bcf	130,5,c	;volatile
   645                           
   646                           ;MyLcd16.c: 23:  PORTC |= (1<<4);
   647  000934  8882               	bsf	130,4,c	;volatile
   648  000936                     
   649                           ;MyLcd16.c: 24:  PORTD = data;
   650  000936  C002  FF83         	movff	lcd_char@data,3971	;volatile
   651  00093A                     
   652                           ;MyLcd16.c: 27:  PORTC |= (1<<6);
   653  00093A  8C82               	bsf	130,6,c	;volatile
   654  00093C                     
   655                           ;MyLcd16.c: 28:  _delay((unsigned long)((1)*(8000000/4000.0)));
   656  00093C  0E03               	movlw	3
   657  00093E  6E01               	movwf	??_lcd_char^0,c
   658  000940  0E98               	movlw	152
   659  000942                     u297:
   660  000942  2EE8               	decfsz	wreg,f,c
   661  000944  D7FE               	bra	u297
   662  000946  2E01               	decfsz	??_lcd_char^0,f,c
   663  000948  D7FC               	bra	u297
   664  00094A                     
   665                           ;MyLcd16.c: 29:     PORTC &= ~(1<<6);
   666  00094A  9C82               	bcf	130,6,c	;volatile
   667  00094C                     
   668                           ;MyLcd16.c: 30:  _delay((unsigned long)((3)*(8000000/4000.0)));
   669  00094C  0E08               	movlw	8
   670  00094E  6E01               	movwf	??_lcd_char^0,c
   671  000950  0ECA               	movlw	202
   672  000952                     u307:
   673  000952  2EE8               	decfsz	wreg,f,c
   674  000954  D7FE               	bra	u307
   675  000956  2E01               	decfsz	??_lcd_char^0,f,c
   676  000958  D7FC               	bra	u307
   677  00095A  0012               	return		;funcret
   678  00095C                     __end_of_lcd_char:
   679                           	callstack 0
   680                           
   681 ;; *************** function ___wmul *****************
   682 ;; Defined at:
   683 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
   684 ;; Parameters:    Size  Location     Type
   685 ;;  multiplier      2    0[COMRAM] unsigned int 
   686 ;;  multiplicand    2    2[COMRAM] unsigned int 
   687 ;; Auto vars:     Size  Location     Type
   688 ;;  product         2    4[COMRAM] unsigned int 
   689 ;; Return value:  Size  Location     Type
   690 ;;                  2    0[COMRAM] unsigned int 
   691 ;; Registers used:
   692 ;;		wreg, status,2, status,0, prodl, prodh
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   698 ;;      Params:         4       0       0       0       0       0       0
   699 ;;      Locals:         2       0       0       0       0       0       0
   700 ;;      Temps:          0       0       0       0       0       0       0
   701 ;;      Totals:         6       0       0       0       0       0       0
   702 ;;Total ram usage:        6 bytes
   703 ;; Hardware stack levels used: 1
   704 ;; This function calls:
   705 ;;		Nothing
   706 ;; This function is called by:
   707 ;;		_lcd_number
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           	psect	text5
   712  000988                     __ptext5:
   713                           	callstack 0
   714  000988                     ___wmul:
   715                           	callstack 29
   716  000988  5001               	movf	___wmul@multiplier^0,w,c
   717  00098A  0203               	mulwf	___wmul@multiplicand^0,c
   718  00098C  CFF3 F005          	movff	prodl,___wmul@product
   719  000990  CFF4 F006          	movff	prodh,___wmul@product+1
   720  000994  5001               	movf	___wmul@multiplier^0,w,c
   721  000996  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   722  000998  50F3               	movf	243,w,c
   723  00099A  2606               	addwf	(___wmul@product+1)^0,f,c
   724  00099C  5002               	movf	(___wmul@multiplier+1)^0,w,c
   725  00099E  0203               	mulwf	___wmul@multiplicand^0,c
   726  0009A0  50F3               	movf	243,w,c
   727  0009A2  2606               	addwf	(___wmul@product+1)^0,f,c
   728  0009A4  C005  F001         	movff	___wmul@product,?___wmul
   729  0009A8  C006  F002         	movff	___wmul@product+1,?___wmul+1
   730  0009AC  0012               	return		;funcret
   731  0009AE                     __end_of___wmul:
   732                           	callstack 0
   733                           
   734 ;; *************** function ___awdiv *****************
   735 ;; Defined at:
   736 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;  dividend        2    0[COMRAM] int 
   739 ;;  divisor         2    2[COMRAM] int 
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  quotient        2    6[COMRAM] int 
   742 ;;  sign            1    5[COMRAM] unsigned char 
   743 ;;  counter         1    4[COMRAM] unsigned char 
   744 ;; Return value:  Size  Location     Type
   745 ;;                  2    0[COMRAM] int 
   746 ;; Registers used:
   747 ;;		wreg, status,2, status,0
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   753 ;;      Params:         4       0       0       0       0       0       0
   754 ;;      Locals:         4       0       0       0       0       0       0
   755 ;;      Temps:          0       0       0       0       0       0       0
   756 ;;      Totals:         8       0       0       0       0       0       0
   757 ;;Total ram usage:        8 bytes
   758 ;; Hardware stack levels used: 1
   759 ;; This function calls:
   760 ;;		Nothing
   761 ;; This function is called by:
   762 ;;		_lcd_number
   763 ;; This function uses a non-reentrant model
   764 ;;
   765                           
   766                           	psect	text6
   767  000706                     __ptext6:
   768                           	callstack 0
   769  000706                     ___awdiv:
   770                           	callstack 29
   771  000706  0E00               	movlw	0
   772  000708  6E06               	movwf	___awdiv@sign^0,c
   773  00070A  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   774  00070C  EF8C  F003         	goto	u160
   775  000710  EF8A  F003         	goto	u161
   776  000714                     u161:
   777  000714  EF92  F003         	goto	l911
   778  000718                     u160:
   779  000718  6C03               	negf	___awdiv@divisor^0,c
   780  00071A  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   781  00071C  B0D8               	btfsc	status,0,c
   782  00071E  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   783  000720  0E01               	movlw	1
   784  000722  6E06               	movwf	___awdiv@sign^0,c
   785  000724                     l911:
   786  000724  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   787  000726  EF99  F003         	goto	u170
   788  00072A  EF97  F003         	goto	u171
   789  00072E                     u171:
   790  00072E  EF9F  F003         	goto	l917
   791  000732                     u170:
   792  000732  6C01               	negf	___awdiv@dividend^0,c
   793  000734  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   794  000736  B0D8               	btfsc	status,0,c
   795  000738  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   796  00073A  0E01               	movlw	1
   797  00073C  1A06               	xorwf	___awdiv@sign^0,f,c
   798  00073E                     l917:
   799  00073E  0E00               	movlw	0
   800  000740  6E08               	movwf	(___awdiv@quotient+1)^0,c
   801  000742  0E00               	movlw	0
   802  000744  6E07               	movwf	___awdiv@quotient^0,c
   803  000746  5003               	movf	___awdiv@divisor^0,w,c
   804  000748  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   805  00074A  B4D8               	btfsc	status,2,c
   806  00074C  EFAA  F003         	goto	u181
   807  000750  EFAC  F003         	goto	u180
   808  000754                     u181:
   809  000754  EFD4  F003         	goto	l939
   810  000758                     u180:
   811  000758  0E01               	movlw	1
   812  00075A  6E05               	movwf	___awdiv@counter^0,c
   813  00075C  EFB4  F003         	goto	l925
   814  000760                     l923:
   815  000760  90D8               	bcf	status,0,c
   816  000762  3603               	rlcf	___awdiv@divisor^0,f,c
   817  000764  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   818  000766  2A05               	incf	___awdiv@counter^0,f,c
   819  000768                     l925:
   820  000768  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   821  00076A  EFB9  F003         	goto	u191
   822  00076E  EFBB  F003         	goto	u190
   823  000772                     u191:
   824  000772  EFB0  F003         	goto	l923
   825  000776                     u190:
   826  000776                     l927:
   827  000776  90D8               	bcf	status,0,c
   828  000778  3607               	rlcf	___awdiv@quotient^0,f,c
   829  00077A  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   830  00077C  5003               	movf	___awdiv@divisor^0,w,c
   831  00077E  5C01               	subwf	___awdiv@dividend^0,w,c
   832  000780  5004               	movf	(___awdiv@divisor+1)^0,w,c
   833  000782  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   834  000784  A0D8               	btfss	status,0,c
   835  000786  EFC7  F003         	goto	u201
   836  00078A  EFC9  F003         	goto	u200
   837  00078E                     u201:
   838  00078E  EFCE  F003         	goto	l935
   839  000792                     u200:
   840  000792  5003               	movf	___awdiv@divisor^0,w,c
   841  000794  5E01               	subwf	___awdiv@dividend^0,f,c
   842  000796  5004               	movf	(___awdiv@divisor+1)^0,w,c
   843  000798  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   844  00079A  8007               	bsf	___awdiv@quotient^0,0,c
   845  00079C                     l935:
   846  00079C  90D8               	bcf	status,0,c
   847  00079E  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   848  0007A0  3203               	rrcf	___awdiv@divisor^0,f,c
   849  0007A2  2E05               	decfsz	___awdiv@counter^0,f,c
   850  0007A4  EFBB  F003         	goto	l927
   851  0007A8                     l939:
   852  0007A8  5006               	movf	___awdiv@sign^0,w,c
   853  0007AA  B4D8               	btfsc	status,2,c
   854  0007AC  EFDA  F003         	goto	u211
   855  0007B0  EFDC  F003         	goto	u210
   856  0007B4                     u211:
   857  0007B4  EFE0  F003         	goto	l943
   858  0007B8                     u210:
   859  0007B8  6C07               	negf	___awdiv@quotient^0,c
   860  0007BA  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   861  0007BC  B0D8               	btfsc	status,0,c
   862  0007BE  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   863  0007C0                     l943:
   864  0007C0  C007  F001         	movff	___awdiv@quotient,?___awdiv
   865  0007C4  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   866  0007C8  0012               	return		;funcret
   867  0007CA                     __end_of___awdiv:
   868                           	callstack 0
   869                           
   870 ;; *************** function _lcd_command *****************
   871 ;; Defined at:
   872 ;;		line 6 in file "MyLcd16.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;  cmnd            1    wreg     unsigned char 
   875 ;; Auto vars:     Size  Location     Type
   876 ;;  cmnd            1    1[COMRAM] unsigned char 
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      void 
   879 ;; Registers used:
   880 ;;		wreg, status,2, status,0
   881 ;; Tracked objects:
   882 ;;		On entry : 0/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   886 ;;      Params:         0       0       0       0       0       0       0
   887 ;;      Locals:         1       0       0       0       0       0       0
   888 ;;      Temps:          1       0       0       0       0       0       0
   889 ;;      Totals:         2       0       0       0       0       0       0
   890 ;;Total ram usage:        2 bytes
   891 ;; Hardware stack levels used: 1
   892 ;; This function calls:
   893 ;;		Nothing
   894 ;; This function is called by:
   895 ;;		_main
   896 ;; This function uses a non-reentrant model
   897 ;;
   898                           
   899                           	psect	text7
   900  00095C                     __ptext7:
   901                           	callstack 0
   902  00095C                     _lcd_command:
   903                           	callstack 30
   904                           
   905                           ;incstack = 0
   906                           ;lcd_command@cmnd stored from wreg
   907  00095C  6E02               	movwf	lcd_command@cmnd^0,c
   908  00095E                     
   909                           ;MyLcd16.c: 6: void lcd_command(char cmnd);MyLcd16.c: 7: {;MyLcd16.c: 8:  PORTC &= ~(1<<
      +                          5);
   910  00095E  9A82               	bcf	130,5,c	;volatile
   911                           
   912                           ;MyLcd16.c: 9:  PORTC &= ~(1<<4);
   913  000960  9882               	bcf	130,4,c	;volatile
   914  000962                     
   915                           ;MyLcd16.c: 11:  PORTD = cmnd;
   916  000962  C002  FF83         	movff	lcd_command@cmnd,3971	;volatile
   917  000966                     
   918                           ;MyLcd16.c: 14:  PORTC |= (1<<6);
   919  000966  8C82               	bsf	130,6,c	;volatile
   920  000968                     
   921                           ;MyLcd16.c: 15:  _delay((unsigned long)((1)*(8000000/4000.0)));
   922  000968  0E03               	movlw	3
   923  00096A  6E01               	movwf	??_lcd_command^0,c
   924  00096C  0E98               	movlw	152
   925  00096E                     u317:
   926  00096E  2EE8               	decfsz	wreg,f,c
   927  000970  D7FE               	bra	u317
   928  000972  2E01               	decfsz	??_lcd_command^0,f,c
   929  000974  D7FC               	bra	u317
   930  000976                     
   931                           ;MyLcd16.c: 16:     PORTC &= ~(1<<6);
   932  000976  9C82               	bcf	130,6,c	;volatile
   933  000978                     
   934                           ;MyLcd16.c: 17:  _delay((unsigned long)((3)*(8000000/4000.0)));
   935  000978  0E08               	movlw	8
   936  00097A  6E01               	movwf	??_lcd_command^0,c
   937  00097C  0ECA               	movlw	202
   938  00097E                     u327:
   939  00097E  2EE8               	decfsz	wreg,f,c
   940  000980  D7FE               	bra	u327
   941  000982  2E01               	decfsz	??_lcd_command^0,f,c
   942  000984  D7FC               	bra	u327
   943  000986  0012               	return		;funcret
   944  000988                     __end_of_lcd_command:
   945                           	callstack 0
   946                           
   947 ;; *************** function ___lwdiv *****************
   948 ;; Defined at:
   949 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\lwdiv.c"
   950 ;; Parameters:    Size  Location     Type
   951 ;;  dividend        2    0[COMRAM] unsigned int 
   952 ;;  divisor         2    2[COMRAM] unsigned int 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  quotient        2    4[COMRAM] unsigned int 
   955 ;;  counter         1    6[COMRAM] unsigned char 
   956 ;; Return value:  Size  Location     Type
   957 ;;                  2    0[COMRAM] unsigned int 
   958 ;; Registers used:
   959 ;;		wreg, status,2, status,0
   960 ;; Tracked objects:
   961 ;;		On entry : 0/0
   962 ;;		On exit  : 0/0
   963 ;;		Unchanged: 0/0
   964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   965 ;;      Params:         4       0       0       0       0       0       0
   966 ;;      Locals:         3       0       0       0       0       0       0
   967 ;;      Temps:          0       0       0       0       0       0       0
   968 ;;      Totals:         7       0       0       0       0       0       0
   969 ;;Total ram usage:        7 bytes
   970 ;; Hardware stack levels used: 1
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_main
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text8
   979  0007CA                     __ptext8:
   980                           	callstack 0
   981  0007CA                     ___lwdiv:
   982                           	callstack 30
   983  0007CA  0E00               	movlw	0
   984  0007CC  6E06               	movwf	(___lwdiv@quotient+1)^0,c
   985  0007CE  0E00               	movlw	0
   986  0007D0  6E05               	movwf	___lwdiv@quotient^0,c
   987  0007D2  5003               	movf	___lwdiv@divisor^0,w,c
   988  0007D4  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
   989  0007D6  B4D8               	btfsc	status,2,c
   990  0007D8  EFF0  F003         	goto	u261
   991  0007DC  EFF2  F003         	goto	u260
   992  0007E0                     u261:
   993  0007E0  EF1A  F004         	goto	l543
   994  0007E4                     u260:
   995  0007E4  0E01               	movlw	1
   996  0007E6  6E07               	movwf	___lwdiv@counter^0,c
   997  0007E8  EFFA  F003         	goto	l985
   998  0007EC                     l983:
   999  0007EC  90D8               	bcf	status,0,c
  1000  0007EE  3603               	rlcf	___lwdiv@divisor^0,f,c
  1001  0007F0  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1002  0007F2  2A07               	incf	___lwdiv@counter^0,f,c
  1003  0007F4                     l985:
  1004  0007F4  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  1005  0007F6  EFFF  F003         	goto	u271
  1006  0007FA  EF01  F004         	goto	u270
  1007  0007FE                     u271:
  1008  0007FE  EFF6  F003         	goto	l983
  1009  000802                     u270:
  1010  000802                     l987:
  1011  000802  90D8               	bcf	status,0,c
  1012  000804  3605               	rlcf	___lwdiv@quotient^0,f,c
  1013  000806  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1014  000808  5003               	movf	___lwdiv@divisor^0,w,c
  1015  00080A  5C01               	subwf	___lwdiv@dividend^0,w,c
  1016  00080C  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  1017  00080E  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1018  000810  A0D8               	btfss	status,0,c
  1019  000812  EF0D  F004         	goto	u281
  1020  000816  EF0F  F004         	goto	u280
  1021  00081A                     u281:
  1022  00081A  EF14  F004         	goto	l995
  1023  00081E                     u280:
  1024  00081E  5003               	movf	___lwdiv@divisor^0,w,c
  1025  000820  5E01               	subwf	___lwdiv@dividend^0,f,c
  1026  000822  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  1027  000824  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1028  000826  8005               	bsf	___lwdiv@quotient^0,0,c
  1029  000828                     l995:
  1030  000828  90D8               	bcf	status,0,c
  1031  00082A  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1032  00082C  3203               	rrcf	___lwdiv@divisor^0,f,c
  1033  00082E  2E07               	decfsz	___lwdiv@counter^0,f,c
  1034  000830  EF01  F004         	goto	l987
  1035  000834                     l543:
  1036  000834  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  1037  000838  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1038  00083C  0012               	return		;funcret
  1039  00083E                     __end_of___lwdiv:
  1040                           	callstack 0
  1041                           
  1042                           	psect	rparam
  1043  0000                     
  1044                           	psect	idloc
  1045                           
  1046                           ;Config register IDLOC0 @ 0x200000
  1047                           ;	unspecified, using default values
  1048  200000                     	org	2097152
  1049  200000  FF                 	db	255
  1050                           
  1051                           ;Config register IDLOC1 @ 0x200001
  1052                           ;	unspecified, using default values
  1053  200001                     	org	2097153
  1054  200001  FF                 	db	255
  1055                           
  1056                           ;Config register IDLOC2 @ 0x200002
  1057                           ;	unspecified, using default values
  1058  200002                     	org	2097154
  1059  200002  FF                 	db	255
  1060                           
  1061                           ;Config register IDLOC3 @ 0x200003
  1062                           ;	unspecified, using default values
  1063  200003                     	org	2097155
  1064  200003  FF                 	db	255
  1065                           
  1066                           ;Config register IDLOC4 @ 0x200004
  1067                           ;	unspecified, using default values
  1068  200004                     	org	2097156
  1069  200004  FF                 	db	255
  1070                           
  1071                           ;Config register IDLOC5 @ 0x200005
  1072                           ;	unspecified, using default values
  1073  200005                     	org	2097157
  1074  200005  FF                 	db	255
  1075                           
  1076                           ;Config register IDLOC6 @ 0x200006
  1077                           ;	unspecified, using default values
  1078  200006                     	org	2097158
  1079  200006  FF                 	db	255
  1080                           
  1081                           ;Config register IDLOC7 @ 0x200007
  1082                           ;	unspecified, using default values
  1083  200007                     	org	2097159
  1084  200007  FF                 	db	255
  1085                           
  1086                           	psect	config
  1087                           
  1088                           ; Padding undefined space
  1089  300000                     	org	3145728
  1090  300000  FF                 	db	255
  1091                           
  1092                           ;Config register CONFIG1H @ 0x300001
  1093                           ;	Oscillator Selection bits
  1094                           ;	OSC = RCIO6, External RC oscillator, port function on RA6
  1095                           ;	Fail-Safe Clock Monitor Enable bit
  1096                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1097                           ;	Internal/External Oscillator Switchover bit
  1098                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1099  300001                     	org	3145729
  1100  300001  07                 	db	7
  1101                           
  1102                           ;Config register CONFIG2L @ 0x300002
  1103                           ;	Power-up Timer Enable bit
  1104                           ;	PWRT = OFF, PWRT disabled
  1105                           ;	Brown-out Reset Enable bits
  1106                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1107                           ;	Brown Out Reset Voltage bits
  1108                           ;	BORV = 3, Minimum setting
  1109  300002                     	org	3145730
  1110  300002  19                 	db	25
  1111                           
  1112                           ;Config register CONFIG2H @ 0x300003
  1113                           ;	Watchdog Timer Enable bit
  1114                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1115                           ;	Watchdog Timer Postscale Select bits
  1116                           ;	WDTPS = 32768, 1:32768
  1117  300003                     	org	3145731
  1118  300003  1E                 	db	30
  1119                           
  1120                           ; Padding undefined space
  1121  300004                     	org	3145732
  1122  300004  FF                 	db	255
  1123                           
  1124                           ;Config register CONFIG3H @ 0x300005
  1125                           ;	CCP2 MUX bit
  1126                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1127                           ;	PORTB A/D Enable bit
  1128                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1129                           ;	Low-Power Timer1 Oscillator Enable bit
  1130                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1131                           ;	MCLR Pin Enable bit
  1132                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  1133  300005                     	org	3145733
  1134  300005  01                 	db	1
  1135                           
  1136                           ;Config register CONFIG4L @ 0x300006
  1137                           ;	Stack Full/Underflow Reset Enable bit
  1138                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1139                           ;	Single-Supply ICSP Enable bit
  1140                           ;	LVP = OFF, Single-Supply ICSP disabled
  1141                           ;	Extended Instruction Set Enable bit
  1142                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1143                           ;	Background Debugger Enable bit
  1144                           ;	DEBUG = 0x1, unprogrammed default
  1145  300006                     	org	3145734
  1146  300006  80                 	db	128
  1147                           
  1148                           ; Padding undefined space
  1149  300007                     	org	3145735
  1150  300007  FF                 	db	255
  1151                           
  1152                           ;Config register CONFIG5L @ 0x300008
  1153                           ;	Code Protection bit
  1154                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1155                           ;	Code Protection bit
  1156                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1157                           ;	Code Protection bit
  1158                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1159                           ;	Code Protection bit
  1160                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1161  300008                     	org	3145736
  1162  300008  0F                 	db	15
  1163                           
  1164                           ;Config register CONFIG5H @ 0x300009
  1165                           ;	Boot Block Code Protection bit
  1166                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1167                           ;	Data EEPROM Code Protection bit
  1168                           ;	CPD = OFF, Data EEPROM not code-protected
  1169  300009                     	org	3145737
  1170  300009  C0                 	db	192
  1171                           
  1172                           ;Config register CONFIG6L @ 0x30000A
  1173                           ;	Write Protection bit
  1174                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1175                           ;	Write Protection bit
  1176                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1177                           ;	Write Protection bit
  1178                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1179                           ;	Write Protection bit
  1180                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1181  30000A                     	org	3145738
  1182  30000A  0F                 	db	15
  1183                           
  1184                           ;Config register CONFIG6H @ 0x30000B
  1185                           ;	Configuration Register Write Protection bit
  1186                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1187                           ;	Boot Block Write Protection bit
  1188                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1189                           ;	Data EEPROM Write Protection bit
  1190                           ;	WRTD = OFF, Data EEPROM not write-protected
  1191  30000B                     	org	3145739
  1192  30000B  E0                 	db	224
  1193                           
  1194                           ;Config register CONFIG7L @ 0x30000C
  1195                           ;	Table Read Protection bit
  1196                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1197                           ;	Table Read Protection bit
  1198                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1199                           ;	Table Read Protection bit
  1200                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1201                           ;	Table Read Protection bit
  1202                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1203  30000C                     	org	3145740
  1204  30000C  0F                 	db	15
  1205                           
  1206                           ;Config register CONFIG7H @ 0x30000D
  1207                           ;	Boot Block Table Read Protection bit
  1208                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1209  30000D                     	org	3145741
  1210  30000D  40                 	db	64
  1211                           tosu	equ	0xFFF
  1212                           tosh	equ	0xFFE
  1213                           tosl	equ	0xFFD
  1214                           stkptr	equ	0xFFC
  1215                           pclatu	equ	0xFFB
  1216                           pclath	equ	0xFFA
  1217                           pcl	equ	0xFF9
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           tblptrl	equ	0xFF6
  1221                           tablat	equ	0xFF5
  1222                           prodh	equ	0xFF4
  1223                           prodl	equ	0xFF3
  1224                           indf0	equ	0xFEF
  1225                           postinc0	equ	0xFEE
  1226                           postdec0	equ	0xFED
  1227                           preinc0	equ	0xFEC
  1228                           plusw0	equ	0xFEB
  1229                           fsr0h	equ	0xFEA
  1230                           fsr0l	equ	0xFE9
  1231                           wreg	equ	0xFE8
  1232                           indf1	equ	0xFE7
  1233                           postinc1	equ	0xFE6
  1234                           postdec1	equ	0xFE5
  1235                           preinc1	equ	0xFE4
  1236                           plusw1	equ	0xFE3
  1237                           fsr1h	equ	0xFE2
  1238                           fsr1l	equ	0xFE1
  1239                           bsr	equ	0xFE0
  1240                           indf2	equ	0xFDF
  1241                           postinc2	equ	0xFDE
  1242                           postdec2	equ	0xFDD
  1243                           preinc2	equ	0xFDC
  1244                           plusw2	equ	0xFDB
  1245                           fsr2h	equ	0xFDA
  1246                           fsr2l	equ	0xFD9
  1247                           status	equ	0xFD8

Data Sizes:
    Strings     11
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     18      18
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    lcd_string@str	PTR unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_lcd_number
    _lcd_string->_strlen
    _lcd_number->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2326
                                             16 COMRAM     2     2      0
                            ___lwdiv
                        _lcd_command
                         _lcd_number
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           6     4      2     347
                                              4 COMRAM     6     4      2
                           _lcd_char
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _lcd_number                                           8     6      2    1604
                                              8 COMRAM     8     6      2
                            ___awdiv
                             ___wmul
                           _lcd_char
 ---------------------------------------------------------------------------------
 (2) _lcd_char                                             2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     908
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_command                                          2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lwdiv
   _lcd_command
   _lcd_number
     ___awdiv
     ___wmul
     _lcd_char
   _lcd_string
     _lcd_char
     _strlen

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     12      12       1       14.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Apr 30 13:30:51 2021

           lcd_char@data 0002                       l30 0986                       l33 095A  
                     l43 0650                       l19 08A2                       l52 09AC  
                     l39 08F4                       l49 0704             ___awdiv@sign 0006  
    ___wmul@multiplicand 0003                      l283 07C8                      l550 083C  
                    l543 0834                      l811 0976                      l803 095E  
                    l731 0932                      l813 0978                      l805 0962  
                    l741 094C                      l733 0936                      l807 0966  
                    l911 0724                      l903 0706                      l735 093A  
                    l809 0968                      l921 0758                      l913 0732  
                    l905 070A                      l737 093C                      l729 092E  
                    l931 0792                      l923 0760                      l915 073A  
                    l907 0718                      l739 094A                      l941 07B8  
                    l933 079A                      l925 0768                      l917 073E  
                    l909 0720                      l943 07C0                      l935 079C  
                    l927 0776                      l919 0746                      l951 08CE  
                    l937 07A2                      l929 077C                      l953 08D2  
                    l939 07A8                      l971 06AE                      l963 0634  
                    l955 060E                      l891 0906                      l947 08A6  
                    l981 07E4                      l973 06CE                      l965 0682  
                    l957 0616                      l893 0922                      l949 08B2  
                    l991 081E                      l983 07EC                      l975 06EA  
                    l967 068A                      l959 061E                      l887 08F6  
                    l993 0826                      l985 07F4                      l977 07CA  
                    l897 0988                      l969 06A6                      l889 0902  
                    l995 0828                      l987 0802                      l979 07D2  
                    l899 09A4                      l997 082E                      l989 0808  
                    l999 083E                      u200 0792                      u201 078E  
                    u210 07B8                      u211 07B4                      u220 08F4  
                    u221 08F0                      u230 0630                      u150 0922  
                    u231 062C                      u151 091E                      u160 0718  
                    u240 067E                      u161 0714                      u241 067A  
                    u170 0732                      u250 0704                      u171 072E  
                    u307 0952                      u251 0700                      u260 07E4  
                    u180 0758                      u261 07E0                      u317 096E  
                    u181 0754                      u270 0802                      u190 0776  
                    u271 07FE                      u327 097E                      u191 0772  
                    u280 081E                      u281 081A                      u297 0942  
                    wreg 000FE8        lcd_number@num_div 000F                     l1001 084E  
                   l1011 0872                     l1003 0854                     l1013 087A  
                   l1005 085A                     l1015 0896                     l1007 0860  
                   l1009 086C                     STR_1 0601                     _main 083E  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
            lcd_string@i 0009       lcd_number@num_test 000D             ___param_bank 000000  
                  ?_main 0001          __end_of___awdiv 07CA          ___awdiv@divisor 0003  
        __end_of___lwdiv 083E          ___awdiv@counter 0005                    _PORTC 000F82  
                  _PORTD 000F83                    _TRISC 000F94                    _TRISD 000F95  
                  tablat 000FF5                    status 000FD8          __initialization 09AE  
           __end_of_main 08A6                   ??_main 0011            __activetblptr 000001  
       ___awdiv@dividend 0001            lcd_number@num 0009         __end_of_lcd_char 095C  
   __size_of_lcd_command 002C                   ___wmul 0988                ??___awdiv 0005  
              ??___lwdiv 0005         ___awdiv@quotient 0007                   isa$std 000001  
                 _strlen 08F6             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8            lcd_string@str 0005  
             __accesstop 0080  __end_of__initialization 09AE            ___rparam_used 000001  
         __pcstackCOMRAM 0001          lcd_command@cmnd 0002                  ?___wmul 0001  
                ?_strlen 0001               _lcd_number 060E                ?_lcd_char 0001  
             _lcd_string 08A6                  __Hparam 0000                  __Lparam 0000  
                ___awdiv 0706          __size_of___wmul 0026                  ___lwdiv 07CA  
           __psmallconst 0600                  __pcinit 09AE                  __ramtop 0600  
                __ptext0 083E                  __ptext1 08A6                  __ptext2 08F6  
                __ptext3 060E                  __ptext4 0930                  __ptext5 0988  
                __ptext6 0706                  __ptext7 095C                  __ptext8 07CA  
        __size_of_strlen 003A               ??_lcd_char 0001     end_of_initialization 09AE  
                strlen@a 0003                  strlen@s 0001              ?_lcd_number 0009  
            ?_lcd_string 0005    lcd_number@num_display 000B            ??_lcd_command 0001  
         __end_of___wmul 09AE           __end_of_strlen 0930      start_initialization 09AE  
               ??___wmul 0005      __size_of_lcd_number 00F8      __end_of_lcd_command 0988  
    __size_of_lcd_string 0050                 ??_strlen 0003        __size_of_lcd_char 002C  
       ___lwdiv@dividend 0001                 ?___awdiv 0001                 ?___lwdiv 0001  
            __smallconst 0600         ___lwdiv@quotient 0005           ___wmul@product 0005  
            _lcd_command 095C        ___wmul@multiplier 0001             ??_lcd_number 000B  
           ??_lcd_string 0007                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 0600       __end_of_lcd_number 0706         __size_of___awdiv 00C4  
       __size_of___lwdiv 0074       __end_of_lcd_string 08F6          ___lwdiv@divisor 0003  
        ___lwdiv@counter 0007                 _lcd_char 0930            __size_of_main 0068  
               isa$xinst 000000                 main@rate 0011             ?_lcd_command 0001  
