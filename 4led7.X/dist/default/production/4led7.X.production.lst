

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Apr 09 16:06:54 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 12/02/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4520 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	idataCOMRAM
    58  007BD6                     __pidataCOMRAM:
    59                           	callstack 0
    60                           
    61                           ;initializer for _ledcode
    62  007BD6  003F               	dw	63
    63  007BD8  0006               	dw	6
    64  007BDA  005B               	dw	91
    65  007BDC  004F               	dw	79
    66  007BDE  0066               	dw	102
    67  007BE0  006D               	dw	109
    68  007BE2  007D               	dw	125
    69  007BE4  0007               	dw	7
    70  007BE6  007F               	dw	127
    71  007BE8  006F               	dw	111
    72  0000                     _TRISB	set	3987
    73  0000                     _TRISC	set	3988
    74  0000                     _PORTB	set	3969
    75  0000                     _PORTCbits	set	3970
    76  0000                     _PORTC	set	3970
    77                           
    78                           ; #config settings
    79                           
    80                           	psect	cinit
    81  007C80                     __pcinit:
    82                           	callstack 0
    83  007C80                     start_initialization:
    84                           	callstack 0
    85  007C80                     __initialization:
    86                           	callstack 0
    87                           
    88                           ; Initialize objects allocated to COMRAM (20 bytes)
    89                           ; load TBLPTR registers with __pidataCOMRAM
    90  007C80  0ED6               	movlw	low __pidataCOMRAM
    91  007C82  6EF6               	movwf	tblptrl,c
    92  007C84  0E7B               	movlw	high __pidataCOMRAM
    93  007C86  6EF7               	movwf	tblptrh,c
    94  007C88  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    95  007C8A  6EF8               	movwf	tblptru,c
    96  007C8C  EE00  F018         	lfsr	0,__pdataCOMRAM
    97  007C90  EE10 F014          	lfsr	1,20
    98  007C94                     copy_data0:
    99  007C94  0009               	tblrd		*+
   100  007C96  CFF5 FFEE          	movff	tablat,postinc0
   101  007C9A  50E5               	movf	postdec1,w,c
   102  007C9C  50E1               	movf	fsr1l,w,c
   103  007C9E  E1FA               	bnz	copy_data0
   104  007CA0                     end_of_initialization:
   105                           	callstack 0
   106  007CA0                     __end_of__initialization:
   107                           	callstack 0
   108  007CA0  0100               	movlb	0
   109  007CA2  EF0D  F03F         	goto	_main	;jump to C main() function
   110                           
   111                           	psect	dataCOMRAM
   112  000018                     __pdataCOMRAM:
   113                           	callstack 0
   114  000018                     _ledcode:
   115                           	callstack 0
   116  000018                     	ds	20
   117                           
   118                           	psect	cstackCOMRAM
   119  000001                     __pcstackCOMRAM:
   120                           	callstack 0
   121  000001                     ?___wmul:
   122                           	callstack 0
   123  000001                     ?___awdiv:
   124                           	callstack 0
   125  000001                     ?___awmod:
   126                           	callstack 0
   127  000001                     HangDV@hangdv:
   128                           	callstack 0
   129  000001                     HangChuc@hangchuc:
   130                           	callstack 0
   131  000001                     HangTram@hangtram:
   132                           	callstack 0
   133  000001                     HangNghin@hangnghin:
   134                           	callstack 0
   135  000001                     ___wmul@multiplier:
   136                           	callstack 0
   137  000001                     ___awdiv@dividend:
   138                           	callstack 0
   139  000001                     ___awmod@dividend:
   140                           	callstack 0
   141                           
   142                           ; 2 bytes @ 0x0
   143  000001                     	ds	2
   144  000003                     ___wmul@multiplicand:
   145                           	callstack 0
   146  000003                     ___awdiv@divisor:
   147                           	callstack 0
   148  000003                     ___awmod@divisor:
   149                           	callstack 0
   150                           
   151                           ; 2 bytes @ 0x2
   152  000003                     	ds	2
   153  000005                     ___awdiv@counter:
   154                           	callstack 0
   155  000005                     ___awmod@counter:
   156                           	callstack 0
   157  000005                     ___wmul@product:
   158                           	callstack 0
   159                           
   160                           ; 2 bytes @ 0x4
   161  000005                     	ds	1
   162  000006                     ___awdiv@sign:
   163                           	callstack 0
   164  000006                     ___awmod@sign:
   165                           	callstack 0
   166                           
   167                           ; 1 bytes @ 0x5
   168  000006                     	ds	1
   169  000007                     ___awdiv@quotient:
   170                           	callstack 0
   171                           
   172                           ; 2 bytes @ 0x6
   173  000007                     	ds	2
   174  000009                     ??_main:
   175                           
   176                           ; 1 bytes @ 0x8
   177  000009                     	ds	1
   178  00000A                     main@hangnghin:
   179                           	callstack 0
   180                           
   181                           ; 2 bytes @ 0x9
   182  00000A                     	ds	2
   183  00000C                     main@hangtram:
   184                           	callstack 0
   185                           
   186                           ; 2 bytes @ 0xB
   187  00000C                     	ds	2
   188  00000E                     main@i:
   189                           	callstack 0
   190                           
   191                           ; 2 bytes @ 0xD
   192  00000E                     	ds	2
   193  000010                     main@hangchuc:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0xF
   197  000010                     	ds	2
   198  000012                     main@hangdv:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x11
   202  000012                     	ds	2
   203  000014                     main@time:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x13
   207  000014                     	ds	2
   208  000016                     main@timeTemp:
   209                           	callstack 0
   210                           
   211                           ; 2 bytes @ 0x15
   212  000016                     	ds	2
   213                           
   214 ;;
   215 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   216 ;;
   217 ;; *************** function _main *****************
   218 ;; Defined at:
   219 ;;		line 116 in file "newmain.c"
   220 ;; Parameters:    Size  Location     Type
   221 ;;		None
   222 ;; Auto vars:     Size  Location     Type
   223 ;;  i               2   13[COMRAM] int 
   224 ;;  timeTemp        2   21[COMRAM] int 
   225 ;;  time            2   19[COMRAM] int 
   226 ;;  hangdv          2   17[COMRAM] int 
   227 ;;  hangchuc        2   15[COMRAM] int 
   228 ;;  hangtram        2   11[COMRAM] int 
   229 ;;  hangnghin       2    9[COMRAM] int 
   230 ;; Return value:  Size  Location     Type
   231 ;;                  1    wreg      void 
   232 ;; Registers used:
   233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   234 ;; Tracked objects:
   235 ;;		On entry : 0/0
   236 ;;		On exit  : 0/0
   237 ;;		Unchanged: 0/0
   238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   239 ;;      Params:         0       0       0       0       0       0       0
   240 ;;      Locals:        14       0       0       0       0       0       0
   241 ;;      Temps:          1       0       0       0       0       0       0
   242 ;;      Totals:        15       0       0       0       0       0       0
   243 ;;Total ram usage:       15 bytes
   244 ;; Hardware stack levels required when called: 1
   245 ;; This function calls:
   246 ;;		_HangChuc
   247 ;;		_HangDV
   248 ;;		_HangNghin
   249 ;;		_HangTram
   250 ;;		___awdiv
   251 ;;		___awmod
   252 ;;		___wmul
   253 ;; This function is called by:
   254 ;;		Startup code after reset
   255 ;; This function uses a non-reentrant model
   256 ;;
   257                           
   258                           	psect	text0
   259  007E1A                     __ptext0:
   260                           	callstack 0
   261  007E1A                     _main:
   262                           	callstack 30
   263  007E1A                     
   264                           ;newmain.c: 117:     TRISC = 0;
   265  007E1A  0E00               	movlw	0
   266  007E1C  6E94               	movwf	148,c	;volatile
   267  007E1E                     
   268                           ;newmain.c: 118:     PORTC = 0xff;
   269  007E1E  6882               	setf	130,c	;volatile
   270                           
   271                           ;newmain.c: 119:     TRISB = 0;
   272  007E20  0E00               	movlw	0
   273  007E22  6E93               	movwf	147,c	;volatile
   274                           
   275                           ;newmain.c: 121:     int time = 0;
   276  007E24  0E00               	movlw	0
   277  007E26  6E15               	movwf	(main@time+1)^0,c
   278  007E28  0E00               	movlw	0
   279  007E2A  6E14               	movwf	main@time^0,c
   280  007E2C                     l976:
   281                           
   282                           ;newmain.c: 125:     {;newmain.c: 127:         time++;
   283  007E2C  4A14               	infsnz	main@time^0,f,c
   284  007E2E  2A15               	incf	(main@time+1)^0,f,c
   285  007E30                     
   286                           ;newmain.c: 128:         timeTemp = time;
   287  007E30  C014  F016         	movff	main@time,main@timeTemp
   288  007E34  C015  F017         	movff	main@time+1,main@timeTemp+1
   289  007E38                     
   290                           ;newmain.c: 129:         hangdv = timeTemp%10;
   291  007E38  C016  F001         	movff	main@timeTemp,___awmod@dividend
   292  007E3C  C017  F002         	movff	main@timeTemp+1,___awmod@dividend+1
   293  007E40  0E00               	movlw	0
   294  007E42  6E04               	movwf	(___awmod@divisor+1)^0,c
   295  007E44  0E0A               	movlw	10
   296  007E46  6E03               	movwf	___awmod@divisor^0,c
   297  007E48  EC53  F03E         	call	___awmod	;wreg free
   298  007E4C  C001  F012         	movff	?___awmod,main@hangdv
   299  007E50  C002  F013         	movff	?___awmod+1,main@hangdv+1
   300  007E54                     
   301                           ;newmain.c: 130:         timeTemp = (timeTemp - hangdv)/10;
   302  007E54  5012               	movf	main@hangdv^0,w,c
   303  007E56  5C16               	subwf	main@timeTemp^0,w,c
   304  007E58  6E01               	movwf	___awdiv@dividend^0,c
   305  007E5A  5013               	movf	(main@hangdv+1)^0,w,c
   306  007E5C  5817               	subwfb	(main@timeTemp+1)^0,w,c
   307  007E5E  6E02               	movwf	(___awdiv@dividend+1)^0,c
   308  007E60  0E00               	movlw	0
   309  007E62  6E04               	movwf	(___awdiv@divisor+1)^0,c
   310  007E64  0E0A               	movlw	10
   311  007E66  6E03               	movwf	___awdiv@divisor^0,c
   312  007E68  ECAB  F03E         	call	___awdiv	;wreg free
   313  007E6C  C001  F016         	movff	?___awdiv,main@timeTemp
   314  007E70  C002  F017         	movff	?___awdiv+1,main@timeTemp+1
   315  007E74                     
   316                           ;newmain.c: 131:         hangchuc = timeTemp%10;
   317  007E74  C016  F001         	movff	main@timeTemp,___awmod@dividend
   318  007E78  C017  F002         	movff	main@timeTemp+1,___awmod@dividend+1
   319  007E7C  0E00               	movlw	0
   320  007E7E  6E04               	movwf	(___awmod@divisor+1)^0,c
   321  007E80  0E0A               	movlw	10
   322  007E82  6E03               	movwf	___awmod@divisor^0,c
   323  007E84  EC53  F03E         	call	___awmod	;wreg free
   324  007E88  C001  F010         	movff	?___awmod,main@hangchuc
   325  007E8C  C002  F011         	movff	?___awmod+1,main@hangchuc+1
   326  007E90                     
   327                           ;newmain.c: 132:         timeTemp = (timeTemp - hangchuc)/10;
   328  007E90  5010               	movf	main@hangchuc^0,w,c
   329  007E92  5C16               	subwf	main@timeTemp^0,w,c
   330  007E94  6E01               	movwf	___awdiv@dividend^0,c
   331  007E96  5011               	movf	(main@hangchuc+1)^0,w,c
   332  007E98  5817               	subwfb	(main@timeTemp+1)^0,w,c
   333  007E9A  6E02               	movwf	(___awdiv@dividend+1)^0,c
   334  007E9C  0E00               	movlw	0
   335  007E9E  6E04               	movwf	(___awdiv@divisor+1)^0,c
   336  007EA0  0E0A               	movlw	10
   337  007EA2  6E03               	movwf	___awdiv@divisor^0,c
   338  007EA4  ECAB  F03E         	call	___awdiv	;wreg free
   339  007EA8  C001  F016         	movff	?___awdiv,main@timeTemp
   340  007EAC  C002  F017         	movff	?___awdiv+1,main@timeTemp+1
   341  007EB0                     
   342                           ;newmain.c: 133:         hangtram = timeTemp%10;
   343  007EB0  C016  F001         	movff	main@timeTemp,___awmod@dividend
   344  007EB4  C017  F002         	movff	main@timeTemp+1,___awmod@dividend+1
   345  007EB8  0E00               	movlw	0
   346  007EBA  6E04               	movwf	(___awmod@divisor+1)^0,c
   347  007EBC  0E0A               	movlw	10
   348  007EBE  6E03               	movwf	___awmod@divisor^0,c
   349  007EC0  EC53  F03E         	call	___awmod	;wreg free
   350  007EC4  C001  F00C         	movff	?___awmod,main@hangtram
   351  007EC8  C002  F00D         	movff	?___awmod+1,main@hangtram+1
   352  007ECC                     
   353                           ;newmain.c: 134:         timeTemp = (timeTemp - hangtram)/10;
   354  007ECC  500C               	movf	main@hangtram^0,w,c
   355  007ECE  5C16               	subwf	main@timeTemp^0,w,c
   356  007ED0  6E01               	movwf	___awdiv@dividend^0,c
   357  007ED2  500D               	movf	(main@hangtram+1)^0,w,c
   358  007ED4  5817               	subwfb	(main@timeTemp+1)^0,w,c
   359  007ED6  6E02               	movwf	(___awdiv@dividend+1)^0,c
   360  007ED8  0E00               	movlw	0
   361  007EDA  6E04               	movwf	(___awdiv@divisor+1)^0,c
   362  007EDC  0E0A               	movlw	10
   363  007EDE  6E03               	movwf	___awdiv@divisor^0,c
   364  007EE0  ECAB  F03E         	call	___awdiv	;wreg free
   365  007EE4  C001  F016         	movff	?___awdiv,main@timeTemp
   366  007EE8  C002  F017         	movff	?___awdiv+1,main@timeTemp+1
   367  007EEC                     
   368                           ;newmain.c: 135:         hangnghin = timeTemp%10;
   369  007EEC  C016  F001         	movff	main@timeTemp,___awmod@dividend
   370  007EF0  C017  F002         	movff	main@timeTemp+1,___awmod@dividend+1
   371  007EF4  0E00               	movlw	0
   372  007EF6  6E04               	movwf	(___awmod@divisor+1)^0,c
   373  007EF8  0E0A               	movlw	10
   374  007EFA  6E03               	movwf	___awmod@divisor^0,c
   375  007EFC  EC53  F03E         	call	___awmod	;wreg free
   376  007F00  C001  F00A         	movff	?___awmod,main@hangnghin
   377  007F04  C002  F00B         	movff	?___awmod+1,main@hangnghin+1
   378  007F08                     
   379                           ;newmain.c: 138:         for(int i = 0; i<25; i++)
   380  007F08  0E00               	movlw	0
   381  007F0A  6E0F               	movwf	(main@i+1)^0,c
   382  007F0C  0E00               	movlw	0
   383  007F0E  6E0E               	movwf	main@i^0,c
   384  007F10                     l1000:
   385                           
   386                           ;newmain.c: 139:         {;newmain.c: 140:             HangDV(hangdv);
   387  007F10  C012  F001         	movff	main@hangdv,HangDV@hangdv
   388  007F14  C013  F002         	movff	main@hangdv+1,HangDV@hangdv+1
   389  007F18  EC03  F03E         	call	_HangDV	;wreg free
   390  007F1C                     
   391                           ;newmain.c: 141:             _delay((unsigned long)((10)*(20000000/4000.0)));
   392  007F1C  0E41               	movlw	65
   393  007F1E  6E09               	movwf	??_main^0,c
   394  007F20  0EEE               	movlw	238
   395  007F22                     u317:
   396  007F22  2EE8               	decfsz	wreg,f,c
   397  007F24  D7FE               	bra	u317
   398  007F26  2E09               	decfsz	??_main^0,f,c
   399  007F28  D7FC               	bra	u317
   400  007F2A  D000               	nop2	
   401  007F2C                     
   402                           ;newmain.c: 142:             HangChuc(hangchuc);
   403  007F2C  C010  F001         	movff	main@hangchuc,HangChuc@hangchuc
   404  007F30  C011  F002         	movff	main@hangchuc+1,HangChuc@hangchuc+1
   405  007F34  ECF5  F03D         	call	_HangChuc	;wreg free
   406                           
   407                           ;newmain.c: 143:             _delay((unsigned long)((10)*(20000000/4000.0)));
   408  007F38  0E41               	movlw	65
   409  007F3A  6E09               	movwf	??_main^0,c
   410  007F3C  0EEE               	movlw	238
   411  007F3E                     u327:
   412  007F3E  2EE8               	decfsz	wreg,f,c
   413  007F40  D7FE               	bra	u327
   414  007F42  2E09               	decfsz	??_main^0,f,c
   415  007F44  D7FC               	bra	u327
   416  007F46  D000               	nop2	
   417  007F48                     
   418                           ;newmain.c: 144:             HangTram(hangtram);
   419  007F48  C00C  F001         	movff	main@hangtram,HangTram@hangtram
   420  007F4C  C00D  F002         	movff	main@hangtram+1,HangTram@hangtram+1
   421  007F50  EC1F  F03E         	call	_HangTram	;wreg free
   422  007F54                     
   423                           ;newmain.c: 145:             _delay((unsigned long)((10)*(20000000/4000.0)));
   424  007F54  0E41               	movlw	65
   425  007F56  6E09               	movwf	??_main^0,c
   426  007F58  0EEE               	movlw	238
   427  007F5A                     u337:
   428  007F5A  2EE8               	decfsz	wreg,f,c
   429  007F5C  D7FE               	bra	u337
   430  007F5E  2E09               	decfsz	??_main^0,f,c
   431  007F60  D7FC               	bra	u337
   432  007F62  D000               	nop2	
   433                           
   434                           ;newmain.c: 146:             HangNghin(hangnghin);
   435  007F64  C00A  F001         	movff	main@hangnghin,HangNghin@hangnghin
   436  007F68  C00B  F002         	movff	main@hangnghin+1,HangNghin@hangnghin+1
   437  007F6C  EC11  F03E         	call	_HangNghin	;wreg free
   438  007F70                     
   439                           ;newmain.c: 147:             _delay((unsigned long)((10)*(20000000/4000.0)));
   440  007F70  0E41               	movlw	65
   441  007F72  6E09               	movwf	??_main^0,c
   442  007F74  0EEE               	movlw	238
   443  007F76                     u347:
   444  007F76  2EE8               	decfsz	wreg,f,c
   445  007F78  D7FE               	bra	u347
   446  007F7A  2E09               	decfsz	??_main^0,f,c
   447  007F7C  D7FC               	bra	u347
   448  007F7E  D000               	nop2	
   449  007F80                     
   450                           ;newmain.c: 148:         }
   451  007F80  4A0E               	infsnz	main@i^0,f,c
   452  007F82  2A0F               	incf	(main@i+1)^0,f,c
   453  007F84  BE0F               	btfsc	(main@i+1)^0,7,c
   454  007F86  EFCE  F03F         	goto	u281
   455  007F8A  500F               	movf	(main@i+1)^0,w,c
   456  007F8C  E109               	bnz	u280
   457  007F8E  0E19               	movlw	25
   458  007F90  5C0E               	subwf	main@i^0,w,c
   459  007F92  A0D8               	btfss	status,0,c
   460  007F94  EFCE  F03F         	goto	u281
   461  007F98  EFD0  F03F         	goto	u280
   462  007F9C                     u281:
   463  007F9C  EF88  F03F         	goto	l1000
   464  007FA0                     u280:
   465  007FA0                     
   466                           ;newmain.c: 150:         if (hangchuc*10 + hangdv == 59) time+=40;
   467  007FA0  C010  F001         	movff	main@hangchuc,___wmul@multiplier
   468  007FA4  C011  F002         	movff	main@hangchuc+1,___wmul@multiplier+1
   469  007FA8  0E00               	movlw	0
   470  007FAA  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   471  007FAC  0E0A               	movlw	10
   472  007FAE  6E03               	movwf	___wmul@multiplicand^0,c
   473  007FB0  EC2D  F03E         	call	___wmul	;wreg free
   474  007FB4  5012               	movf	main@hangdv^0,w,c
   475  007FB6  2601               	addwf	?___wmul^0,f,c
   476  007FB8  5013               	movf	(main@hangdv+1)^0,w,c
   477  007FBA  2202               	addwfc	(?___wmul+1)^0,f,c
   478  007FBC  0E3B               	movlw	59
   479  007FBE  1801               	xorwf	?___wmul^0,w,c
   480  007FC0  1002               	iorwf	(?___wmul+1)^0,w,c
   481  007FC2  A4D8               	btfss	status,2,c
   482  007FC4  EFE6  F03F         	goto	u291
   483  007FC8  EFE8  F03F         	goto	u290
   484  007FCC                     u291:
   485  007FCC  EFEC  F03F         	goto	l34
   486  007FD0                     u290:
   487  007FD0  0E28               	movlw	40
   488  007FD2  2614               	addwf	main@time^0,f,c
   489  007FD4  0E00               	movlw	0
   490  007FD6  2215               	addwfc	(main@time+1)^0,f,c
   491  007FD8                     l34:
   492                           
   493                           ;newmain.c: 152:         if (time == 5999) time = 0;
   494  007FD8  0E6F               	movlw	111
   495  007FDA  1814               	xorwf	main@time^0,w,c
   496  007FDC  E107               	bnz	u301
   497  007FDE  0E17               	movlw	23
   498  007FE0  1815               	xorwf	(main@time+1)^0,w,c
   499  007FE2  A4D8               	btfss	status,2,c
   500  007FE4  EFF6  F03F         	goto	u301
   501  007FE8  EFF8  F03F         	goto	u300
   502  007FEC                     u301:
   503  007FEC  EF16  F03F         	goto	l976
   504  007FF0                     u300:
   505  007FF0  0E00               	movlw	0
   506  007FF2  6E15               	movwf	(main@time+1)^0,c
   507  007FF4  0E00               	movlw	0
   508  007FF6  6E14               	movwf	main@time^0,c
   509  007FF8  EF16  F03F         	goto	l976
   510  007FFC  EF00  F000         	goto	start
   511  008000                     __end_of_main:
   512                           	callstack 0
   513                           
   514 ;; *************** function ___wmul *****************
   515 ;; Defined at:
   516 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;  multiplier      2    0[COMRAM] unsigned int 
   519 ;;  multiplicand    2    2[COMRAM] unsigned int 
   520 ;; Auto vars:     Size  Location     Type
   521 ;;  product         2    4[COMRAM] unsigned int 
   522 ;; Return value:  Size  Location     Type
   523 ;;                  2    0[COMRAM] unsigned int 
   524 ;; Registers used:
   525 ;;		wreg, status,2, status,0, prodl, prodh
   526 ;; Tracked objects:
   527 ;;		On entry : 0/0
   528 ;;		On exit  : 0/0
   529 ;;		Unchanged: 0/0
   530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   531 ;;      Params:         4       0       0       0       0       0       0
   532 ;;      Locals:         2       0       0       0       0       0       0
   533 ;;      Temps:          0       0       0       0       0       0       0
   534 ;;      Totals:         6       0       0       0       0       0       0
   535 ;;Total ram usage:        6 bytes
   536 ;; Hardware stack levels used: 1
   537 ;; This function calls:
   538 ;;		Nothing
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           	psect	text1
   545  007C5A                     __ptext1:
   546                           	callstack 0
   547  007C5A                     ___wmul:
   548                           	callstack 30
   549  007C5A  5001               	movf	___wmul@multiplier^0,w,c
   550  007C5C  0203               	mulwf	___wmul@multiplicand^0,c
   551  007C5E  CFF3 F005          	movff	prodl,___wmul@product
   552  007C62  CFF4 F006          	movff	prodh,___wmul@product+1
   553  007C66  5001               	movf	___wmul@multiplier^0,w,c
   554  007C68  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   555  007C6A  50F3               	movf	243,w,c
   556  007C6C  2606               	addwf	(___wmul@product+1)^0,f,c
   557  007C6E  5002               	movf	(___wmul@multiplier+1)^0,w,c
   558  007C70  0203               	mulwf	___wmul@multiplicand^0,c
   559  007C72  50F3               	movf	243,w,c
   560  007C74  2606               	addwf	(___wmul@product+1)^0,f,c
   561  007C76  C005  F001         	movff	___wmul@product,?___wmul
   562  007C7A  C006  F002         	movff	___wmul@product+1,?___wmul+1
   563  007C7E  0012               	return		;funcret
   564  007C80                     __end_of___wmul:
   565                           	callstack 0
   566                           
   567 ;; *************** function ___awmod *****************
   568 ;; Defined at:
   569 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
   570 ;; Parameters:    Size  Location     Type
   571 ;;  dividend        2    0[COMRAM] int 
   572 ;;  divisor         2    2[COMRAM] int 
   573 ;; Auto vars:     Size  Location     Type
   574 ;;  sign            1    5[COMRAM] unsigned char 
   575 ;;  counter         1    4[COMRAM] unsigned char 
   576 ;; Return value:  Size  Location     Type
   577 ;;                  2    0[COMRAM] int 
   578 ;; Registers used:
   579 ;;		wreg, status,2, status,0
   580 ;; Tracked objects:
   581 ;;		On entry : 0/0
   582 ;;		On exit  : 0/0
   583 ;;		Unchanged: 0/0
   584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   585 ;;      Params:         4       0       0       0       0       0       0
   586 ;;      Locals:         2       0       0       0       0       0       0
   587 ;;      Temps:          0       0       0       0       0       0       0
   588 ;;      Totals:         6       0       0       0       0       0       0
   589 ;;Total ram usage:        6 bytes
   590 ;; Hardware stack levels used: 1
   591 ;; This function calls:
   592 ;;		Nothing
   593 ;; This function is called by:
   594 ;;		_main
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           	psect	text2
   599  007CA6                     __ptext2:
   600                           	callstack 0
   601  007CA6                     ___awmod:
   602                           	callstack 30
   603  007CA6  0E00               	movlw	0
   604  007CA8  6E06               	movwf	___awmod@sign^0,c
   605  007CAA  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
   606  007CAC  EF5C  F03E         	goto	u220
   607  007CB0  EF5A  F03E         	goto	u221
   608  007CB4                     u221:
   609  007CB4  EF62  F03E         	goto	l942
   610  007CB8                     u220:
   611  007CB8  6C01               	negf	___awmod@dividend^0,c
   612  007CBA  1E02               	comf	(___awmod@dividend+1)^0,f,c
   613  007CBC  B0D8               	btfsc	status,0,c
   614  007CBE  2A02               	incf	(___awmod@dividend+1)^0,f,c
   615  007CC0  0E01               	movlw	1
   616  007CC2  6E06               	movwf	___awmod@sign^0,c
   617  007CC4                     l942:
   618  007CC4  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
   619  007CC6  EF69  F03E         	goto	u230
   620  007CCA  EF67  F03E         	goto	u231
   621  007CCE                     u231:
   622  007CCE  EF6D  F03E         	goto	l946
   623  007CD2                     u230:
   624  007CD2  6C03               	negf	___awmod@divisor^0,c
   625  007CD4  1E04               	comf	(___awmod@divisor+1)^0,f,c
   626  007CD6  B0D8               	btfsc	status,0,c
   627  007CD8  2A04               	incf	(___awmod@divisor+1)^0,f,c
   628  007CDA                     l946:
   629  007CDA  5003               	movf	___awmod@divisor^0,w,c
   630  007CDC  1004               	iorwf	(___awmod@divisor+1)^0,w,c
   631  007CDE  B4D8               	btfsc	status,2,c
   632  007CE0  EF74  F03E         	goto	u241
   633  007CE4  EF76  F03E         	goto	u240
   634  007CE8                     u241:
   635  007CE8  EF9A  F03E         	goto	l962
   636  007CEC                     u240:
   637  007CEC  0E01               	movlw	1
   638  007CEE  6E05               	movwf	___awmod@counter^0,c
   639  007CF0  EF7E  F03E         	goto	l952
   640  007CF4                     l950:
   641  007CF4  90D8               	bcf	status,0,c
   642  007CF6  3603               	rlcf	___awmod@divisor^0,f,c
   643  007CF8  3604               	rlcf	(___awmod@divisor+1)^0,f,c
   644  007CFA  2A05               	incf	___awmod@counter^0,f,c
   645  007CFC                     l952:
   646  007CFC  AE04               	btfss	(___awmod@divisor+1)^0,7,c
   647  007CFE  EF83  F03E         	goto	u251
   648  007D02  EF85  F03E         	goto	u250
   649  007D06                     u251:
   650  007D06  EF7A  F03E         	goto	l950
   651  007D0A                     u250:
   652  007D0A                     l954:
   653  007D0A  5003               	movf	___awmod@divisor^0,w,c
   654  007D0C  5C01               	subwf	___awmod@dividend^0,w,c
   655  007D0E  5004               	movf	(___awmod@divisor+1)^0,w,c
   656  007D10  5802               	subwfb	(___awmod@dividend+1)^0,w,c
   657  007D12  A0D8               	btfss	status,0,c
   658  007D14  EF8E  F03E         	goto	u261
   659  007D18  EF90  F03E         	goto	u260
   660  007D1C                     u261:
   661  007D1C  EF94  F03E         	goto	l958
   662  007D20                     u260:
   663  007D20  5003               	movf	___awmod@divisor^0,w,c
   664  007D22  5E01               	subwf	___awmod@dividend^0,f,c
   665  007D24  5004               	movf	(___awmod@divisor+1)^0,w,c
   666  007D26  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
   667  007D28                     l958:
   668  007D28  90D8               	bcf	status,0,c
   669  007D2A  3204               	rrcf	(___awmod@divisor+1)^0,f,c
   670  007D2C  3203               	rrcf	___awmod@divisor^0,f,c
   671  007D2E  2E05               	decfsz	___awmod@counter^0,f,c
   672  007D30  EF85  F03E         	goto	l954
   673  007D34                     l962:
   674  007D34  5006               	movf	___awmod@sign^0,w,c
   675  007D36  B4D8               	btfsc	status,2,c
   676  007D38  EFA0  F03E         	goto	u271
   677  007D3C  EFA2  F03E         	goto	u270
   678  007D40                     u271:
   679  007D40  EFA6  F03E         	goto	l966
   680  007D44                     u270:
   681  007D44  6C01               	negf	___awmod@dividend^0,c
   682  007D46  1E02               	comf	(___awmod@dividend+1)^0,f,c
   683  007D48  B0D8               	btfsc	status,0,c
   684  007D4A  2A02               	incf	(___awmod@dividend+1)^0,f,c
   685  007D4C                     l966:
   686  007D4C  C001  F001         	movff	___awmod@dividend,?___awmod
   687  007D50  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   688  007D54  0012               	return		;funcret
   689  007D56                     __end_of___awmod:
   690                           	callstack 0
   691                           
   692 ;; *************** function ___awdiv *****************
   693 ;; Defined at:
   694 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;  dividend        2    0[COMRAM] int 
   697 ;;  divisor         2    2[COMRAM] int 
   698 ;; Auto vars:     Size  Location     Type
   699 ;;  quotient        2    6[COMRAM] int 
   700 ;;  sign            1    5[COMRAM] unsigned char 
   701 ;;  counter         1    4[COMRAM] unsigned char 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  2    0[COMRAM] int 
   704 ;; Registers used:
   705 ;;		wreg, status,2, status,0
   706 ;; Tracked objects:
   707 ;;		On entry : 0/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   711 ;;      Params:         4       0       0       0       0       0       0
   712 ;;      Locals:         4       0       0       0       0       0       0
   713 ;;      Temps:          0       0       0       0       0       0       0
   714 ;;      Totals:         8       0       0       0       0       0       0
   715 ;;Total ram usage:        8 bytes
   716 ;; Hardware stack levels used: 1
   717 ;; This function calls:
   718 ;;		Nothing
   719 ;; This function is called by:
   720 ;;		_main
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           	psect	text3
   725  007D56                     __ptext3:
   726                           	callstack 0
   727  007D56                     ___awdiv:
   728                           	callstack 30
   729  007D56  0E00               	movlw	0
   730  007D58  6E06               	movwf	___awdiv@sign^0,c
   731  007D5A  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   732  007D5C  EFB4  F03E         	goto	u160
   733  007D60  EFB2  F03E         	goto	u161
   734  007D64                     u161:
   735  007D64  EFBA  F03E         	goto	l898
   736  007D68                     u160:
   737  007D68  6C03               	negf	___awdiv@divisor^0,c
   738  007D6A  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   739  007D6C  B0D8               	btfsc	status,0,c
   740  007D6E  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   741  007D70  0E01               	movlw	1
   742  007D72  6E06               	movwf	___awdiv@sign^0,c
   743  007D74                     l898:
   744  007D74  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   745  007D76  EFC1  F03E         	goto	u170
   746  007D7A  EFBF  F03E         	goto	u171
   747  007D7E                     u171:
   748  007D7E  EFC7  F03E         	goto	l904
   749  007D82                     u170:
   750  007D82  6C01               	negf	___awdiv@dividend^0,c
   751  007D84  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   752  007D86  B0D8               	btfsc	status,0,c
   753  007D88  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   754  007D8A  0E01               	movlw	1
   755  007D8C  1A06               	xorwf	___awdiv@sign^0,f,c
   756  007D8E                     l904:
   757  007D8E  0E00               	movlw	0
   758  007D90  6E08               	movwf	(___awdiv@quotient+1)^0,c
   759  007D92  0E00               	movlw	0
   760  007D94  6E07               	movwf	___awdiv@quotient^0,c
   761  007D96  5003               	movf	___awdiv@divisor^0,w,c
   762  007D98  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   763  007D9A  B4D8               	btfsc	status,2,c
   764  007D9C  EFD2  F03E         	goto	u181
   765  007DA0  EFD4  F03E         	goto	u180
   766  007DA4                     u181:
   767  007DA4  EFFC  F03E         	goto	l926
   768  007DA8                     u180:
   769  007DA8  0E01               	movlw	1
   770  007DAA  6E05               	movwf	___awdiv@counter^0,c
   771  007DAC  EFDC  F03E         	goto	l912
   772  007DB0                     l910:
   773  007DB0  90D8               	bcf	status,0,c
   774  007DB2  3603               	rlcf	___awdiv@divisor^0,f,c
   775  007DB4  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   776  007DB6  2A05               	incf	___awdiv@counter^0,f,c
   777  007DB8                     l912:
   778  007DB8  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   779  007DBA  EFE1  F03E         	goto	u191
   780  007DBE  EFE3  F03E         	goto	u190
   781  007DC2                     u191:
   782  007DC2  EFD8  F03E         	goto	l910
   783  007DC6                     u190:
   784  007DC6                     l914:
   785  007DC6  90D8               	bcf	status,0,c
   786  007DC8  3607               	rlcf	___awdiv@quotient^0,f,c
   787  007DCA  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   788  007DCC  5003               	movf	___awdiv@divisor^0,w,c
   789  007DCE  5C01               	subwf	___awdiv@dividend^0,w,c
   790  007DD0  5004               	movf	(___awdiv@divisor+1)^0,w,c
   791  007DD2  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   792  007DD4  A0D8               	btfss	status,0,c
   793  007DD6  EFEF  F03E         	goto	u201
   794  007DDA  EFF1  F03E         	goto	u200
   795  007DDE                     u201:
   796  007DDE  EFF6  F03E         	goto	l922
   797  007DE2                     u200:
   798  007DE2  5003               	movf	___awdiv@divisor^0,w,c
   799  007DE4  5E01               	subwf	___awdiv@dividend^0,f,c
   800  007DE6  5004               	movf	(___awdiv@divisor+1)^0,w,c
   801  007DE8  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   802  007DEA  8007               	bsf	___awdiv@quotient^0,0,c
   803  007DEC                     l922:
   804  007DEC  90D8               	bcf	status,0,c
   805  007DEE  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   806  007DF0  3203               	rrcf	___awdiv@divisor^0,f,c
   807  007DF2  2E05               	decfsz	___awdiv@counter^0,f,c
   808  007DF4  EFE3  F03E         	goto	l914
   809  007DF8                     l926:
   810  007DF8  5006               	movf	___awdiv@sign^0,w,c
   811  007DFA  B4D8               	btfsc	status,2,c
   812  007DFC  EF02  F03F         	goto	u211
   813  007E00  EF04  F03F         	goto	u210
   814  007E04                     u211:
   815  007E04  EF08  F03F         	goto	l930
   816  007E08                     u210:
   817  007E08  6C07               	negf	___awdiv@quotient^0,c
   818  007E0A  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   819  007E0C  B0D8               	btfsc	status,0,c
   820  007E0E  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   821  007E10                     l930:
   822  007E10  C007  F001         	movff	___awdiv@quotient,?___awdiv
   823  007E14  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   824  007E18  0012               	return		;funcret
   825  007E1A                     __end_of___awdiv:
   826                           	callstack 0
   827                           
   828 ;; *************** function _HangTram *****************
   829 ;; Defined at:
   830 ;;		line 102 in file "newmain.c"
   831 ;; Parameters:    Size  Location     Type
   832 ;;  hangtram        2    0[COMRAM] int 
   833 ;; Auto vars:     Size  Location     Type
   834 ;;		None
   835 ;; Return value:  Size  Location     Type
   836 ;;                  2    0[COMRAM] int 
   837 ;; Registers used:
   838 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   839 ;; Tracked objects:
   840 ;;		On entry : 0/0
   841 ;;		On exit  : 0/0
   842 ;;		Unchanged: 0/0
   843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   844 ;;      Params:         2       0       0       0       0       0       0
   845 ;;      Locals:         0       0       0       0       0       0       0
   846 ;;      Temps:          0       0       0       0       0       0       0
   847 ;;      Totals:         2       0       0       0       0       0       0
   848 ;;Total ram usage:        2 bytes
   849 ;; Hardware stack levels used: 1
   850 ;; This function calls:
   851 ;;		Nothing
   852 ;; This function is called by:
   853 ;;		_main
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           	psect	text4
   858  007C3E                     __ptext4:
   859                           	callstack 0
   860  007C3E                     _HangTram:
   861                           	callstack 30
   862  007C3E                     
   863                           ;newmain.c: 102: int HangTram(int hangtram);newmain.c: 103: {;newmain.c: 104:     PORTC 
      +                          = 0xff;
   864  007C3E  6882               	setf	130,c	;volatile
   865                           
   866                           ;newmain.c: 105:     PORTCbits.RC1 = 0;
   867  007C40  9282               	bcf	130,1,c	;volatile
   868  007C42                     
   869                           ;newmain.c: 106:     PORTB = ledcode[hangtram];
   870  007C42  90D8               	bcf	status,0,c
   871  007C44  3401               	rlcf	HangTram@hangtram^0,w,c
   872  007C46  6ED9               	movwf	fsr2l,c
   873  007C48  3402               	rlcf	(HangTram@hangtram+1)^0,w,c
   874  007C4A  6EDA               	movwf	fsr2h,c
   875  007C4C  0E18               	movlw	low _ledcode
   876  007C4E  26D9               	addwf	fsr2l,f,c
   877  007C50  0E00               	movlw	high _ledcode
   878  007C52  22DA               	addwfc	fsr2h,f,c
   879  007C54  50DF               	movf	indf2,w,c
   880  007C56  6E81               	movwf	129,c	;volatile
   881  007C58  0012               	return		;funcret
   882  007C5A                     __end_of_HangTram:
   883                           	callstack 0
   884                           
   885 ;; *************** function _HangNghin *****************
   886 ;; Defined at:
   887 ;;		line 109 in file "newmain.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;  hangnghin       2    0[COMRAM] int 
   890 ;; Auto vars:     Size  Location     Type
   891 ;;		None
   892 ;; Return value:  Size  Location     Type
   893 ;;                  2    0[COMRAM] int 
   894 ;; Registers used:
   895 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   896 ;; Tracked objects:
   897 ;;		On entry : 0/0
   898 ;;		On exit  : 0/0
   899 ;;		Unchanged: 0/0
   900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   901 ;;      Params:         2       0       0       0       0       0       0
   902 ;;      Locals:         0       0       0       0       0       0       0
   903 ;;      Temps:          0       0       0       0       0       0       0
   904 ;;      Totals:         2       0       0       0       0       0       0
   905 ;;Total ram usage:        2 bytes
   906 ;; Hardware stack levels used: 1
   907 ;; This function calls:
   908 ;;		Nothing
   909 ;; This function is called by:
   910 ;;		_main
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           	psect	text5
   915  007C22                     __ptext5:
   916                           	callstack 0
   917  007C22                     _HangNghin:
   918                           	callstack 30
   919  007C22                     
   920                           ;newmain.c: 109: int HangNghin(int hangnghin);newmain.c: 110: {;newmain.c: 111:     PORT
      +                          C = 0xff;
   921  007C22  6882               	setf	130,c	;volatile
   922                           
   923                           ;newmain.c: 112:     PORTCbits.RC0 = 0;
   924  007C24  9082               	bcf	130,0,c	;volatile
   925  007C26                     
   926                           ;newmain.c: 113:     PORTB = ledcode[hangnghin];
   927  007C26  90D8               	bcf	status,0,c
   928  007C28  3401               	rlcf	HangNghin@hangnghin^0,w,c
   929  007C2A  6ED9               	movwf	fsr2l,c
   930  007C2C  3402               	rlcf	(HangNghin@hangnghin+1)^0,w,c
   931  007C2E  6EDA               	movwf	fsr2h,c
   932  007C30  0E18               	movlw	low _ledcode
   933  007C32  26D9               	addwf	fsr2l,f,c
   934  007C34  0E00               	movlw	high _ledcode
   935  007C36  22DA               	addwfc	fsr2h,f,c
   936  007C38  50DF               	movf	indf2,w,c
   937  007C3A  6E81               	movwf	129,c	;volatile
   938  007C3C  0012               	return		;funcret
   939  007C3E                     __end_of_HangNghin:
   940                           	callstack 0
   941                           
   942 ;; *************** function _HangDV *****************
   943 ;; Defined at:
   944 ;;		line 88 in file "newmain.c"
   945 ;; Parameters:    Size  Location     Type
   946 ;;  hangdv          2    0[COMRAM] int 
   947 ;; Auto vars:     Size  Location     Type
   948 ;;		None
   949 ;; Return value:  Size  Location     Type
   950 ;;                  2    0[COMRAM] int 
   951 ;; Registers used:
   952 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   953 ;; Tracked objects:
   954 ;;		On entry : 0/0
   955 ;;		On exit  : 0/0
   956 ;;		Unchanged: 0/0
   957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   958 ;;      Params:         2       0       0       0       0       0       0
   959 ;;      Locals:         0       0       0       0       0       0       0
   960 ;;      Temps:          0       0       0       0       0       0       0
   961 ;;      Totals:         2       0       0       0       0       0       0
   962 ;;Total ram usage:        2 bytes
   963 ;; Hardware stack levels used: 1
   964 ;; This function calls:
   965 ;;		Nothing
   966 ;; This function is called by:
   967 ;;		_main
   968 ;; This function uses a non-reentrant model
   969 ;;
   970                           
   971                           	psect	text6
   972  007C06                     __ptext6:
   973                           	callstack 0
   974  007C06                     _HangDV:
   975                           	callstack 30
   976  007C06                     
   977                           ;newmain.c: 88: int HangDV(int hangdv);newmain.c: 89: {;newmain.c: 90:     PORTC = 0xff;
   978  007C06  6882               	setf	130,c	;volatile
   979                           
   980                           ;newmain.c: 91:     PORTCbits.RC3 = 0;
   981  007C08  9682               	bcf	130,3,c	;volatile
   982  007C0A                     
   983                           ;newmain.c: 92:     PORTB = ledcode[hangdv];
   984  007C0A  90D8               	bcf	status,0,c
   985  007C0C  3401               	rlcf	HangDV@hangdv^0,w,c
   986  007C0E  6ED9               	movwf	fsr2l,c
   987  007C10  3402               	rlcf	(HangDV@hangdv+1)^0,w,c
   988  007C12  6EDA               	movwf	fsr2h,c
   989  007C14  0E18               	movlw	low _ledcode
   990  007C16  26D9               	addwf	fsr2l,f,c
   991  007C18  0E00               	movlw	high _ledcode
   992  007C1A  22DA               	addwfc	fsr2h,f,c
   993  007C1C  50DF               	movf	indf2,w,c
   994  007C1E  6E81               	movwf	129,c	;volatile
   995  007C20  0012               	return		;funcret
   996  007C22                     __end_of_HangDV:
   997                           	callstack 0
   998                           
   999 ;; *************** function _HangChuc *****************
  1000 ;; Defined at:
  1001 ;;		line 95 in file "newmain.c"
  1002 ;; Parameters:    Size  Location     Type
  1003 ;;  hangchuc        2    0[COMRAM] int 
  1004 ;; Auto vars:     Size  Location     Type
  1005 ;;		None
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  2    0[COMRAM] int 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1015 ;;      Params:         2       0       0       0       0       0       0
  1016 ;;      Locals:         0       0       0       0       0       0       0
  1017 ;;      Temps:          0       0       0       0       0       0       0
  1018 ;;      Totals:         2       0       0       0       0       0       0
  1019 ;;Total ram usage:        2 bytes
  1020 ;; Hardware stack levels used: 1
  1021 ;; This function calls:
  1022 ;;		Nothing
  1023 ;; This function is called by:
  1024 ;;		_main
  1025 ;; This function uses a non-reentrant model
  1026 ;;
  1027                           
  1028                           	psect	text7
  1029  007BEA                     __ptext7:
  1030                           	callstack 0
  1031  007BEA                     _HangChuc:
  1032                           	callstack 30
  1033  007BEA                     
  1034                           ;newmain.c: 95: int HangChuc(int hangchuc);newmain.c: 96: {;newmain.c: 97:     PORTC = 0
      +                          xff;
  1035  007BEA  6882               	setf	130,c	;volatile
  1036                           
  1037                           ;newmain.c: 98:     PORTCbits.RC2 = 0;
  1038  007BEC  9482               	bcf	130,2,c	;volatile
  1039  007BEE                     
  1040                           ;newmain.c: 99:     PORTB = ledcode[hangchuc];
  1041  007BEE  90D8               	bcf	status,0,c
  1042  007BF0  3401               	rlcf	HangChuc@hangchuc^0,w,c
  1043  007BF2  6ED9               	movwf	fsr2l,c
  1044  007BF4  3402               	rlcf	(HangChuc@hangchuc+1)^0,w,c
  1045  007BF6  6EDA               	movwf	fsr2h,c
  1046  007BF8  0E18               	movlw	low _ledcode
  1047  007BFA  26D9               	addwf	fsr2l,f,c
  1048  007BFC  0E00               	movlw	high _ledcode
  1049  007BFE  22DA               	addwfc	fsr2h,f,c
  1050  007C00  50DF               	movf	indf2,w,c
  1051  007C02  6E81               	movwf	129,c	;volatile
  1052  007C04  0012               	return		;funcret
  1053  007C06                     __end_of_HangChuc:
  1054                           	callstack 0
  1055  0000                     
  1056                           	psect	rparam
  1057  0000                     
  1058                           	psect	idloc
  1059                           
  1060                           ;Config register IDLOC0 @ 0x200000
  1061                           ;	unspecified, using default values
  1062  200000                     	org	2097152
  1063  200000  FF                 	db	255
  1064                           
  1065                           ;Config register IDLOC1 @ 0x200001
  1066                           ;	unspecified, using default values
  1067  200001                     	org	2097153
  1068  200001  FF                 	db	255
  1069                           
  1070                           ;Config register IDLOC2 @ 0x200002
  1071                           ;	unspecified, using default values
  1072  200002                     	org	2097154
  1073  200002  FF                 	db	255
  1074                           
  1075                           ;Config register IDLOC3 @ 0x200003
  1076                           ;	unspecified, using default values
  1077  200003                     	org	2097155
  1078  200003  FF                 	db	255
  1079                           
  1080                           ;Config register IDLOC4 @ 0x200004
  1081                           ;	unspecified, using default values
  1082  200004                     	org	2097156
  1083  200004  FF                 	db	255
  1084                           
  1085                           ;Config register IDLOC5 @ 0x200005
  1086                           ;	unspecified, using default values
  1087  200005                     	org	2097157
  1088  200005  FF                 	db	255
  1089                           
  1090                           ;Config register IDLOC6 @ 0x200006
  1091                           ;	unspecified, using default values
  1092  200006                     	org	2097158
  1093  200006  FF                 	db	255
  1094                           
  1095                           ;Config register IDLOC7 @ 0x200007
  1096                           ;	unspecified, using default values
  1097  200007                     	org	2097159
  1098  200007  FF                 	db	255
  1099                           
  1100                           	psect	config
  1101                           
  1102                           ; Padding undefined space
  1103  300000                     	org	3145728
  1104  300000  FF                 	db	255
  1105                           
  1106                           ;Config register CONFIG1H @ 0x300001
  1107                           ;	Oscillator Selection bits
  1108                           ;	OSC = HS, HS oscillator
  1109                           ;	Fail-Safe Clock Monitor Enable bit
  1110                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1111                           ;	Internal/External Oscillator Switchover bit
  1112                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1113  300001                     	org	3145729
  1114  300001  02                 	db	2
  1115                           
  1116                           ;Config register CONFIG2L @ 0x300002
  1117                           ;	Power-up Timer Enable bit
  1118                           ;	PWRT = OFF, PWRT disabled
  1119                           ;	Brown-out Reset Enable bits
  1120                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1121                           ;	Brown Out Reset Voltage bits
  1122                           ;	BORV = 3, Minimum setting
  1123  300002                     	org	3145730
  1124  300002  19                 	db	25
  1125                           
  1126                           ;Config register CONFIG2H @ 0x300003
  1127                           ;	Watchdog Timer Enable bit
  1128                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1129                           ;	Watchdog Timer Postscale Select bits
  1130                           ;	WDTPS = 32768, 1:32768
  1131  300003                     	org	3145731
  1132  300003  1E                 	db	30
  1133                           
  1134                           ; Padding undefined space
  1135  300004                     	org	3145732
  1136  300004  FF                 	db	255
  1137                           
  1138                           ;Config register CONFIG3H @ 0x300005
  1139                           ;	CCP2 MUX bit
  1140                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1141                           ;	PORTB A/D Enable bit
  1142                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1143                           ;	Low-Power Timer1 Oscillator Enable bit
  1144                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1145                           ;	MCLR Pin Enable bit
  1146                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  1147  300005                     	org	3145733
  1148  300005  01                 	db	1
  1149                           
  1150                           ;Config register CONFIG4L @ 0x300006
  1151                           ;	Stack Full/Underflow Reset Enable bit
  1152                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1153                           ;	Single-Supply ICSP Enable bit
  1154                           ;	LVP = ON, Single-Supply ICSP enabled
  1155                           ;	Extended Instruction Set Enable bit
  1156                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1157                           ;	Background Debugger Enable bit
  1158                           ;	DEBUG = 0x1, unprogrammed default
  1159  300006                     	org	3145734
  1160  300006  84                 	db	132
  1161                           
  1162                           ; Padding undefined space
  1163  300007                     	org	3145735
  1164  300007  FF                 	db	255
  1165                           
  1166                           ;Config register CONFIG5L @ 0x300008
  1167                           ;	Code Protection bit
  1168                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1169                           ;	Code Protection bit
  1170                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1171                           ;	Code Protection bit
  1172                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1173                           ;	Code Protection bit
  1174                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1175  300008                     	org	3145736
  1176  300008  0F                 	db	15
  1177                           
  1178                           ;Config register CONFIG5H @ 0x300009
  1179                           ;	Boot Block Code Protection bit
  1180                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1181                           ;	Data EEPROM Code Protection bit
  1182                           ;	CPD = OFF, Data EEPROM not code-protected
  1183  300009                     	org	3145737
  1184  300009  C0                 	db	192
  1185                           
  1186                           ;Config register CONFIG6L @ 0x30000A
  1187                           ;	Write Protection bit
  1188                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1189                           ;	Write Protection bit
  1190                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1191                           ;	Write Protection bit
  1192                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1193                           ;	Write Protection bit
  1194                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1195  30000A                     	org	3145738
  1196  30000A  0F                 	db	15
  1197                           
  1198                           ;Config register CONFIG6H @ 0x30000B
  1199                           ;	Configuration Register Write Protection bit
  1200                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1201                           ;	Boot Block Write Protection bit
  1202                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1203                           ;	Data EEPROM Write Protection bit
  1204                           ;	WRTD = OFF, Data EEPROM not write-protected
  1205  30000B                     	org	3145739
  1206  30000B  E0                 	db	224
  1207                           
  1208                           ;Config register CONFIG7L @ 0x30000C
  1209                           ;	Table Read Protection bit
  1210                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1211                           ;	Table Read Protection bit
  1212                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1213                           ;	Table Read Protection bit
  1214                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1215                           ;	Table Read Protection bit
  1216                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1217  30000C                     	org	3145740
  1218  30000C  0F                 	db	15
  1219                           
  1220                           ;Config register CONFIG7H @ 0x30000D
  1221                           ;	Boot Block Table Read Protection bit
  1222                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1223  30000D                     	org	3145741
  1224  30000D  40                 	db	64
  1225                           tosu	equ	0xFFF
  1226                           tosh	equ	0xFFE
  1227                           tosl	equ	0xFFD
  1228                           stkptr	equ	0xFFC
  1229                           pclatu	equ	0xFFB
  1230                           pclath	equ	0xFFA
  1231                           pcl	equ	0xFF9
  1232                           tblptru	equ	0xFF8
  1233                           tblptrh	equ	0xFF7
  1234                           tblptrl	equ	0xFF6
  1235                           tablat	equ	0xFF5
  1236                           prodh	equ	0xFF4
  1237                           prodl	equ	0xFF3
  1238                           indf0	equ	0xFEF
  1239                           postinc0	equ	0xFEE
  1240                           postdec0	equ	0xFED
  1241                           preinc0	equ	0xFEC
  1242                           plusw0	equ	0xFEB
  1243                           fsr0h	equ	0xFEA
  1244                           fsr0l	equ	0xFE9
  1245                           wreg	equ	0xFE8
  1246                           indf1	equ	0xFE7
  1247                           postinc1	equ	0xFE6
  1248                           postdec1	equ	0xFE5
  1249                           preinc1	equ	0xFE4
  1250                           plusw1	equ	0xFE3
  1251                           fsr1h	equ	0xFE2
  1252                           fsr1l	equ	0xFE1
  1253                           bsr	equ	0xFE0
  1254                           indf2	equ	0xFDF
  1255                           postinc2	equ	0xFDE
  1256                           postdec2	equ	0xFDD
  1257                           preinc2	equ	0xFDC
  1258                           plusw2	equ	0xFDB
  1259                           fsr2h	equ	0xFDA
  1260                           fsr2l	equ	0xFD9
  1261                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     23      43
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0    2840
                                              8 COMRAM    15    15      0
                           _HangChuc
                             _HangDV
                          _HangNghin
                           _HangTram
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     904
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _HangTram                                             2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _HangNghin                                            2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _HangDV                                               2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _HangChuc                                             2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _HangChuc
   _HangDV
   _HangNghin
   _HangTram
   ___awdiv
   ___awmod
   ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     17      2B       1       33.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B      15        0.0%
DATA                 0      0      2B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Apr 09 16:06:54 2021

                     l20 7C04                       l23 7C58                       l17 7C20  
                     l41 7C7E                       l26 7C3C                       l34 7FD8  
           ___awdiv@sign 0006      ___wmul@multiplicand 0003                      l272 7E18  
                    l285 7D54                      l900 7D82                      l910 7DB0  
                    l902 7D8A                      l920 7DEA                      l912 7DB8  
                    l904 7D8E                      l930 7E10                      l922 7DEC  
                    l914 7DC6                      l906 7D96                      l924 7DF2  
                    l916 7DCC                      l908 7DA8                      l940 7CC0  
                    l870 7C0A                      l918 7DE2                      l926 7DF8  
                    l950 7CF4                      l942 7CC4                      l934 7CA6  
                    l872 7BEA                      l880 7C22                      l928 7E08  
                    l960 7D2E                      l952 7CFC                      l944 7CD2  
                    l936 7CAA                      l874 7BEE                      l882 7C26  
                    l890 7D56                      l954 7D0A                      l962 7D34  
                    l946 7CDA                      l938 7CB8                      l970 7E1A  
                    l868 7C06                      l876 7C3E                      l892 7D5A  
                    l964 7D44                      l956 7D20                      l948 7CEC  
                    l884 7C5A                      l980 7E38                      l972 7E1E  
                    l878 7C42                      l894 7D68                      l966 7D4C  
                    l958 7D28                      l886 7C76                      l990 7ECC  
                    l982 7E54                      l974 7E2C                      l896 7D70  
                    l992 7EEC                      l984 7E74                      l976 7E2C  
                    l898 7D74                      l994 7F08                      l986 7E90  
                    l978 7E30                      l988 7EB0                      u200 7DE2  
                    u201 7DDE                      u210 7E08                      u211 7E04  
                    u220 7CB8                      u300 7FF0                      u221 7CB4  
                    u301 7FEC                      u230 7CD2                      u231 7CCE  
                    u160 7D68                      u240 7CEC                      u161 7D64  
                    u241 7CE8                      u170 7D82                      u250 7D0A  
                    u171 7D7E                      u251 7D06                      u180 7DA8  
                    u260 7D20                      u181 7DA4                      u261 7D1C  
                    u317 7F22                      u190 7DC6                      u270 7D44  
                    u191 7DC2                      u271 7D40                      u327 7F3E  
                    u280 7FA0                      u281 7F9C                      u337 7F5A  
                    u290 7FD0                      u291 7FCC                      u347 7F76  
           ___awmod@sign 0006                      wreg 000FE8                     l1000 7F10  
                   l1010 7F70                     l1002 7F1C                     l1020 7FF0  
                   l1012 7F80                     l1004 7F2C                     l1014 7F84  
                   l1006 7F48                     l1016 7FA0                     l1008 7F54  
                   l1018 7FD0                     _main 7E1A                     fsr2h 000FDA  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
           ___param_bank 000000             main@hangchuc 0010             main@hangtram 000C  
                  ?_main 0001          __end_of___awdiv 7E1A          __end_of___awmod 7D56  
        ___awdiv@divisor 0003          ___awdiv@counter 0005       HangNghin@hangnghin 0001  
                  _PORTB 000F81                    _PORTC 000F82                    _TRISB 000F93  
                  _TRISC 000F94         HangTram@hangtram 0001             main@timeTemp 0016  
                  main@i 000E                    tablat 000FF5                    status 000FD8  
       __end_of_HangChuc 7C06         __end_of_HangTram 7C5A          __initialization 7C80  
           __end_of_main 8000       __size_of_HangNghin 001C                   ??_main 0009  
          __activetblptr 000000            main@hangnghin 000A         ___awdiv@dividend 0001  
                 _HangDV 7C06                   ___wmul 7C5A                ??___awdiv 0005  
              ??___awmod 0005         ___awdiv@quotient 0007          ___awmod@divisor 0003  
                 isa$std 000001          ___awmod@counter 0005             __pdataCOMRAM 0018  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization 7CA0        __end_of_HangNghin 7C3E  
          ___rparam_used 000001           __pcstackCOMRAM 0001                ?_HangChuc 0001  
              ?_HangTram 0001                  ?_HangDV 0001                  ?___wmul 0001  
             ??_HangChuc 0003               ??_HangTram 0003          __size_of_HangDV 001C  
                __Hparam 0000                  __Lparam 0000                  ___awdiv 7D56  
                ___awmod 7CA6          __size_of___wmul 0026                  __pcinit 7C80  
                __ramtop 0600                  __ptext0 7E1A                  __ptext1 7C5A  
                __ptext2 7CA6                  __ptext3 7D56                  __ptext4 7C3E  
                __ptext5 7C22                  __ptext6 7C06                  __ptext7 7BEA  
                _ledcode 0018         ___awmod@dividend 0001     end_of_initialization 7CA0  
                postdec1 000FE5                  postinc0 000FEE                _PORTCbits 000F82  
             main@hangdv 0012           __end_of_HangDV 7C22                _HangNghin 7C22  
           HangDV@hangdv 0001           __end_of___wmul 7C80            __pidataCOMRAM 7BD6  
    start_initialization 7C80        __size_of_HangChuc 001C        __size_of_HangTram 001C  
               ??_HangDV 0003               ?_HangNghin 0001                 ??___wmul 0005  
               ?___awdiv 0001                 ?___awmod 0001           ___wmul@product 0005  
            ??_HangNghin 0003        ___wmul@multiplier 0001                 _HangChuc 7BEA  
               _HangTram 7C3E                copy_data0 7C94                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 00C4         __size_of___awmod 00B0  
          __size_of_main 01E6         HangChuc@hangchuc 0001                 isa$xinst 000000  
               main@time 0014  
