

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Apr 09 16:02:30 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 12/02/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4520 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	idataCOMRAM
    58  007BD6                     __pidataCOMRAM:
    59                           	callstack 0
    60                           
    61                           ;initializer for _ledcode
    62  007BD6  003F               	dw	63
    63  007BD8  0006               	dw	6
    64  007BDA  005B               	dw	91
    65  007BDC  004F               	dw	79
    66  007BDE  0066               	dw	102
    67  007BE0  006D               	dw	109
    68  007BE2  007D               	dw	125
    69  007BE4  0007               	dw	7
    70  007BE6  007F               	dw	127
    71  007BE8  006F               	dw	111
    72  0000                     _TRISB	set	3987
    73  0000                     _TRISC	set	3988
    74  0000                     _PORTB	set	3969
    75  0000                     _PORTCbits	set	3970
    76  0000                     _PORTC	set	3970
    77                           
    78                           ; #config settings
    79                           
    80                           	psect	cinit
    81  007C80                     __pcinit:
    82                           	callstack 0
    83  007C80                     start_initialization:
    84                           	callstack 0
    85  007C80                     __initialization:
    86                           	callstack 0
    87                           
    88                           ; Initialize objects allocated to COMRAM (20 bytes)
    89                           ; load TBLPTR registers with __pidataCOMRAM
    90  007C80  0ED6               	movlw	low __pidataCOMRAM
    91  007C82  6EF6               	movwf	tblptrl,c
    92  007C84  0E7B               	movlw	high __pidataCOMRAM
    93  007C86  6EF7               	movwf	tblptrh,c
    94  007C88  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
    95  007C8A  6EF8               	movwf	tblptru,c
    96  007C8C  EE00  F018         	lfsr	0,__pdataCOMRAM
    97  007C90  EE10 F014          	lfsr	1,20
    98  007C94                     copy_data0:
    99  007C94  0009               	tblrd		*+
   100  007C96  CFF5 FFEE          	movff	tablat,postinc0
   101  007C9A  50E5               	movf	postdec1,w,c
   102  007C9C  50E1               	movf	fsr1l,w,c
   103  007C9E  E1FA               	bnz	copy_data0
   104  007CA0                     end_of_initialization:
   105                           	callstack 0
   106  007CA0                     __end_of__initialization:
   107                           	callstack 0
   108  007CA0  0100               	movlb	0
   109  007CA2  EF0D  F03F         	goto	_main	;jump to C main() function
   110                           
   111                           	psect	dataCOMRAM
   112  000018                     __pdataCOMRAM:
   113                           	callstack 0
   114  000018                     _ledcode:
   115                           	callstack 0
   116  000018                     	ds	20
   117                           
   118                           	psect	cstackCOMRAM
   119  000001                     __pcstackCOMRAM:
   120                           	callstack 0
   121  000001                     ?___wmul:
   122                           	callstack 0
   123  000001                     ?___awdiv:
   124                           	callstack 0
   125  000001                     ?___awmod:
   126                           	callstack 0
   127  000001                     HangDV@hangdv:
   128                           	callstack 0
   129  000001                     HangChuc@hangchuc:
   130                           	callstack 0
   131  000001                     HangTram@hangtram:
   132                           	callstack 0
   133  000001                     HangNghin@hangnghin:
   134                           	callstack 0
   135  000001                     ___wmul@multiplier:
   136                           	callstack 0
   137  000001                     ___awdiv@dividend:
   138                           	callstack 0
   139  000001                     ___awmod@dividend:
   140                           	callstack 0
   141                           
   142                           ; 2 bytes @ 0x0
   143  000001                     	ds	2
   144  000003                     ___wmul@multiplicand:
   145                           	callstack 0
   146  000003                     ___awdiv@divisor:
   147                           	callstack 0
   148  000003                     ___awmod@divisor:
   149                           	callstack 0
   150                           
   151                           ; 2 bytes @ 0x2
   152  000003                     	ds	2
   153  000005                     ___awdiv@counter:
   154                           	callstack 0
   155  000005                     ___awmod@counter:
   156                           	callstack 0
   157  000005                     ___wmul@product:
   158                           	callstack 0
   159                           
   160                           ; 2 bytes @ 0x4
   161  000005                     	ds	1
   162  000006                     ___awdiv@sign:
   163                           	callstack 0
   164  000006                     ___awmod@sign:
   165                           	callstack 0
   166                           
   167                           ; 1 bytes @ 0x5
   168  000006                     	ds	1
   169  000007                     ___awdiv@quotient:
   170                           	callstack 0
   171                           
   172                           ; 2 bytes @ 0x6
   173  000007                     	ds	2
   174  000009                     ??_main:
   175                           
   176                           ; 1 bytes @ 0x8
   177  000009                     	ds	1
   178  00000A                     main@hangnghin:
   179                           	callstack 0
   180                           
   181                           ; 2 bytes @ 0x9
   182  00000A                     	ds	2
   183  00000C                     main@hangtram:
   184                           	callstack 0
   185                           
   186                           ; 2 bytes @ 0xB
   187  00000C                     	ds	2
   188  00000E                     main@i:
   189                           	callstack 0
   190                           
   191                           ; 2 bytes @ 0xD
   192  00000E                     	ds	2
   193  000010                     main@hangchuc:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0xF
   197  000010                     	ds	2
   198  000012                     main@hangdv:
   199                           	callstack 0
   200                           
   201                           ; 2 bytes @ 0x11
   202  000012                     	ds	2
   203  000014                     main@time:
   204                           	callstack 0
   205                           
   206                           ; 2 bytes @ 0x13
   207  000014                     	ds	2
   208  000016                     main@timeTemp:
   209                           	callstack 0
   210                           
   211                           ; 2 bytes @ 0x15
   212  000016                     	ds	2
   213                           
   214 ;;
   215 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   216 ;;
   217 ;; *************** function _main *****************
   218 ;; Defined at:
   219 ;;		line 116 in file "newmain.c"
   220 ;; Parameters:    Size  Location     Type
   221 ;;		None
   222 ;; Auto vars:     Size  Location     Type
   223 ;;  i               2   13[COMRAM] int 
   224 ;;  timeTemp        2   21[COMRAM] int 
   225 ;;  time            2   19[COMRAM] int 
   226 ;;  hangdv          2   17[COMRAM] int 
   227 ;;  hangchuc        2   15[COMRAM] int 
   228 ;;  hangtram        2   11[COMRAM] int 
   229 ;;  hangnghin       2    9[COMRAM] int 
   230 ;; Return value:  Size  Location     Type
   231 ;;                  1    wreg      void 
   232 ;; Registers used:
   233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   234 ;; Tracked objects:
   235 ;;		On entry : 0/0
   236 ;;		On exit  : 0/0
   237 ;;		Unchanged: 0/0
   238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   239 ;;      Params:         0       0       0       0       0       0       0
   240 ;;      Locals:        14       0       0       0       0       0       0
   241 ;;      Temps:          1       0       0       0       0       0       0
   242 ;;      Totals:        15       0       0       0       0       0       0
   243 ;;Total ram usage:       15 bytes
   244 ;; Hardware stack levels required when called: 1
   245 ;; This function calls:
   246 ;;		_HangChuc
   247 ;;		_HangDV
   248 ;;		_HangNghin
   249 ;;		_HangTram
   250 ;;		___awdiv
   251 ;;		___awmod
   252 ;;		___wmul
   253 ;; This function is called by:
   254 ;;		Startup code after reset
   255 ;; This function uses a non-reentrant model
   256 ;;
   257                           
   258                           	psect	text0
   259  007E1A                     __ptext0:
   260                           	callstack 0
   261  007E1A                     _main:
   262                           	callstack 30
   263  007E1A                     
   264                           ;newmain.c: 117:     TRISC = 0;
   265  007E1A  0E00               	movlw	0
   266  007E1C  6E94               	movwf	148,c	;volatile
   267  007E1E                     
   268                           ;newmain.c: 118:     PORTC = 0xff;
   269  007E1E  6882               	setf	130,c	;volatile
   270                           
   271                           ;newmain.c: 119:     TRISB = 0;
   272  007E20  0E00               	movlw	0
   273  007E22  6E93               	movwf	147,c	;volatile
   274                           
   275                           ;newmain.c: 121:     int time = 5959;
   276  007E24  0E17               	movlw	23
   277  007E26  6E15               	movwf	(main@time+1)^0,c
   278  007E28  0E47               	movlw	71
   279  007E2A  6E14               	movwf	main@time^0,c
   280  007E2C                     l976:
   281                           
   282                           ;newmain.c: 125:     {;newmain.c: 127:         time++;
   283  007E2C  4A14               	infsnz	main@time^0,f,c
   284  007E2E  2A15               	incf	(main@time+1)^0,f,c
   285  007E30                     
   286                           ;newmain.c: 129:         if (hangchuc*10 + hangdv == 60) time+=40;
   287  007E30  C010  F001         	movff	main@hangchuc,___wmul@multiplier
   288  007E34  C011  F002         	movff	main@hangchuc+1,___wmul@multiplier+1
   289  007E38  0E00               	movlw	0
   290  007E3A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
   291  007E3C  0E0A               	movlw	10
   292  007E3E  6E03               	movwf	___wmul@multiplicand^0,c
   293  007E40  EC2D  F03E         	call	___wmul	;wreg free
   294  007E44  5012               	movf	main@hangdv^0,w,c
   295  007E46  2601               	addwf	?___wmul^0,f,c
   296  007E48  5013               	movf	(main@hangdv+1)^0,w,c
   297  007E4A  2202               	addwfc	(?___wmul+1)^0,f,c
   298  007E4C  0E3C               	movlw	60
   299  007E4E  1801               	xorwf	?___wmul^0,w,c
   300  007E50  1002               	iorwf	(?___wmul+1)^0,w,c
   301  007E52  A4D8               	btfss	status,2,c
   302  007E54  EF2E  F03F         	goto	u281
   303  007E58  EF30  F03F         	goto	u280
   304  007E5C                     u281:
   305  007E5C  EF34  F03F         	goto	l32
   306  007E60                     u280:
   307  007E60  0E28               	movlw	40
   308  007E62  2614               	addwf	main@time^0,f,c
   309  007E64  0E00               	movlw	0
   310  007E66  2215               	addwfc	(main@time+1)^0,f,c
   311  007E68                     l32:
   312                           
   313                           ;newmain.c: 131:         if (time == 6000) time = 0;
   314  007E68  0E70               	movlw	112
   315  007E6A  1814               	xorwf	main@time^0,w,c
   316  007E6C  E107               	bnz	u291
   317  007E6E  0E17               	movlw	23
   318  007E70  1815               	xorwf	(main@time+1)^0,w,c
   319  007E72  A4D8               	btfss	status,2,c
   320  007E74  EF3E  F03F         	goto	u291
   321  007E78  EF40  F03F         	goto	u290
   322  007E7C                     u291:
   323  007E7C  EF44  F03F         	goto	l984
   324  007E80                     u290:
   325  007E80  0E00               	movlw	0
   326  007E82  6E15               	movwf	(main@time+1)^0,c
   327  007E84  0E00               	movlw	0
   328  007E86  6E14               	movwf	main@time^0,c
   329  007E88                     l984:
   330                           
   331                           ;newmain.c: 132:         timeTemp = time;
   332  007E88  C014  F016         	movff	main@time,main@timeTemp
   333  007E8C  C015  F017         	movff	main@time+1,main@timeTemp+1
   334  007E90                     
   335                           ;newmain.c: 133:         hangdv = timeTemp%10;
   336  007E90  C016  F001         	movff	main@timeTemp,___awmod@dividend
   337  007E94  C017  F002         	movff	main@timeTemp+1,___awmod@dividend+1
   338  007E98  0E00               	movlw	0
   339  007E9A  6E04               	movwf	(___awmod@divisor+1)^0,c
   340  007E9C  0E0A               	movlw	10
   341  007E9E  6E03               	movwf	___awmod@divisor^0,c
   342  007EA0  EC53  F03E         	call	___awmod	;wreg free
   343  007EA4  C001  F012         	movff	?___awmod,main@hangdv
   344  007EA8  C002  F013         	movff	?___awmod+1,main@hangdv+1
   345  007EAC                     
   346                           ;newmain.c: 134:         timeTemp = (timeTemp - hangdv)/10;
   347  007EAC  5012               	movf	main@hangdv^0,w,c
   348  007EAE  5C16               	subwf	main@timeTemp^0,w,c
   349  007EB0  6E01               	movwf	___awdiv@dividend^0,c
   350  007EB2  5013               	movf	(main@hangdv+1)^0,w,c
   351  007EB4  5817               	subwfb	(main@timeTemp+1)^0,w,c
   352  007EB6  6E02               	movwf	(___awdiv@dividend+1)^0,c
   353  007EB8  0E00               	movlw	0
   354  007EBA  6E04               	movwf	(___awdiv@divisor+1)^0,c
   355  007EBC  0E0A               	movlw	10
   356  007EBE  6E03               	movwf	___awdiv@divisor^0,c
   357  007EC0  ECAB  F03E         	call	___awdiv	;wreg free
   358  007EC4  C001  F016         	movff	?___awdiv,main@timeTemp
   359  007EC8  C002  F017         	movff	?___awdiv+1,main@timeTemp+1
   360  007ECC                     
   361                           ;newmain.c: 135:         hangchuc = timeTemp%10;
   362  007ECC  C016  F001         	movff	main@timeTemp,___awmod@dividend
   363  007ED0  C017  F002         	movff	main@timeTemp+1,___awmod@dividend+1
   364  007ED4  0E00               	movlw	0
   365  007ED6  6E04               	movwf	(___awmod@divisor+1)^0,c
   366  007ED8  0E0A               	movlw	10
   367  007EDA  6E03               	movwf	___awmod@divisor^0,c
   368  007EDC  EC53  F03E         	call	___awmod	;wreg free
   369  007EE0  C001  F010         	movff	?___awmod,main@hangchuc
   370  007EE4  C002  F011         	movff	?___awmod+1,main@hangchuc+1
   371  007EE8                     
   372                           ;newmain.c: 136:         timeTemp = (timeTemp - hangchuc)/10;
   373  007EE8  5010               	movf	main@hangchuc^0,w,c
   374  007EEA  5C16               	subwf	main@timeTemp^0,w,c
   375  007EEC  6E01               	movwf	___awdiv@dividend^0,c
   376  007EEE  5011               	movf	(main@hangchuc+1)^0,w,c
   377  007EF0  5817               	subwfb	(main@timeTemp+1)^0,w,c
   378  007EF2  6E02               	movwf	(___awdiv@dividend+1)^0,c
   379  007EF4  0E00               	movlw	0
   380  007EF6  6E04               	movwf	(___awdiv@divisor+1)^0,c
   381  007EF8  0E0A               	movlw	10
   382  007EFA  6E03               	movwf	___awdiv@divisor^0,c
   383  007EFC  ECAB  F03E         	call	___awdiv	;wreg free
   384  007F00  C001  F016         	movff	?___awdiv,main@timeTemp
   385  007F04  C002  F017         	movff	?___awdiv+1,main@timeTemp+1
   386  007F08                     
   387                           ;newmain.c: 137:         hangtram = timeTemp%10;
   388  007F08  C016  F001         	movff	main@timeTemp,___awmod@dividend
   389  007F0C  C017  F002         	movff	main@timeTemp+1,___awmod@dividend+1
   390  007F10  0E00               	movlw	0
   391  007F12  6E04               	movwf	(___awmod@divisor+1)^0,c
   392  007F14  0E0A               	movlw	10
   393  007F16  6E03               	movwf	___awmod@divisor^0,c
   394  007F18  EC53  F03E         	call	___awmod	;wreg free
   395  007F1C  C001  F00C         	movff	?___awmod,main@hangtram
   396  007F20  C002  F00D         	movff	?___awmod+1,main@hangtram+1
   397  007F24                     
   398                           ;newmain.c: 138:         timeTemp = (timeTemp - hangtram)/10;
   399  007F24  500C               	movf	main@hangtram^0,w,c
   400  007F26  5C16               	subwf	main@timeTemp^0,w,c
   401  007F28  6E01               	movwf	___awdiv@dividend^0,c
   402  007F2A  500D               	movf	(main@hangtram+1)^0,w,c
   403  007F2C  5817               	subwfb	(main@timeTemp+1)^0,w,c
   404  007F2E  6E02               	movwf	(___awdiv@dividend+1)^0,c
   405  007F30  0E00               	movlw	0
   406  007F32  6E04               	movwf	(___awdiv@divisor+1)^0,c
   407  007F34  0E0A               	movlw	10
   408  007F36  6E03               	movwf	___awdiv@divisor^0,c
   409  007F38  ECAB  F03E         	call	___awdiv	;wreg free
   410  007F3C  C001  F016         	movff	?___awdiv,main@timeTemp
   411  007F40  C002  F017         	movff	?___awdiv+1,main@timeTemp+1
   412  007F44                     
   413                           ;newmain.c: 139:         hangnghin = timeTemp%10;
   414  007F44  C016  F001         	movff	main@timeTemp,___awmod@dividend
   415  007F48  C017  F002         	movff	main@timeTemp+1,___awmod@dividend+1
   416  007F4C  0E00               	movlw	0
   417  007F4E  6E04               	movwf	(___awmod@divisor+1)^0,c
   418  007F50  0E0A               	movlw	10
   419  007F52  6E03               	movwf	___awmod@divisor^0,c
   420  007F54  EC53  F03E         	call	___awmod	;wreg free
   421  007F58  C001  F00A         	movff	?___awmod,main@hangnghin
   422  007F5C  C002  F00B         	movff	?___awmod+1,main@hangnghin+1
   423  007F60                     
   424                           ;newmain.c: 142:         for(int i = 0; i<25; i++)
   425  007F60  0E00               	movlw	0
   426  007F62  6E0F               	movwf	(main@i+1)^0,c
   427  007F64  0E00               	movlw	0
   428  007F66  6E0E               	movwf	main@i^0,c
   429  007F68                     l1006:
   430                           
   431                           ;newmain.c: 143:         {;newmain.c: 144:             HangDV(hangdv);
   432  007F68  C012  F001         	movff	main@hangdv,HangDV@hangdv
   433  007F6C  C013  F002         	movff	main@hangdv+1,HangDV@hangdv+1
   434  007F70  EC03  F03E         	call	_HangDV	;wreg free
   435  007F74                     
   436                           ;newmain.c: 145:             _delay((unsigned long)((10)*(20000000/4000.0)));
   437  007F74  0E41               	movlw	65
   438  007F76  6E09               	movwf	??_main^0,c
   439  007F78  0EEE               	movlw	238
   440  007F7A                     u317:
   441  007F7A  2EE8               	decfsz	wreg,f,c
   442  007F7C  D7FE               	bra	u317
   443  007F7E  2E09               	decfsz	??_main^0,f,c
   444  007F80  D7FC               	bra	u317
   445  007F82  D000               	nop2	
   446  007F84                     
   447                           ;newmain.c: 146:             HangChuc(hangchuc);
   448  007F84  C010  F001         	movff	main@hangchuc,HangChuc@hangchuc
   449  007F88  C011  F002         	movff	main@hangchuc+1,HangChuc@hangchuc+1
   450  007F8C  ECF5  F03D         	call	_HangChuc	;wreg free
   451                           
   452                           ;newmain.c: 147:             _delay((unsigned long)((10)*(20000000/4000.0)));
   453  007F90  0E41               	movlw	65
   454  007F92  6E09               	movwf	??_main^0,c
   455  007F94  0EEE               	movlw	238
   456  007F96                     u327:
   457  007F96  2EE8               	decfsz	wreg,f,c
   458  007F98  D7FE               	bra	u327
   459  007F9A  2E09               	decfsz	??_main^0,f,c
   460  007F9C  D7FC               	bra	u327
   461  007F9E  D000               	nop2	
   462  007FA0                     
   463                           ;newmain.c: 148:             HangTram(hangtram);
   464  007FA0  C00C  F001         	movff	main@hangtram,HangTram@hangtram
   465  007FA4  C00D  F002         	movff	main@hangtram+1,HangTram@hangtram+1
   466  007FA8  EC1F  F03E         	call	_HangTram	;wreg free
   467  007FAC                     
   468                           ;newmain.c: 149:             _delay((unsigned long)((10)*(20000000/4000.0)));
   469  007FAC  0E41               	movlw	65
   470  007FAE  6E09               	movwf	??_main^0,c
   471  007FB0  0EEE               	movlw	238
   472  007FB2                     u337:
   473  007FB2  2EE8               	decfsz	wreg,f,c
   474  007FB4  D7FE               	bra	u337
   475  007FB6  2E09               	decfsz	??_main^0,f,c
   476  007FB8  D7FC               	bra	u337
   477  007FBA  D000               	nop2	
   478                           
   479                           ;newmain.c: 150:             HangNghin(hangnghin);
   480  007FBC  C00A  F001         	movff	main@hangnghin,HangNghin@hangnghin
   481  007FC0  C00B  F002         	movff	main@hangnghin+1,HangNghin@hangnghin+1
   482  007FC4  EC11  F03E         	call	_HangNghin	;wreg free
   483  007FC8                     
   484                           ;newmain.c: 151:             _delay((unsigned long)((10)*(20000000/4000.0)));
   485  007FC8  0E41               	movlw	65
   486  007FCA  6E09               	movwf	??_main^0,c
   487  007FCC  0EEE               	movlw	238
   488  007FCE                     u347:
   489  007FCE  2EE8               	decfsz	wreg,f,c
   490  007FD0  D7FE               	bra	u347
   491  007FD2  2E09               	decfsz	??_main^0,f,c
   492  007FD4  D7FC               	bra	u347
   493  007FD6  D000               	nop2	
   494  007FD8                     
   495                           ;newmain.c: 152:         }
   496  007FD8  4A0E               	infsnz	main@i^0,f,c
   497  007FDA  2A0F               	incf	(main@i+1)^0,f,c
   498  007FDC  BE0F               	btfsc	(main@i+1)^0,7,c
   499  007FDE  EFFA  F03F         	goto	u301
   500  007FE2  500F               	movf	(main@i+1)^0,w,c
   501  007FE4  E109               	bnz	u300
   502  007FE6  0E19               	movlw	25
   503  007FE8  5C0E               	subwf	main@i^0,w,c
   504  007FEA  A0D8               	btfss	status,0,c
   505  007FEC  EFFA  F03F         	goto	u301
   506  007FF0  EFFC  F03F         	goto	u300
   507  007FF4                     u301:
   508  007FF4  EFB4  F03F         	goto	l1006
   509  007FF8                     u300:
   510  007FF8  EF16  F03F         	goto	l976
   511  007FFC  EF00  F000         	goto	start
   512  008000                     __end_of_main:
   513                           	callstack 0
   514                           
   515 ;; *************** function ___wmul *****************
   516 ;; Defined at:
   517 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\Umul16.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;  multiplier      2    0[COMRAM] unsigned int 
   520 ;;  multiplicand    2    2[COMRAM] unsigned int 
   521 ;; Auto vars:     Size  Location     Type
   522 ;;  product         2    4[COMRAM] unsigned int 
   523 ;; Return value:  Size  Location     Type
   524 ;;                  2    0[COMRAM] unsigned int 
   525 ;; Registers used:
   526 ;;		wreg, status,2, status,0, prodl, prodh
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   532 ;;      Params:         4       0       0       0       0       0       0
   533 ;;      Locals:         2       0       0       0       0       0       0
   534 ;;      Temps:          0       0       0       0       0       0       0
   535 ;;      Totals:         6       0       0       0       0       0       0
   536 ;;Total ram usage:        6 bytes
   537 ;; Hardware stack levels used: 1
   538 ;; This function calls:
   539 ;;		Nothing
   540 ;; This function is called by:
   541 ;;		_main
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text1
   546  007C5A                     __ptext1:
   547                           	callstack 0
   548  007C5A                     ___wmul:
   549                           	callstack 30
   550  007C5A  5001               	movf	___wmul@multiplier^0,w,c
   551  007C5C  0203               	mulwf	___wmul@multiplicand^0,c
   552  007C5E  CFF3 F005          	movff	prodl,___wmul@product
   553  007C62  CFF4 F006          	movff	prodh,___wmul@product+1
   554  007C66  5001               	movf	___wmul@multiplier^0,w,c
   555  007C68  0204               	mulwf	(___wmul@multiplicand+1)^0,c
   556  007C6A  50F3               	movf	243,w,c
   557  007C6C  2606               	addwf	(___wmul@product+1)^0,f,c
   558  007C6E  5002               	movf	(___wmul@multiplier+1)^0,w,c
   559  007C70  0203               	mulwf	___wmul@multiplicand^0,c
   560  007C72  50F3               	movf	243,w,c
   561  007C74  2606               	addwf	(___wmul@product+1)^0,f,c
   562  007C76  C005  F001         	movff	___wmul@product,?___wmul
   563  007C7A  C006  F002         	movff	___wmul@product+1,?___wmul+1
   564  007C7E  0012               	return		;funcret
   565  007C80                     __end_of___wmul:
   566                           	callstack 0
   567                           
   568 ;; *************** function ___awmod *****************
   569 ;; Defined at:
   570 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
   571 ;; Parameters:    Size  Location     Type
   572 ;;  dividend        2    0[COMRAM] int 
   573 ;;  divisor         2    2[COMRAM] int 
   574 ;; Auto vars:     Size  Location     Type
   575 ;;  sign            1    5[COMRAM] unsigned char 
   576 ;;  counter         1    4[COMRAM] unsigned char 
   577 ;; Return value:  Size  Location     Type
   578 ;;                  2    0[COMRAM] int 
   579 ;; Registers used:
   580 ;;		wreg, status,2, status,0
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   586 ;;      Params:         4       0       0       0       0       0       0
   587 ;;      Locals:         2       0       0       0       0       0       0
   588 ;;      Temps:          0       0       0       0       0       0       0
   589 ;;      Totals:         6       0       0       0       0       0       0
   590 ;;Total ram usage:        6 bytes
   591 ;; Hardware stack levels used: 1
   592 ;; This function calls:
   593 ;;		Nothing
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           	psect	text2
   600  007CA6                     __ptext2:
   601                           	callstack 0
   602  007CA6                     ___awmod:
   603                           	callstack 30
   604  007CA6  0E00               	movlw	0
   605  007CA8  6E06               	movwf	___awmod@sign^0,c
   606  007CAA  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
   607  007CAC  EF5C  F03E         	goto	u220
   608  007CB0  EF5A  F03E         	goto	u221
   609  007CB4                     u221:
   610  007CB4  EF62  F03E         	goto	l942
   611  007CB8                     u220:
   612  007CB8  6C01               	negf	___awmod@dividend^0,c
   613  007CBA  1E02               	comf	(___awmod@dividend+1)^0,f,c
   614  007CBC  B0D8               	btfsc	status,0,c
   615  007CBE  2A02               	incf	(___awmod@dividend+1)^0,f,c
   616  007CC0  0E01               	movlw	1
   617  007CC2  6E06               	movwf	___awmod@sign^0,c
   618  007CC4                     l942:
   619  007CC4  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
   620  007CC6  EF69  F03E         	goto	u230
   621  007CCA  EF67  F03E         	goto	u231
   622  007CCE                     u231:
   623  007CCE  EF6D  F03E         	goto	l946
   624  007CD2                     u230:
   625  007CD2  6C03               	negf	___awmod@divisor^0,c
   626  007CD4  1E04               	comf	(___awmod@divisor+1)^0,f,c
   627  007CD6  B0D8               	btfsc	status,0,c
   628  007CD8  2A04               	incf	(___awmod@divisor+1)^0,f,c
   629  007CDA                     l946:
   630  007CDA  5003               	movf	___awmod@divisor^0,w,c
   631  007CDC  1004               	iorwf	(___awmod@divisor+1)^0,w,c
   632  007CDE  B4D8               	btfsc	status,2,c
   633  007CE0  EF74  F03E         	goto	u241
   634  007CE4  EF76  F03E         	goto	u240
   635  007CE8                     u241:
   636  007CE8  EF9A  F03E         	goto	l962
   637  007CEC                     u240:
   638  007CEC  0E01               	movlw	1
   639  007CEE  6E05               	movwf	___awmod@counter^0,c
   640  007CF0  EF7E  F03E         	goto	l952
   641  007CF4                     l950:
   642  007CF4  90D8               	bcf	status,0,c
   643  007CF6  3603               	rlcf	___awmod@divisor^0,f,c
   644  007CF8  3604               	rlcf	(___awmod@divisor+1)^0,f,c
   645  007CFA  2A05               	incf	___awmod@counter^0,f,c
   646  007CFC                     l952:
   647  007CFC  AE04               	btfss	(___awmod@divisor+1)^0,7,c
   648  007CFE  EF83  F03E         	goto	u251
   649  007D02  EF85  F03E         	goto	u250
   650  007D06                     u251:
   651  007D06  EF7A  F03E         	goto	l950
   652  007D0A                     u250:
   653  007D0A                     l954:
   654  007D0A  5003               	movf	___awmod@divisor^0,w,c
   655  007D0C  5C01               	subwf	___awmod@dividend^0,w,c
   656  007D0E  5004               	movf	(___awmod@divisor+1)^0,w,c
   657  007D10  5802               	subwfb	(___awmod@dividend+1)^0,w,c
   658  007D12  A0D8               	btfss	status,0,c
   659  007D14  EF8E  F03E         	goto	u261
   660  007D18  EF90  F03E         	goto	u260
   661  007D1C                     u261:
   662  007D1C  EF94  F03E         	goto	l958
   663  007D20                     u260:
   664  007D20  5003               	movf	___awmod@divisor^0,w,c
   665  007D22  5E01               	subwf	___awmod@dividend^0,f,c
   666  007D24  5004               	movf	(___awmod@divisor+1)^0,w,c
   667  007D26  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
   668  007D28                     l958:
   669  007D28  90D8               	bcf	status,0,c
   670  007D2A  3204               	rrcf	(___awmod@divisor+1)^0,f,c
   671  007D2C  3203               	rrcf	___awmod@divisor^0,f,c
   672  007D2E  2E05               	decfsz	___awmod@counter^0,f,c
   673  007D30  EF85  F03E         	goto	l954
   674  007D34                     l962:
   675  007D34  5006               	movf	___awmod@sign^0,w,c
   676  007D36  B4D8               	btfsc	status,2,c
   677  007D38  EFA0  F03E         	goto	u271
   678  007D3C  EFA2  F03E         	goto	u270
   679  007D40                     u271:
   680  007D40  EFA6  F03E         	goto	l966
   681  007D44                     u270:
   682  007D44  6C01               	negf	___awmod@dividend^0,c
   683  007D46  1E02               	comf	(___awmod@dividend+1)^0,f,c
   684  007D48  B0D8               	btfsc	status,0,c
   685  007D4A  2A02               	incf	(___awmod@dividend+1)^0,f,c
   686  007D4C                     l966:
   687  007D4C  C001  F001         	movff	___awmod@dividend,?___awmod
   688  007D50  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
   689  007D54  0012               	return		;funcret
   690  007D56                     __end_of___awmod:
   691                           	callstack 0
   692                           
   693 ;; *************** function ___awdiv *****************
   694 ;; Defined at:
   695 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  dividend        2    0[COMRAM] int 
   698 ;;  divisor         2    2[COMRAM] int 
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  quotient        2    6[COMRAM] int 
   701 ;;  sign            1    5[COMRAM] unsigned char 
   702 ;;  counter         1    4[COMRAM] unsigned char 
   703 ;; Return value:  Size  Location     Type
   704 ;;                  2    0[COMRAM] int 
   705 ;; Registers used:
   706 ;;		wreg, status,2, status,0
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   712 ;;      Params:         4       0       0       0       0       0       0
   713 ;;      Locals:         4       0       0       0       0       0       0
   714 ;;      Temps:          0       0       0       0       0       0       0
   715 ;;      Totals:         8       0       0       0       0       0       0
   716 ;;Total ram usage:        8 bytes
   717 ;; Hardware stack levels used: 1
   718 ;; This function calls:
   719 ;;		Nothing
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text3
   726  007D56                     __ptext3:
   727                           	callstack 0
   728  007D56                     ___awdiv:
   729                           	callstack 30
   730  007D56  0E00               	movlw	0
   731  007D58  6E06               	movwf	___awdiv@sign^0,c
   732  007D5A  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
   733  007D5C  EFB4  F03E         	goto	u160
   734  007D60  EFB2  F03E         	goto	u161
   735  007D64                     u161:
   736  007D64  EFBA  F03E         	goto	l898
   737  007D68                     u160:
   738  007D68  6C03               	negf	___awdiv@divisor^0,c
   739  007D6A  1E04               	comf	(___awdiv@divisor+1)^0,f,c
   740  007D6C  B0D8               	btfsc	status,0,c
   741  007D6E  2A04               	incf	(___awdiv@divisor+1)^0,f,c
   742  007D70  0E01               	movlw	1
   743  007D72  6E06               	movwf	___awdiv@sign^0,c
   744  007D74                     l898:
   745  007D74  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
   746  007D76  EFC1  F03E         	goto	u170
   747  007D7A  EFBF  F03E         	goto	u171
   748  007D7E                     u171:
   749  007D7E  EFC7  F03E         	goto	l904
   750  007D82                     u170:
   751  007D82  6C01               	negf	___awdiv@dividend^0,c
   752  007D84  1E02               	comf	(___awdiv@dividend+1)^0,f,c
   753  007D86  B0D8               	btfsc	status,0,c
   754  007D88  2A02               	incf	(___awdiv@dividend+1)^0,f,c
   755  007D8A  0E01               	movlw	1
   756  007D8C  1A06               	xorwf	___awdiv@sign^0,f,c
   757  007D8E                     l904:
   758  007D8E  0E00               	movlw	0
   759  007D90  6E08               	movwf	(___awdiv@quotient+1)^0,c
   760  007D92  0E00               	movlw	0
   761  007D94  6E07               	movwf	___awdiv@quotient^0,c
   762  007D96  5003               	movf	___awdiv@divisor^0,w,c
   763  007D98  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
   764  007D9A  B4D8               	btfsc	status,2,c
   765  007D9C  EFD2  F03E         	goto	u181
   766  007DA0  EFD4  F03E         	goto	u180
   767  007DA4                     u181:
   768  007DA4  EFFC  F03E         	goto	l926
   769  007DA8                     u180:
   770  007DA8  0E01               	movlw	1
   771  007DAA  6E05               	movwf	___awdiv@counter^0,c
   772  007DAC  EFDC  F03E         	goto	l912
   773  007DB0                     l910:
   774  007DB0  90D8               	bcf	status,0,c
   775  007DB2  3603               	rlcf	___awdiv@divisor^0,f,c
   776  007DB4  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
   777  007DB6  2A05               	incf	___awdiv@counter^0,f,c
   778  007DB8                     l912:
   779  007DB8  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
   780  007DBA  EFE1  F03E         	goto	u191
   781  007DBE  EFE3  F03E         	goto	u190
   782  007DC2                     u191:
   783  007DC2  EFD8  F03E         	goto	l910
   784  007DC6                     u190:
   785  007DC6                     l914:
   786  007DC6  90D8               	bcf	status,0,c
   787  007DC8  3607               	rlcf	___awdiv@quotient^0,f,c
   788  007DCA  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
   789  007DCC  5003               	movf	___awdiv@divisor^0,w,c
   790  007DCE  5C01               	subwf	___awdiv@dividend^0,w,c
   791  007DD0  5004               	movf	(___awdiv@divisor+1)^0,w,c
   792  007DD2  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
   793  007DD4  A0D8               	btfss	status,0,c
   794  007DD6  EFEF  F03E         	goto	u201
   795  007DDA  EFF1  F03E         	goto	u200
   796  007DDE                     u201:
   797  007DDE  EFF6  F03E         	goto	l922
   798  007DE2                     u200:
   799  007DE2  5003               	movf	___awdiv@divisor^0,w,c
   800  007DE4  5E01               	subwf	___awdiv@dividend^0,f,c
   801  007DE6  5004               	movf	(___awdiv@divisor+1)^0,w,c
   802  007DE8  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
   803  007DEA  8007               	bsf	___awdiv@quotient^0,0,c
   804  007DEC                     l922:
   805  007DEC  90D8               	bcf	status,0,c
   806  007DEE  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
   807  007DF0  3203               	rrcf	___awdiv@divisor^0,f,c
   808  007DF2  2E05               	decfsz	___awdiv@counter^0,f,c
   809  007DF4  EFE3  F03E         	goto	l914
   810  007DF8                     l926:
   811  007DF8  5006               	movf	___awdiv@sign^0,w,c
   812  007DFA  B4D8               	btfsc	status,2,c
   813  007DFC  EF02  F03F         	goto	u211
   814  007E00  EF04  F03F         	goto	u210
   815  007E04                     u211:
   816  007E04  EF08  F03F         	goto	l930
   817  007E08                     u210:
   818  007E08  6C07               	negf	___awdiv@quotient^0,c
   819  007E0A  1E08               	comf	(___awdiv@quotient+1)^0,f,c
   820  007E0C  B0D8               	btfsc	status,0,c
   821  007E0E  2A08               	incf	(___awdiv@quotient+1)^0,f,c
   822  007E10                     l930:
   823  007E10  C007  F001         	movff	___awdiv@quotient,?___awdiv
   824  007E14  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
   825  007E18  0012               	return		;funcret
   826  007E1A                     __end_of___awdiv:
   827                           	callstack 0
   828                           
   829 ;; *************** function _HangTram *****************
   830 ;; Defined at:
   831 ;;		line 102 in file "newmain.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  hangtram        2    0[COMRAM] int 
   834 ;; Auto vars:     Size  Location     Type
   835 ;;		None
   836 ;; Return value:  Size  Location     Type
   837 ;;                  2    0[COMRAM] int 
   838 ;; Registers used:
   839 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   845 ;;      Params:         2       0       0       0       0       0       0
   846 ;;      Locals:         0       0       0       0       0       0       0
   847 ;;      Temps:          0       0       0       0       0       0       0
   848 ;;      Totals:         2       0       0       0       0       0       0
   849 ;;Total ram usage:        2 bytes
   850 ;; Hardware stack levels used: 1
   851 ;; This function calls:
   852 ;;		Nothing
   853 ;; This function is called by:
   854 ;;		_main
   855 ;; This function uses a non-reentrant model
   856 ;;
   857                           
   858                           	psect	text4
   859  007C3E                     __ptext4:
   860                           	callstack 0
   861  007C3E                     _HangTram:
   862                           	callstack 30
   863  007C3E                     
   864                           ;newmain.c: 102: int HangTram(int hangtram);newmain.c: 103: {;newmain.c: 104:     PORTC 
      +                          = 0xff;
   865  007C3E  6882               	setf	130,c	;volatile
   866                           
   867                           ;newmain.c: 105:     PORTCbits.RC1 = 0;
   868  007C40  9282               	bcf	130,1,c	;volatile
   869  007C42                     
   870                           ;newmain.c: 106:     PORTB = ledcode[hangtram];
   871  007C42  90D8               	bcf	status,0,c
   872  007C44  3401               	rlcf	HangTram@hangtram^0,w,c
   873  007C46  6ED9               	movwf	fsr2l,c
   874  007C48  3402               	rlcf	(HangTram@hangtram+1)^0,w,c
   875  007C4A  6EDA               	movwf	fsr2h,c
   876  007C4C  0E18               	movlw	low _ledcode
   877  007C4E  26D9               	addwf	fsr2l,f,c
   878  007C50  0E00               	movlw	high _ledcode
   879  007C52  22DA               	addwfc	fsr2h,f,c
   880  007C54  50DF               	movf	indf2,w,c
   881  007C56  6E81               	movwf	129,c	;volatile
   882  007C58  0012               	return		;funcret
   883  007C5A                     __end_of_HangTram:
   884                           	callstack 0
   885                           
   886 ;; *************** function _HangNghin *****************
   887 ;; Defined at:
   888 ;;		line 109 in file "newmain.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;  hangnghin       2    0[COMRAM] int 
   891 ;; Auto vars:     Size  Location     Type
   892 ;;		None
   893 ;; Return value:  Size  Location     Type
   894 ;;                  2    0[COMRAM] int 
   895 ;; Registers used:
   896 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   902 ;;      Params:         2       0       0       0       0       0       0
   903 ;;      Locals:         0       0       0       0       0       0       0
   904 ;;      Temps:          0       0       0       0       0       0       0
   905 ;;      Totals:         2       0       0       0       0       0       0
   906 ;;Total ram usage:        2 bytes
   907 ;; Hardware stack levels used: 1
   908 ;; This function calls:
   909 ;;		Nothing
   910 ;; This function is called by:
   911 ;;		_main
   912 ;; This function uses a non-reentrant model
   913 ;;
   914                           
   915                           	psect	text5
   916  007C22                     __ptext5:
   917                           	callstack 0
   918  007C22                     _HangNghin:
   919                           	callstack 30
   920  007C22                     
   921                           ;newmain.c: 109: int HangNghin(int hangnghin);newmain.c: 110: {;newmain.c: 111:     PORT
      +                          C = 0xff;
   922  007C22  6882               	setf	130,c	;volatile
   923                           
   924                           ;newmain.c: 112:     PORTCbits.RC0 = 0;
   925  007C24  9082               	bcf	130,0,c	;volatile
   926  007C26                     
   927                           ;newmain.c: 113:     PORTB = ledcode[hangnghin];
   928  007C26  90D8               	bcf	status,0,c
   929  007C28  3401               	rlcf	HangNghin@hangnghin^0,w,c
   930  007C2A  6ED9               	movwf	fsr2l,c
   931  007C2C  3402               	rlcf	(HangNghin@hangnghin+1)^0,w,c
   932  007C2E  6EDA               	movwf	fsr2h,c
   933  007C30  0E18               	movlw	low _ledcode
   934  007C32  26D9               	addwf	fsr2l,f,c
   935  007C34  0E00               	movlw	high _ledcode
   936  007C36  22DA               	addwfc	fsr2h,f,c
   937  007C38  50DF               	movf	indf2,w,c
   938  007C3A  6E81               	movwf	129,c	;volatile
   939  007C3C  0012               	return		;funcret
   940  007C3E                     __end_of_HangNghin:
   941                           	callstack 0
   942                           
   943 ;; *************** function _HangDV *****************
   944 ;; Defined at:
   945 ;;		line 88 in file "newmain.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;  hangdv          2    0[COMRAM] int 
   948 ;; Auto vars:     Size  Location     Type
   949 ;;		None
   950 ;; Return value:  Size  Location     Type
   951 ;;                  2    0[COMRAM] int 
   952 ;; Registers used:
   953 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   959 ;;      Params:         2       0       0       0       0       0       0
   960 ;;      Locals:         0       0       0       0       0       0       0
   961 ;;      Temps:          0       0       0       0       0       0       0
   962 ;;      Totals:         2       0       0       0       0       0       0
   963 ;;Total ram usage:        2 bytes
   964 ;; Hardware stack levels used: 1
   965 ;; This function calls:
   966 ;;		Nothing
   967 ;; This function is called by:
   968 ;;		_main
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text6
   973  007C06                     __ptext6:
   974                           	callstack 0
   975  007C06                     _HangDV:
   976                           	callstack 30
   977  007C06                     
   978                           ;newmain.c: 88: int HangDV(int hangdv);newmain.c: 89: {;newmain.c: 90:     PORTC = 0xff;
   979  007C06  6882               	setf	130,c	;volatile
   980                           
   981                           ;newmain.c: 91:     PORTCbits.RC3 = 0;
   982  007C08  9682               	bcf	130,3,c	;volatile
   983  007C0A                     
   984                           ;newmain.c: 92:     PORTB = ledcode[hangdv];
   985  007C0A  90D8               	bcf	status,0,c
   986  007C0C  3401               	rlcf	HangDV@hangdv^0,w,c
   987  007C0E  6ED9               	movwf	fsr2l,c
   988  007C10  3402               	rlcf	(HangDV@hangdv+1)^0,w,c
   989  007C12  6EDA               	movwf	fsr2h,c
   990  007C14  0E18               	movlw	low _ledcode
   991  007C16  26D9               	addwf	fsr2l,f,c
   992  007C18  0E00               	movlw	high _ledcode
   993  007C1A  22DA               	addwfc	fsr2h,f,c
   994  007C1C  50DF               	movf	indf2,w,c
   995  007C1E  6E81               	movwf	129,c	;volatile
   996  007C20  0012               	return		;funcret
   997  007C22                     __end_of_HangDV:
   998                           	callstack 0
   999                           
  1000 ;; *************** function _HangChuc *****************
  1001 ;; Defined at:
  1002 ;;		line 95 in file "newmain.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;  hangchuc        2    0[COMRAM] int 
  1005 ;; Auto vars:     Size  Location     Type
  1006 ;;		None
  1007 ;; Return value:  Size  Location     Type
  1008 ;;                  2    0[COMRAM] int 
  1009 ;; Registers used:
  1010 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1011 ;; Tracked objects:
  1012 ;;		On entry : 0/0
  1013 ;;		On exit  : 0/0
  1014 ;;		Unchanged: 0/0
  1015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1016 ;;      Params:         2       0       0       0       0       0       0
  1017 ;;      Locals:         0       0       0       0       0       0       0
  1018 ;;      Temps:          0       0       0       0       0       0       0
  1019 ;;      Totals:         2       0       0       0       0       0       0
  1020 ;;Total ram usage:        2 bytes
  1021 ;; Hardware stack levels used: 1
  1022 ;; This function calls:
  1023 ;;		Nothing
  1024 ;; This function is called by:
  1025 ;;		_main
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           	psect	text7
  1030  007BEA                     __ptext7:
  1031                           	callstack 0
  1032  007BEA                     _HangChuc:
  1033                           	callstack 30
  1034  007BEA                     
  1035                           ;newmain.c: 95: int HangChuc(int hangchuc);newmain.c: 96: {;newmain.c: 97:     PORTC = 0
      +                          xff;
  1036  007BEA  6882               	setf	130,c	;volatile
  1037                           
  1038                           ;newmain.c: 98:     PORTCbits.RC2 = 0;
  1039  007BEC  9482               	bcf	130,2,c	;volatile
  1040  007BEE                     
  1041                           ;newmain.c: 99:     PORTB = ledcode[hangchuc];
  1042  007BEE  90D8               	bcf	status,0,c
  1043  007BF0  3401               	rlcf	HangChuc@hangchuc^0,w,c
  1044  007BF2  6ED9               	movwf	fsr2l,c
  1045  007BF4  3402               	rlcf	(HangChuc@hangchuc+1)^0,w,c
  1046  007BF6  6EDA               	movwf	fsr2h,c
  1047  007BF8  0E18               	movlw	low _ledcode
  1048  007BFA  26D9               	addwf	fsr2l,f,c
  1049  007BFC  0E00               	movlw	high _ledcode
  1050  007BFE  22DA               	addwfc	fsr2h,f,c
  1051  007C00  50DF               	movf	indf2,w,c
  1052  007C02  6E81               	movwf	129,c	;volatile
  1053  007C04  0012               	return		;funcret
  1054  007C06                     __end_of_HangChuc:
  1055                           	callstack 0
  1056  0000                     
  1057                           	psect	rparam
  1058  0000                     
  1059                           	psect	idloc
  1060                           
  1061                           ;Config register IDLOC0 @ 0x200000
  1062                           ;	unspecified, using default values
  1063  200000                     	org	2097152
  1064  200000  FF                 	db	255
  1065                           
  1066                           ;Config register IDLOC1 @ 0x200001
  1067                           ;	unspecified, using default values
  1068  200001                     	org	2097153
  1069  200001  FF                 	db	255
  1070                           
  1071                           ;Config register IDLOC2 @ 0x200002
  1072                           ;	unspecified, using default values
  1073  200002                     	org	2097154
  1074  200002  FF                 	db	255
  1075                           
  1076                           ;Config register IDLOC3 @ 0x200003
  1077                           ;	unspecified, using default values
  1078  200003                     	org	2097155
  1079  200003  FF                 	db	255
  1080                           
  1081                           ;Config register IDLOC4 @ 0x200004
  1082                           ;	unspecified, using default values
  1083  200004                     	org	2097156
  1084  200004  FF                 	db	255
  1085                           
  1086                           ;Config register IDLOC5 @ 0x200005
  1087                           ;	unspecified, using default values
  1088  200005                     	org	2097157
  1089  200005  FF                 	db	255
  1090                           
  1091                           ;Config register IDLOC6 @ 0x200006
  1092                           ;	unspecified, using default values
  1093  200006                     	org	2097158
  1094  200006  FF                 	db	255
  1095                           
  1096                           ;Config register IDLOC7 @ 0x200007
  1097                           ;	unspecified, using default values
  1098  200007                     	org	2097159
  1099  200007  FF                 	db	255
  1100                           
  1101                           	psect	config
  1102                           
  1103                           ; Padding undefined space
  1104  300000                     	org	3145728
  1105  300000  FF                 	db	255
  1106                           
  1107                           ;Config register CONFIG1H @ 0x300001
  1108                           ;	Oscillator Selection bits
  1109                           ;	OSC = HS, HS oscillator
  1110                           ;	Fail-Safe Clock Monitor Enable bit
  1111                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1112                           ;	Internal/External Oscillator Switchover bit
  1113                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1114  300001                     	org	3145729
  1115  300001  02                 	db	2
  1116                           
  1117                           ;Config register CONFIG2L @ 0x300002
  1118                           ;	Power-up Timer Enable bit
  1119                           ;	PWRT = OFF, PWRT disabled
  1120                           ;	Brown-out Reset Enable bits
  1121                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1122                           ;	Brown Out Reset Voltage bits
  1123                           ;	BORV = 3, Minimum setting
  1124  300002                     	org	3145730
  1125  300002  19                 	db	25
  1126                           
  1127                           ;Config register CONFIG2H @ 0x300003
  1128                           ;	Watchdog Timer Enable bit
  1129                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1130                           ;	Watchdog Timer Postscale Select bits
  1131                           ;	WDTPS = 32768, 1:32768
  1132  300003                     	org	3145731
  1133  300003  1E                 	db	30
  1134                           
  1135                           ; Padding undefined space
  1136  300004                     	org	3145732
  1137  300004  FF                 	db	255
  1138                           
  1139                           ;Config register CONFIG3H @ 0x300005
  1140                           ;	CCP2 MUX bit
  1141                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1142                           ;	PORTB A/D Enable bit
  1143                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1144                           ;	Low-Power Timer1 Oscillator Enable bit
  1145                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1146                           ;	MCLR Pin Enable bit
  1147                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  1148  300005                     	org	3145733
  1149  300005  01                 	db	1
  1150                           
  1151                           ;Config register CONFIG4L @ 0x300006
  1152                           ;	Stack Full/Underflow Reset Enable bit
  1153                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1154                           ;	Single-Supply ICSP Enable bit
  1155                           ;	LVP = ON, Single-Supply ICSP enabled
  1156                           ;	Extended Instruction Set Enable bit
  1157                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1158                           ;	Background Debugger Enable bit
  1159                           ;	DEBUG = 0x1, unprogrammed default
  1160  300006                     	org	3145734
  1161  300006  84                 	db	132
  1162                           
  1163                           ; Padding undefined space
  1164  300007                     	org	3145735
  1165  300007  FF                 	db	255
  1166                           
  1167                           ;Config register CONFIG5L @ 0x300008
  1168                           ;	Code Protection bit
  1169                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1170                           ;	Code Protection bit
  1171                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1172                           ;	Code Protection bit
  1173                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1174                           ;	Code Protection bit
  1175                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1176  300008                     	org	3145736
  1177  300008  0F                 	db	15
  1178                           
  1179                           ;Config register CONFIG5H @ 0x300009
  1180                           ;	Boot Block Code Protection bit
  1181                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1182                           ;	Data EEPROM Code Protection bit
  1183                           ;	CPD = OFF, Data EEPROM not code-protected
  1184  300009                     	org	3145737
  1185  300009  C0                 	db	192
  1186                           
  1187                           ;Config register CONFIG6L @ 0x30000A
  1188                           ;	Write Protection bit
  1189                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1190                           ;	Write Protection bit
  1191                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1192                           ;	Write Protection bit
  1193                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1194                           ;	Write Protection bit
  1195                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1196  30000A                     	org	3145738
  1197  30000A  0F                 	db	15
  1198                           
  1199                           ;Config register CONFIG6H @ 0x30000B
  1200                           ;	Configuration Register Write Protection bit
  1201                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1202                           ;	Boot Block Write Protection bit
  1203                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1204                           ;	Data EEPROM Write Protection bit
  1205                           ;	WRTD = OFF, Data EEPROM not write-protected
  1206  30000B                     	org	3145739
  1207  30000B  E0                 	db	224
  1208                           
  1209                           ;Config register CONFIG7L @ 0x30000C
  1210                           ;	Table Read Protection bit
  1211                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1212                           ;	Table Read Protection bit
  1213                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1214                           ;	Table Read Protection bit
  1215                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1216                           ;	Table Read Protection bit
  1217                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1218  30000C                     	org	3145740
  1219  30000C  0F                 	db	15
  1220                           
  1221                           ;Config register CONFIG7H @ 0x30000D
  1222                           ;	Boot Block Table Read Protection bit
  1223                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1224  30000D                     	org	3145741
  1225  30000D  40                 	db	64
  1226                           tosu	equ	0xFFF
  1227                           tosh	equ	0xFFE
  1228                           tosl	equ	0xFFD
  1229                           stkptr	equ	0xFFC
  1230                           pclatu	equ	0xFFB
  1231                           pclath	equ	0xFFA
  1232                           pcl	equ	0xFF9
  1233                           tblptru	equ	0xFF8
  1234                           tblptrh	equ	0xFF7
  1235                           tblptrl	equ	0xFF6
  1236                           tablat	equ	0xFF5
  1237                           prodh	equ	0xFF4
  1238                           prodl	equ	0xFF3
  1239                           indf0	equ	0xFEF
  1240                           postinc0	equ	0xFEE
  1241                           postdec0	equ	0xFED
  1242                           preinc0	equ	0xFEC
  1243                           plusw0	equ	0xFEB
  1244                           fsr0h	equ	0xFEA
  1245                           fsr0l	equ	0xFE9
  1246                           wreg	equ	0xFE8
  1247                           indf1	equ	0xFE7
  1248                           postinc1	equ	0xFE6
  1249                           postdec1	equ	0xFE5
  1250                           preinc1	equ	0xFE4
  1251                           plusw1	equ	0xFE3
  1252                           fsr1h	equ	0xFE2
  1253                           fsr1l	equ	0xFE1
  1254                           bsr	equ	0xFE0
  1255                           indf2	equ	0xFDF
  1256                           postinc2	equ	0xFDE
  1257                           postdec2	equ	0xFDD
  1258                           preinc2	equ	0xFDC
  1259                           plusw2	equ	0xFDB
  1260                           fsr2h	equ	0xFDA
  1261                           fsr2l	equ	0xFD9
  1262                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        20
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     23      43
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                15    15      0    2840
                                              8 COMRAM    15    15      0
                           _HangChuc
                             _HangDV
                          _HangNghin
                           _HangTram
                            ___awdiv
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     311
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     904
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _HangTram                                             2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _HangNghin                                            2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _HangDV                                               2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _HangChuc                                             2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _HangChuc
   _HangDV
   _HangNghin
   _HangTram
   ___awdiv
   ___awmod
   ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     17      2B       1       33.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B      15        0.0%
DATA                 0      0      2B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Apr 09 16:02:30 2021

                     l20 7C04                       l23 7C58                       l32 7E68  
                     l17 7C20                       l41 7C7E                       l26 7C3C  
           ___awdiv@sign 0006      ___wmul@multiplicand 0003                      l272 7E18  
                    l285 7D54                      l900 7D82                      l910 7DB0  
                    l902 7D8A                      l920 7DEA                      l912 7DB8  
                    l904 7D8E                      l930 7E10                      l922 7DEC  
                    l914 7DC6                      l906 7D96                      l924 7DF2  
                    l916 7DCC                      l908 7DA8                      l940 7CC0  
                    l870 7C0A                      l918 7DE2                      l926 7DF8  
                    l950 7CF4                      l942 7CC4                      l934 7CA6  
                    l872 7BEA                      l880 7C22                      l928 7E08  
                    l960 7D2E                      l952 7CFC                      l944 7CD2  
                    l936 7CAA                      l874 7BEE                      l882 7C26  
                    l890 7D56                      l954 7D0A                      l962 7D34  
                    l946 7CDA                      l938 7CB8                      l970 7E1A  
                    l868 7C06                      l876 7C3E                      l892 7D5A  
                    l964 7D44                      l956 7D20                      l948 7CEC  
                    l884 7C5A                      l980 7E60                      l972 7E1E  
                    l878 7C42                      l894 7D68                      l966 7D4C  
                    l958 7D28                      l886 7C76                      l990 7ECC  
                    l982 7E80                      l974 7E2C                      l896 7D70  
                    l992 7EE8                      l984 7E88                      l976 7E2C  
                    l898 7D74                      l994 7F08                      l986 7E90  
                    l978 7E30                      l996 7F24                      l988 7EAC  
                    l998 7F44                      u200 7DE2                      u201 7DDE  
                    u210 7E08                      u211 7E04                      u220 7CB8  
                    u300 7FF8                      u221 7CB4                      u301 7FF4  
                    u230 7CD2                      u231 7CCE                      u160 7D68  
                    u240 7CEC                      u161 7D64                      u241 7CE8  
                    u170 7D82                      u250 7D0A                      u171 7D7E  
                    u251 7D06                      u180 7DA8                      u260 7D20  
                    u181 7DA4                      u261 7D1C                      u317 7F7A  
                    u190 7DC6                      u270 7D44                      u191 7DC2  
                    u271 7D40                      u327 7F96                      u280 7E60  
                    u337 7FB2                      u281 7E5C                      u290 7E80  
                    u347 7FCE                      u291 7E7C             ___awmod@sign 0006  
                    wreg 000FE8                     l1000 7F60                     l1010 7F84  
                   l1020 7FDC                     l1012 7FA0                     l1014 7FAC  
                   l1006 7F68                     l1016 7FC8                     l1008 7F74  
                   l1018 7FD8                     _main 7E1A                     fsr2h 000FDA  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0000  
           ___param_bank 000000             main@hangchuc 0010             main@hangtram 000C  
                  ?_main 0001          __end_of___awdiv 7E1A          __end_of___awmod 7D56  
        ___awdiv@divisor 0003          ___awdiv@counter 0005       HangNghin@hangnghin 0001  
                  _PORTB 000F81                    _PORTC 000F82                    _TRISB 000F93  
                  _TRISC 000F94         HangTram@hangtram 0001             main@timeTemp 0016  
                  main@i 000E                    tablat 000FF5                    status 000FD8  
       __end_of_HangChuc 7C06         __end_of_HangTram 7C5A          __initialization 7C80  
           __end_of_main 8000       __size_of_HangNghin 001C                   ??_main 0009  
          __activetblptr 000000            main@hangnghin 000A         ___awdiv@dividend 0001  
                 _HangDV 7C06                   ___wmul 7C5A                ??___awdiv 0005  
              ??___awmod 0005         ___awdiv@quotient 0007          ___awmod@divisor 0003  
                 isa$std 000001          ___awmod@counter 0005             __pdataCOMRAM 0018  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
             __accesstop 0080  __end_of__initialization 7CA0        __end_of_HangNghin 7C3E  
          ___rparam_used 000001           __pcstackCOMRAM 0001                ?_HangChuc 0001  
              ?_HangTram 0001                  ?_HangDV 0001                  ?___wmul 0001  
             ??_HangChuc 0003               ??_HangTram 0003          __size_of_HangDV 001C  
                __Hparam 0000                  __Lparam 0000                  ___awdiv 7D56  
                ___awmod 7CA6          __size_of___wmul 0026                  __pcinit 7C80  
                __ramtop 0600                  __ptext0 7E1A                  __ptext1 7C5A  
                __ptext2 7CA6                  __ptext3 7D56                  __ptext4 7C3E  
                __ptext5 7C22                  __ptext6 7C06                  __ptext7 7BEA  
                _ledcode 0018         ___awmod@dividend 0001     end_of_initialization 7CA0  
                postdec1 000FE5                  postinc0 000FEE                _PORTCbits 000F82  
             main@hangdv 0012           __end_of_HangDV 7C22                _HangNghin 7C22  
           HangDV@hangdv 0001           __end_of___wmul 7C80            __pidataCOMRAM 7BD6  
    start_initialization 7C80        __size_of_HangChuc 001C        __size_of_HangTram 001C  
               ??_HangDV 0003               ?_HangNghin 0001                 ??___wmul 0005  
               ?___awdiv 0001                 ?___awmod 0001           ___wmul@product 0005  
            ??_HangNghin 0003        ___wmul@multiplier 0001                 _HangChuc 7BEA  
               _HangTram 7C3E                copy_data0 7C94                 __Hrparam 0000  
               __Lrparam 0000         __size_of___awdiv 00C4         __size_of___awmod 00B0  
          __size_of_main 01E6         HangChuc@hangchuc 0001                 isa$xinst 000000  
               main@time 0014  
